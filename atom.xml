<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>小冲的生活</title>
  
  <subtitle>笃定</subtitle>
  <link href="https://xiaochong2018.gitee.io/atom.xml" rel="self"/>
  
  <link href="https://xiaochong2018.gitee.io/"/>
  <updated>2021-10-21T03:50:59.829Z</updated>
  <id>https://xiaochong2018.gitee.io/</id>
  
  <author>
    <name>Xiaochong</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>罗翔语录</title>
    <link href="https://xiaochong2018.gitee.io/2021/10/21/luo-xiang-yu-lu/"/>
    <id>https://xiaochong2018.gitee.io/2021/10/21/luo-xiang-yu-lu/</id>
    <published>2021-10-21T04:00:00.000Z</published>
    <updated>2021-10-21T03:50:59.829Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>我们很多时候是不是觉得我们抓的牌实在是太差了呀</p><p>但是再差的牌你都应该打下去</p><p>我们登上并非我们所选择的舞台</p><p>在坐的有谁的剧本是你自己设定的</p><p>其实不是的 </p><p>我们决定不了我们的出身</p><p>我们决定不了我们的智商</p><p>我们更决定不了我们这一生的贵人相助</p><p>很多时候我们经常会羡慕别人的剧本</p><p>我有的时候也非常羡慕别人的剧本</p><p>但是没有谁的剧本值得羡慕</p><p>你只能把你自己的剧本给演好</p><p>如果在你的一生中真的遭遇到这些挫折</p><p>那对不起 这就是你的剧本</p><p>你有两种选择</p><p>一种选择是弃演</p><p>一种选择是把既定的剧本给选好 给演好</p><p>所以希望大家能够演好自己的剧本</p><p>摘自–罗翔</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="摘抄" scheme="https://xiaochong2018.gitee.io/categories/%E6%91%98%E6%8A%84/"/>
    
    
    <category term="摘抄" scheme="https://xiaochong2018.gitee.io/tags/%E6%91%98%E6%8A%84/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://xiaochong2018.gitee.io/2021/10/20/centos7-de-qi-dong-guo-cheng/"/>
    <id>https://xiaochong2018.gitee.io/2021/10/20/centos7-de-qi-dong-guo-cheng/</id>
    <published>2021-10-20T11:59:49.051Z</published>
    <updated>2021-03-25T09:24:56.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>参考：<a href="https://blog.51cto.com/m51cto/1958856">https://blog.51cto.com/m51cto/1958856</a></p><p>centos7的启动过程</p><p>一、终端态启动顺序：</p><p>开机启过程<br>POST–&gt;BOOT<br>SEQUENCE–&gt;BOOTLOADER–&gt;KERNEL+INITRAMFS(INITRD)–&gt;ROOTFS–&gt;/sbin/init</p><p>POST:加电自检</p><p>检查内存，CPU等</p><p>Boot sequence：选择引导顺序</p><p>光盘启动，硬盘启动，网络启动，还是U盘启动(同windows)</p><p>Bootloader：引导加载器</p><p>MBR引导记录大小为512字节，其中前446个字节就是Bootloader,主要用来引导用户选择要启动的系统或不同的内核版本，把用户选定的内核装载到RAM中的特定空间中，解压，展开，而后把系统控制权移交给内核。</p><p>grub2分两部分：<br>1.在MBR引导记录中，大小为446字节，主要功能是引导启动介质的grub主体文件<br>2.partition,/boot/grub[2],此为grub的主体。</p><p>KERNEL+INITRAMFS(INITRD)–&gt;ROOTFS：加载内核</p><p>内核初始化，生成一个ramdisk文件，用来模拟系统环境。退出ramdisk,下一步加载到真正的根文件系统。</p><p>ramdisk：内存上临时虚拟的系统<br>ramdisk(虚拟磁盘，双缓冲，双缓存）—-&gt; ramfs（虚拟文件系统）<br>centos5:initrd</p><p>工具程序：mkinitrd</p><p>centos6,7:initramfs</p><p>工具程序：dracut,mkinitrd</p><p>/sbin/init：运行用户空间的第一个应用程序</p><p>init:</p><p>Centos 5: SysV init    配置文件：/etc/inittab<br>Centos 6: Upstart      配置文件：/etc/inittab;/etc/init/*.conf(主要）<br>Centos 7: systemd      配置文件：/etc/systemd/system;/usr/lib/systemd/system</p><p>至此，内核空间就已经启动完毕，内核启动完成接着开始启动用户态启动过程。<br>systemd是个守护进程，pid号为1,<br>后面所有启动的服务或进程都是systemd的子进程及子进程的子进程。</p><p>二、用户态的启动顺序</p><p>设置默认允许级别—&gt;初始化脚本，<br>完成系统初始化—&gt;关闭及启动对应级别下的服务—–&gt;设置登录终端—–&gt;[启动图形终端]</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://xiaochong2018.gitee.io/2021/10/20/centos7.6-jin-ru-dan-yong-hu-mo-shi/"/>
    <id>https://xiaochong2018.gitee.io/2021/10/20/centos7.6-jin-ru-dan-yong-hu-mo-shi/</id>
    <published>2021-10-20T11:59:49.050Z</published>
    <updated>2021-03-25T09:24:56.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>CentOS7.6进入单用户模式</p><p>1、在启动grub菜单，选择编辑启动选项<br>2、按键盘e键，来进入编辑界面<br>3、找到Linux 16那行，将ro改为rw init=/sysroot/bin/sh<br>如果用的是kvm做了console连接授权，还要把授权的console=ttyS0去掉<br>4、按下 Control+x ，使用单用户模式启动<br>5、使用下面的命令访问系统<br>chroot /sysroot<br>6、重置密码<br>passwd root<br>7、更新系统信息（如果打开了selinux需要做这一步）<br>touch /.autorelabel<br>8、退出chroot<br>exit<br>9、重启系统<br>reboot</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://xiaochong2018.gitee.io/2021/10/20/zai-kubernetes-zhong-bu-shu-elasticsearch/"/>
    <id>https://xiaochong2018.gitee.io/2021/10/20/zai-kubernetes-zhong-bu-shu-elasticsearch/</id>
    <published>2021-10-20T11:59:49.046Z</published>
    <updated>2020-05-23T13:46:06.570Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="在Kubernetes中部署Elasticsearch"><a href="#在Kubernetes中部署Elasticsearch" class="headerlink" title="在Kubernetes中部署Elasticsearch"></a>在Kubernetes中部署Elasticsearch</h2><p>原创 CALIN RUS <a href="javascript:void(0);">RancherLabs</a> <em>2018-12-25</em></p><p>modified by Devin hao 2020-05-23</p><p>介绍</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://xiaochong2018.gitee.io/2021/10/20/yi-wei-nian-qing-de-dong-shi-chang-gei-da-xue-sheng-de-18-tiao-hao-jian-yi/"/>
    <id>https://xiaochong2018.gitee.io/2021/10/20/yi-wei-nian-qing-de-dong-shi-chang-gei-da-xue-sheng-de-18-tiao-hao-jian-yi/</id>
    <published>2021-10-20T11:59:49.042Z</published>
    <updated>2020-03-18T13:35:35.615Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>做每件事情之前一定要考虑好，从而才能做到胸有成竹啊！</p><h2 id="一位年轻的董事长给大学生的18条好建议"><a href="#一位年轻的董事长给大学生的18条好建议" class="headerlink" title="一位年轻的董事长给大学生的18条好建议"></a><a href="https://www.cnblogs.com/axinno1/articles/2111158.html">一位年轻的董事长给大学生的18条好建议</a></h2><p>1.一定要有独立的人格、独立的思想。一个经过独立思考而坚持错误观点的人比一个不假思索而接受正确观点的人更值得肯定。不要成为灌输教育的牺牲品。</p><p>　　2.仕途，商界，学术。大致说来，每个人都注定要走上三条道路中的某一条。&lt;&lt;在进行职业生涯规划的时候，不妨以此作为思考的出发点。根据不同的职业生涯规划来塑造各自的核心竞争力。只有知道自己以后要做什么，才能知道自己应该学什么。 </p><p>3.专业无冷热，学校无高低。没有哪个用人单位会认为你代表了你的学校或者你的专业。千万不要因为你是名牌<a href="http://daxue.learning.sohu.com/">大学</a>()或者热门专业而沾沾自喜，也大可不必因为你的学校不好或者专业冷门而自卑。</p><p>　　4.千招会，不如一招熟。十个百分之十并不是百分之百，而是零。如果你有十项工作，每项都会做百分之十，那么，在用人单位眼中，你什么都不会。所以，你必须要让自己具备核心竞争力，“通才”只有在“专才”的基础上才有意义。</p><p>　　5.不逃课的学生不是好学生。什么课都不逃，跟什么课都逃掉没什么两样。一定要掌握学习的主动性，不要像读中学一样被老师牵着鼻子走。逃课没有错，但是不要逃错课。同时，既要逃课，又要让老师给高分。</p><p>　　6.一定要学会理财。对于贫困生来说，首先要做的不是挣钱，而是省钱。很多大学生读书的时候一掷千金，可是，毕业以后一个月的工资还不够交半个月的房租。</p><p>　　7.大部分女生将电脑当成了影碟机，大部分男生将电脑当成了游戏机。大学生要掌握必要的计算机操作能力，但是，很多时候电脑会成为浪费时间的堂而皇之的借口。有电脑的大学生非常多，可是，这中间很多人可能大学毕业的时候还不会Excel，不会做一个像样的PPT。</p><p>　　8.做事不如做人，人脉决定成败。一个人有多少钱并不是指他拥有多少钱的所有权，而是指他拥有多少钱的使用权。一个人具备多少能力，不只是说他一个人的时候能做什么，还包括他能通过别人做什么。一个人赚的钱，12.5%是靠自身的知识，87.5%则来自人脉关系。三十岁以前靠专业赚钱，三十岁以后拿人脉赚钱。所以，请好好珍惜大学期间建立起来的人脉关系。这几年你认识的朋友可能会是你毕业以后最可宝贵的财富。</p><p>　　9.互联网固然威力无穷，但是，如果你沉迷于网络聊天，或者沉迷于网络游戏，浪费的金钱倒是可以弥补，荒废的青春就无可追寻了。轻舞飞扬已经红颜薄命了，而痞子蔡却继续跟别的女孩发生着一次又一次的亲密接触。对于很多大学生而言，网吧就是一个血淋淋的黑洞。</p><p>　　10.爱情是不期而至的，可以期待，但不可以制造。花开堪折方须折，莫让鲜花败残枝。一个有一万块钱的人为你花掉一百元，你只占了他的百分之一；而一个只有十块钱的人为你花掉十块，你就成了他的全部。</p><p>　　11.研究生扩招的速度是30%，也就意味着硕士学历贬值的速度是30%。千万不要以为考研究生就是积极进取的表现。对于很多人而言，考研不过是一种消极逃避的方式罢了。对于绝大多数人而言，读研究生纯粹是浪费时间浪费金钱，立志从事科研、学术的人及其他少数人除外。</p><p>　　12.不要一门心思想着出国，更加不要迷信外国的月亮比中国圆。削尖脑袋记GRE词汇很可能是一件非常愚蠢也非常可悲的事情。既然全世界的公司都想到中国的市场上来瓜分蛋糕，为什么中国人还要一门心思到国外去留学然后给外国人打工？</p><p>　　13.人才市场就是一个地雷阵。通过多种方式求职固然没有错，但是千万不要饥不择食。只要用人单位一说要你交钱，你掉头就走便是了。</p><p>　　14.求职简历必须突出自己的核心竞争力。求职的时候大可不必像严守一那样“有一说一”，必要的时候恰到好处地说一些谎言是非常有用的。一份求职简历只要用一张A4纸做个表格就足够了。很多女生的求职简历就像是写真集，不但浪费钱，而且对求职毫无用处。面试其实是有规律的，每次面试的时候只要背标准答案就行了……</p><p>　　15.垃圾是放错位置的人才。所以，在找工作的时候一定要把自己放到那个让你成为人才而不是垃圾的职位上。当然，前提是你要知道自己究竟想做什么、究竟适合做什么。世界上最大的悲剧莫过于有太多的年轻人从来没有发现自己真正想做什么。骑驴找马固然没错，可是，并非随便找一头驴就能找到千里马。所以，一定要重视第一份工作。</p><p>　　16.大公司是做人，小公司是做事。进入公司工作以后，必须尽快融入写字楼政治。职员能否得到提升，很大程度不在于是否努力，而在于老板对你的赏识程度。在写字楼的政治斗争中，一定要学会自我保护。</p><p>　　17.瘦死的骆驼比马大。撑死胆大的，饿死胆小的。一定要有创业的勇气和魄力。如果你一直满足于给别人打工，那么，不管你工资多高，永远都只能是一个可怜的穷光蛋。就算月薪两万，在深圳上海那种地方，一年的存款还买不来一个小小的洗手间。</p><p>　　18.大学期间一定要多去图书馆多去自习室。很多书你现在不读，一辈子就再也没有机会去读了。虽然不是每本书看了都一定有用，但是，因为你不知道究竟哪本书以后会有用，所以只好多看书，并且抛弃那些过于功利的想法。尽管每次网到鱼的不过是一个网眼，但要想捕到鱼，就必须要编织一张网。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://xiaochong2018.gitee.io/2021/10/20/readme/"/>
    <id>https://xiaochong2018.gitee.io/2021/10/20/readme/</id>
    <published>2021-10-20T11:59:49.022Z</published>
    <updated>2021-03-25T09:24:56.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="md"><a href="#md" class="headerlink" title="md"></a>md</h1><p>blog-md</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://xiaochong2018.gitee.io/2021/10/20/linux-mu-lu-jie-gou/"/>
    <id>https://xiaochong2018.gitee.io/2021/10/20/linux-mu-lu-jie-gou/</id>
    <published>2021-10-20T11:59:48.987Z</published>
    <updated>2021-03-25T09:24:56.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>bin<br>bin 是 Binaries (二进制文件) 的缩写, 这个目录存放着最经常使用的命令。</p><p>boot<br>这里存放的是启动 Linux 时使用的一些核心文件，包括一些连接文件以及镜像文件。</p><p>dev<br>dev 是 Device(设备) 的缩写, 该目录下存放的是 Linux 的外部设备，在 Linux 中访问设备的方式和访问文件的方式是相同的。</p><p>etc<br>etc 是 Etcetera(等等) 的缩写,这个目录用来存放所有的系统管理所需要的配置文件和子目录。</p><p>home<br>用户的主目录，在 Linux 中，每个用户都有一个自己的目录，一般该目录名是以用户的账号命名的</p><p>lib<br>lib 是 Library(库) 的缩写这个目录里存放着系统最基本的动态连接共享库，其作用类似于 Windows 里的 DLL 文件。几乎所有的应用程序都需要用到这些共享库。</p><p>通过/bin和/sbin中的二进制文件。</p><p><a href="https://qastack.cn/unix/74646/difference-between-lib-lib32-lib64-libx32-and-libexec">https://qastack.cn/unix/74646/difference-between-lib-lib32-lib64-libx32-and-libexec</a></p><p>lib64<br>存放64位lib库</p><p>/lost+found：<br>这个目录一般情况下是空的，当系统非法关机后，这里就存放了一些文件。</p><p>media<br>linux 系统会自动识别一些设备，例如U盘、光驱等等，当识别后，Linux 会把识别的设备挂载到这个目录下。</p><p>mnt<br>系统提供该目录是为了让用户临时挂载别的文件系统的，我们可以将光驱挂载在 /mnt/ 上，然后进入该目录就可以查看光驱里的内容了。</p><p>opt<br>opt 是 optional(可选) 的缩写，这是给主机额外安装软件所摆放的目录。比如你安装一个ORACLE数据库则就可以放到这个目录下。默认是空的。</p><p>proc<br>proc 是 Processes(进程) 的缩写，/proc 是一种伪文件系统（也即虚拟文件系统），存储的是当前内核运行状态的一系列特殊文件，这个目录是一个虚拟的目录，它是系统内存的映射，我们可以通过直接访问这个目录来获取系统信息。</p><p>这个目录的内容不在硬盘上而是在内存里，我们也可以直接修改里面的某些文件，比如可以通过下面的命令来屏蔽主机的ping命令，使别人无法ping你的机器：<br>echo 1 &gt; /proc/sys/net/ipv4/icmp_echo_ignore_all</p><p>root<br>该目录为系统管理员，也称作超级权限者的用户主目录。</p><p>run<br>是一个临时文件系统，存储系统启动以来的信息。当系统重启时，这个目录下的文件应该被删掉或清除。如果你的系统上有 /var/run 目录，应该让它指向 run。</p><p>sbin<br>s 就是 Super User 的意思，是 Superuser Binaries (超级用户的二进制文件)的缩写，这里存放的是系统管理员使用的系统管理程序。</p><p>/selinux：<br> 这个目录是 Redhat/CentOS 所特有的目录，Selinux 是一个安全机制，类似于 windows 的防火墙，但是这套机制比较复杂，这个目录就是存放selinux相关的文件的。</p><p>src</p><p>srv<br>该目录存放一些服务启动之后需要提取的数据。</p><p>sys<br>这是 Linux2.6 内核的一个很大的变化。该目录下安装了<br>2.6 内核中新出现的一个文件系统 sysfs 。</p><p>sysfs 文件系统集成了下面3种文件系统的信息：<br>针对进程信息的 proc 文件系统、<br>针对设备的 devfs 文件系统<br>以及针对伪终端的 devpts 文件系统。</p><p>该文件系统是内核设备树的一个直观反映。</p><p>当一个内核对象被创建的时候，对应的文件和目录也在内核对象子系统中被创建。</p><p>tmp<br>tmp 是 temporary(临时) 的缩写这个目录是用来存放一些临时文件的。</p><p>usr<br>usr 是 unix shared resources(共享资源) 的缩写，这是一个非常重要的目录，用户的很多应用程序和文件都放在这个目录下，类似于 windows 下的 program files 目录。</p><p>var<br>var 是 variable(变量) 的缩写，这个目录中存放着在不断扩充着的东西，我们习惯将那些经常被修改的目录放在这个目录下。包括各种日志文件。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://xiaochong2018.gitee.io/2021/10/20/hello-world/"/>
    <id>https://xiaochong2018.gitee.io/2021/10/20/hello-world/</id>
    <published>2021-10-20T11:58:46.197Z</published>
    <updated>2021-10-20T11:58:46.197Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>改进CI管道中自动化性能测试的10条技巧（第1部分）</title>
    <link href="https://xiaochong2018.gitee.io/2019/11/01/gai-jin-ci-guan-dao-zhong-zi-dong-hua-xing-neng-ce-shi-de-10-tiao-ji-qiao-di-1-bu-fen/"/>
    <id>https://xiaochong2018.gitee.io/2019/11/01/gai-jin-ci-guan-dao-zhong-zi-dong-hua-xing-neng-ce-shi-de-10-tiao-ji-qiao-di-1-bu-fen/</id>
    <published>2019-11-01T09:17:05.000Z</published>
    <updated>2019-11-01T09:17:12.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="看一看如何通过连续测试和SLA改善CI管道的性能。"><a href="#看一看如何通过连续测试和SLA改善CI管道的性能。" class="headerlink" title="看一看如何通过连续测试和SLA改善CI管道的性能。"></a>看一看如何通过连续测试和SLA改善CI管道的性能。</h3><p><img src="https://dzone.com/storage/temp/12642760-10.jpg" alt="图片标题"></p><p><em>这是创建更好的CI管道的方法的1和2。</em></p><p>在持续集成管道中正确进行测试是Web规模软件开发的关键部分。对于许多公司而言，这是一个挑战，尤其是在自动化性能测试方面。这不是因为缺乏努力。许多公司似乎无法实现其努力的全部价值。原因很多。一些测试工作只是在重新发明轮子。其他人则只是出于执行目的而无明显意图地随机进行。确保测试既适当又旨在满足业务需求是事后才想到的。</p><p>不必一定是以这种方式。</p><p>任何公司都可以在自动化CI管道中进行有用，高效的性能测试。所需要的只是那些有知识的人的一些有用的知识。为了扩大“了解者”的圈子，我们创建了十个技巧列表，以改善CI Pipelines中的性能测试。</p><p>1.根据产品的长期目标进行连续测试</p><p>2.区分SLA，SLO和SLI</p><p>3.保持测试规模小且目标明确</p><p>4.在整体之前测试段</p><p>5.自动化不易碎的东西</p><p>6.节省时间，使用烟雾测试</p><p>7.利用您的源代码管理管理系统</p><p>8.没有反馈循环的期望不是</p><p>9.已知的基础架构是可测试的基础架构</p><p>10.使用您的CI / CD管道，而不是反对</p><p>今天的帖子将重点介绍前两个技巧，而其余建议将在单独的文章中介绍。</p><h2 id="1-根据产品的长期目标进行连续测试"><a href="#1-根据产品的长期目标进行连续测试" class="headerlink" title="1.根据产品的长期目标进行连续测试"></a><strong>1.根据产品的长期目标进行连续测试</strong></h2><p>如果你想快速识别什么可怕的事情是否在进行与贵公司的测试流程，请考虑以下情形。现在该发布产品了。开发团队中的每个人都以焦虑不安的状态坐在会议室的桌子旁，等待端到端测试完成，以便可以将代码推送发布。无论哪种方式，您都无法自拔。为什么？毕竟，如果测试顺利，代码将继续进行。没关系吧？错误。</p><p>发布的生存能力取决于单个引发焦虑的端到端测试的状态这一事实揭示了整个测试过程的重大缺陷。此类测试所承受的压力不应超过常规血液测试的压力。如果患者有定期体检，健康饮食和定期运动的病史，则血液检查应验证历史上的积极行为。但是，如果患者已经十年没有去看医生，只能依靠薯片和生啤酒的饮食生活，而且只能走到邮箱，那么简单的验血会改变您的生活。谁知道它可能揭示什么？</p><p>类比适用于IT流程。如果公司的总体开发实践是健康的，并且在软件开发生命周期的各个级别进行连续测试，则端到端测试应该只是另一个验证复选框。如果发现问题所在，则无需费力即可解决它。</p><p>当开发实践杂乱无章，而测试被拖到最后时，最后的端到端测试又怎会是一种焦虑的经历呢？谁知道代码中隐藏了多少技术债务，开发人员不再在公司工作留下了多少谜团。测试中有多少只不过是循环使用20％的代码库，而其余部分则保持不变？诸如此类的问题在开发环境中令人惊讶地普遍存在，在该环境中，长期产品目标尚不清楚，而测试事件则是偶然的。</p><p>当创造了所有人都可以充分理解长期产品目标的条件时，开发过程和所产生的代码质量也会提高（前提是在整个生命周期阶段都进行了连续测试）。基于产品的长期目标进行连续测试是明智且实用的，并有助于改善自动化性能测试。</p><h2 id="2-区分SLA，SLO和SLI"><a href="#2-区分SLA，SLO和SLI" class="headerlink" title="2.区分SLA，SLO和SLI"></a><strong>2.区分SLA，SLO和SLI</strong></h2><p>当大多数公司考虑定义软件/软件服务的工作方式时，他们相信服务水平协议。定义明确的SLA是必不可少的。否则，就没有可靠的方法让公司作为服务提供商或消费者运营。从提供商的角度来看，缺少SLA意味着客户可以随时（并期望）要求任何东西。从消费者的角度来看，没有SLA会使技术人员处于等待数小时的危险之中，因为他们的公司的数字基础架构崩溃时，他们一直处于等待与关键任务支持人员联系的状态。</p><p>SLA是必需的，但它们只能捕获部分图片。还需要更多。服务水平目标（SLO）和服务水平指标（SLI）的添加提供了必要的附加信息，以确保提供者和消费者之间的伙伴关系满足所有人的需求。</p><p>SLA描述了提供者和消费者之间的承诺；其复杂性将根据各方的需求而变化。SLA将定义每个服务的职责和服务的可用性。该协议仅取决于其背后目标的定义以及确定服务级别的度量标准。这就是SLO和SLI变得重要的地方。</p><p>如果提前定义了SLO，则建立SLA会容易得多。理解消费者希望从代码/服务中获得什么，将提供必要的见解，以确认所提供的服务符合期望。定义明确的SLO将有助于制定对所有人都有意义的SLA。</p><p>为了使SLA有效地满足SLO中规定的目标，必须定义一套标准的，易于理解的度量标准。否则，公司冒着将苹果与橙子进行比较的风险。因此，SLI的价值。服务水平指示器提供有关如何根据SLA衡量运营绩效的详细信息。SLI越精确，就越好。</p><p>SLO / SLI允许您根据SLA构造进行假设。确定了操作的需求和条件以及测量方法。“我需要喝点东西”和“我渴了，需要8盎司水来满足我的渴求”之间的区别。</p><p>然后，基于定义明确的SLO的SLA，然后根据详细SLI的一组度量标准进行测量，这将有益于常规操作以及测试过程。根据SLI中明确定义的参数，满足SLA要求的测试与即席测试相比，提供了更高的准确性和更可靠的分析。</p><p>在SLA，SLO和SLI之间进行区分将大大有助于在软件所涉及的各方（开发人员，测试人员和用户之间）之间建立有意义，可靠的关系。</p><p><em>下周，在由十个技巧组成的三部分博客系列中的第二篇中，我们将深入探讨技巧3-6。</em></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="自动化测试" scheme="https://xiaochong2018.gitee.io/tags/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>DevOps角色：您梦寐以求的工作是什么？</title>
    <link href="https://xiaochong2018.gitee.io/2019/11/01/devops-jiao-se-nin-meng-mei-yi-qiu-de-gong-zuo-shi-shi-me/"/>
    <id>https://xiaochong2018.gitee.io/2019/11/01/devops-jiao-se-nin-meng-mei-yi-qiu-de-gong-zuo-shi-shi-me/</id>
    <published>2019-11-01T09:09:06.000Z</published>
    <updated>2019-11-01T09:17:33.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="在DevOps环境中有很多可供选择的选择，每个人都可以找到一份工作。"><a href="#在DevOps环境中有很多可供选择的选择，每个人都可以找到一份工作。" class="headerlink" title="在DevOps环境中有很多可供选择的选择，每个人都可以找到一份工作。"></a>在DevOps环境中有很多可供选择的选择，每个人都可以找到一份工作。</h3><p><img src="https://dzone.com/storage/temp/12646937-blocks.jpg" alt="建筑模块"></p><p><em>有这么多DevOps角色可供选择，您将是哪个构建基块？</em></p><p>当IT专业人员迫切希望成为DevOps的专家时，对于各种DevOps角色还有很多困惑。因此，本文致力于使实施DevOps的公司的团队结构更加清晰。</p><p>您可能一直听说，在DevOps中，每个参与人员都扮演着共同的角色：DevOps，这是两种实践的结合：<em>Development</em>和<em>Operations</em>。但这远非事实。</p><h2 id="DevOps实践"><a href="#DevOps实践" class="headerlink" title="DevOps实践"></a><strong>DevOps实践</strong></h2><p>实际上，DevOps实践强调，开发人员应该能够执行由Ops家伙执行的任务，而Ops则应该能够执行由Dev家伙执行的任务。</p><p>既然您知道DevOps专业人员是具有多种技能的人员，那么您可能还想知道DevOps专业人员在其组织中负责的各种任务。如果是这样，请继续阅读。</p><p>要真正理解这个概念，您需要从另一个角度看待它。如果您置身于实施DevOps的公司中，那么它就更容易理解，因为您必须根据要求分配各种DevOps角色。</p><h2 id="DevOps角色"><a href="#DevOps角色" class="headerlink" title="DevOps角色"></a><strong>DevOps角色</strong></h2><p>首先让我列出各种角色及其描述。</p><ol><li><strong>DevOps传播者</strong> –负责实施DevOps的首席官（领导）</li><li><strong>发布管理器</strong> –发布新功能并确保发布后产品稳定性的工具</li><li><strong>自动化专家</strong> –负责实现工具自动化和编排的人</li><li><strong>软件开发人员/测试人员</strong> –实际开发代码并对其进行测试的人</li><li><strong>质量保证</strong> –确保产品质量符合其要求的人</li><li><strong>安全工程师</strong> –始终监视产品安全性和健康状况的<strong>工程师</strong></li></ol><p>这里要注意的重要一点是，其中许多角色将涉及一个团队或一组专业人员，例如软件开发人员/测试人员，安全工程师和质量保证。因此，您应该以层次结构的形式考虑这些角色及其关系。</p><p><img src="https://www.edureka.co/blog/wp-content/uploads/2018/02/DevOps-Roles.png" alt="DevOps角色"></p><p>根据公司的要求，甚至自动化专家也可以由多个人担任该角色。因此，让我更多地谈谈这些DevOps角色。</p><h3 id="DevOps传播者"><a href="#DevOps传播者" class="headerlink" title="DevOps传播者"></a><strong>DevOps传播者</strong></h3><p>就像我之前提到的那样，这是DevOps中的关键角色。由领导者或负责确保在产品的端到端开发中实施DevOps策略并带来环境积极影响的人员来担任此角色。</p><p>DevOps传播者还考虑到可用的各种自动化工具以及Dev和Ops团队具有的技能，还找到了改进产品现有体系结构的方法。他的主要目标是管理其他DevOps角色并从团队中获得全面的效率。</p><h3 id="发布经理"><a href="#发布经理" class="headerlink" title="发布经理"></a><strong>发布经理</strong></h3><p>该角色是产品可交付成果的关键角色，因为他需要将新功能/更新功能与现有框架集成在一起。该角色可以是担任发布工程师的角色的同一个人，也可以是领导发布工程师团队的发布经理。</p><p>该角色的主要重点领域是从开发到部署，以协调和管理产品。由于此角色是以重要方式参与的，因此应由了解该技术的工作原理和各种结构的技术人员（经理）来担任。</p><p>根据需求，将有多位经理领导各自的团队来处理多个功能（项目）。</p><h3 id="自动化专家"><a href="#自动化专家" class="headerlink" title="自动化专家"></a><strong>自动化专家</strong></h3><p>无需再次强调该角色的重要性，因为DevOps完全是关于自动化的。作为自动化专家，此角色应该能够理解什么可以自动化以及如何将一个产品堆栈与另一个产品堆栈集成。</p><p>此人也称为集成专家，负责分析，设计和实施持续部署的策略，同时确保生产和预生产系统的高可用性。</p><h3 id="软件开发人员-测试人员"><a href="#软件开发人员-测试人员" class="headerlink" title="软件开发人员/测试人员"></a><strong>软件开发人员/测试人员</strong></h3><p>该角色负责软件的实际根级开发。传统的编码人员和程序员属于这一类。除开发外，专业人员还负责测试代码。</p><p>名称可能保持不变，但是软件开发人员/测试人员的新角色大大增加了职责范围，因为他们不仅负责将新需求转化为代码，还负责单元测试，部署和持续监控。</p><h3 id="质量保证"><a href="#质量保证" class="headerlink" title="质量保证"></a><strong>质量保证</strong></h3><p>这是DevOps中引入的新角色，实际上可以保证产品的质量。通常也称为“体验保证”，此角色是传统测试和质量检查之外的一步。</p><p>在此，对产品的功能进行了极限测试，以发现每个缺陷并改善每个独立功能的性能欠佳，因为客户的经验至关重要。这个角色一直在寻找机会，以改善所有功能以提高客户满意度。</p><h3 id="安全工程师"><a href="#安全工程师" class="headerlink" title="安全工程师"></a><strong>安全工程师</strong></h3><p>安全工程师与任何其他角色一样重要，因为他们是负责监视产品交付能力的人员。他们与开发人员并肩工作，在过程中更早地嵌入了他们的建议（安全补丁）。</p><p>除了外部安全性之外，他们还监视系统以检查其性能，报告系统面临的任何停机时间并深入分析以找出造成该问题的原因。防止再次发生停机或安全风险是安全工程师的一项重要任务。</p><p>我希望到目前为止，您对组织中可能存在的各种DevOps角色有了很好的了解。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="devops" scheme="https://xiaochong2018.gitee.io/tags/devops/"/>
    
  </entry>
  
  <entry>
    <title> 容器和配置：3个DevOps工具以及对应的速查表</title>
    <link href="https://xiaochong2018.gitee.io/2019/10/15/rong-qi-he-pei-zhi-3-ge-devops-gong-ju-yi-ji-dui-ying-de-su-cha-biao/"/>
    <id>https://xiaochong2018.gitee.io/2019/10/15/rong-qi-he-pei-zhi-3-ge-devops-gong-ju-yi-ji-dui-ying-de-su-cha-biao/</id>
    <published>2019-10-15T03:10:23.000Z</published>
    <updated>2019-10-15T03:24:17.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="Puppet，Docker和Ansible速查表有助于简化DevOps的实现。"><a href="#Puppet，Docker和Ansible速查表有助于简化DevOps的实现。" class="headerlink" title="Puppet，Docker和Ansible速查表有助于简化DevOps的实现。"></a>Puppet，Docker和Ansible速查表有助于简化DevOps的实现。</h3><p><img src="https://dzone.com/storage/temp/12567617-tools.jpg" alt="工具"></p><p><em>这些DevOps工具使每个DevOps实施都更加容易。</em></p><h2 id="Puppet"><a href="#Puppet" class="headerlink" title="Puppet"></a><strong>Puppet</strong></h2><p>Puppet是使用最广泛的DevOps工具之一。它通过支持版本控制，自动测试和连续交付的功能，使交付和发布技术更改的速度更快，更频繁。它可以管理多台服务器并执行系统配置。出于多种原因，Puppet是当今IT行业中最流行的配置管理工具之一。</p><p>Puppet提供了更多的平台支持。例如，以下是您可以使用Puppet管理的平台：</p><ul><li>Debian / Ubuntu</li><li>Microsoft Windows</li><li>Redhat，Centos，Fedora</li><li>Mac OS X Server</li></ul><p>与其他配置管理工具不同，Puppet在任何系统上部署配置后，都会在一定间隔后继续验证那些配置。您也可以修改这些间隔。</p><h3 id="了解Puppet架构和Puppet组件"><a href="#了解Puppet架构和Puppet组件" class="headerlink" title="了解Puppet架构和Puppet组件"></a><strong>了解Puppet架构和Puppet组件</strong></h3><p><img src="https://dzone.com/storage/temp/12568247-how-does-puppet-work-1.png" alt="Puppet"></p><p><strong>Puppet Master：</strong> Puppet Master是处理所有与配置有关的信息的工具。Puppet Master在指定的服务器上运行，并管理部署和配置。</p><p><strong>Puppet Agent：</strong> Puppet代理在客户端上运行。Puppet代理是由Puppet Master维护和管理的实际工作机器。</p><p><strong>Config Repository：</strong> Config Repository是存储与服务器相关的配置和节点的位置。可以在需要时随时将其拉出。</p><p><strong>Facts</strong>：它们是全局变量，包含与机器有关的详细信息，例如操作系统和网络接口。它们用于分析任何节点的当前状态。</p><p><strong>Catalog</strong>：将用Puppet编写的所有配置都转换为编译后的格式，称为目录，然后将这些目录应用于目标系统。</p><p><strong>Manifests</strong>：清单是声明所有需要检查和更改的所有资源（即服务，程序包或文件）的文件。清单的扩展名为“ .pp”。</p><p><strong>Module</strong>：模块是清单文件的集合，这些清单文件的组织方式便于共享文件。</p><p><strong>Class</strong>：与其他编程语言一样，Puppet也具有用于更好地组织代码的类，从而使阅读和理解代码以及重用部分代码更加容易。</p><p><strong>Resources</strong>：在Puppet代码中，是通过声明资源定义的编码块，其中资源可以表示包，文件，用户，命令。</p><p><strong>Nodes</strong>：要在其上安装P代理的所有要管理的服务器或客户端都称为节点。</p><h2 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a><strong>Docker</strong></h2><p>Docker是高端DevOps工具，它允许在多个系统上构建，交付和运行分布式应用程序。它有助于快速组装应用程序，通常适用于容器管理。</p><p>使用Docker容器时的一些重要术语包括：</p><ul><li><strong>Layer</strong>：只读文件以配置系统</li><li><strong>Image</strong>：只读层，它是镜像的基础</li><li><strong>Container</strong>：镜像的可运行实例</li><li><strong>Registry/hub</strong>: 镜像存放的中央位置</li><li><strong>Docker machine</strong>：运行Docker容器的虚拟机</li><li><strong>Docker-compose</strong>：一个虚拟机，可将多个容器作为系统运行</li></ul><p><img src="https://dzone.com/storage/temp/12568254-docker-cheat-sheet.jpg" alt="Docker速查表"></p><h2 id="Ansible"><a href="#Ansible" class="headerlink" title="Ansible"></a><strong>Ansible</strong></h2><p>Ansible是一种开源IT配置工具，可帮助自动执行服务器和云配置，配置管理和应用程序部署。它可以管理复杂的部署并提高生产率，并有助于自动化应用程序的整个生命周期。 </p><p>让我们考虑一种情况，其中系统管理员负责处理公司的基础结构。有九台服务器，其中五台服务器充当Web服务器，五台服务器充当数据库服务器。此外，您想在Web服务器上安装Tomcat，在数据库服务器上安装MySQL。在传统方法中，系统管理员将必须手动管理服务器，安装所需的软件并更改配置，以及分别管理每个服务器上的服务。Ansile通过自动执行此过程的大部分步骤来帮助解决这一问题。<br><img src="https://dzone.com/storage/temp/12568248-ansible-cheat-sheet-3.jpg" alt="Ansible速查表"></p><h3 id="Ansible中的重要术语"><a href="#Ansible中的重要术语" class="headerlink" title="Ansible中的重要术语"></a><strong>Ansible中的重要术语</strong></h3><p><strong>Controller Machine</strong>：这是Ansible的安装位置。控制器机器有助于在您管理的服务器上启用配置。</p><p><strong>Inventory</strong>：基本上，这是一个初始化文件，其中包含有关您所管理的服务器的信息。</p><p><strong>Playbook</strong>：脚本化的有组织的单位，用于定义服务器配置管理的自动化作业。</p><p><strong>Task</strong>：任务块定义了要在服务器上执行的单个过程，例如安装软件包。</p><p><strong>Nagios</strong>：此工具有助于监视IT基础结构。它能够确定错误并在标准网络，服务器和日志监视系统的帮助下进行纠正。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="devops" scheme="https://xiaochong2018.gitee.io/tags/devops/"/>
    
  </entry>
  
  <entry>
    <title>将Python脚本变成漂亮的ML工具</title>
    <link href="https://xiaochong2018.gitee.io/2019/10/08/jiang-python-jiao-ben-bian-cheng-piao-liang-de-ml-gong-ju/"/>
    <id>https://xiaochong2018.gitee.io/2019/10/08/jiang-python-jiao-ben-bian-cheng-piao-liang-de-ml-gong-ju/</id>
    <published>2019-10-08T09:03:50.000Z</published>
    <updated>2019-10-08T09:03:50.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="将Python脚本变成漂亮的ML工具"><a href="#将Python脚本变成漂亮的ML工具" class="headerlink" title="将Python脚本变成漂亮的ML工具"></a>将Python脚本变成漂亮的ML工具</h2><p>Streamlit，这是专为ML工程师打造的应用程序框架<br>Adrien Treuille<br><img src="https://img.hacpai.com/file/2019/10/1Mbn2SxozueUkGKPW1NJkOw-342c5971.gif" alt="1Mbn2SxozueUkGKPW1NJkOw.gif"><br>在300行Python中使用实时神经网络推理对语义搜索引擎进行编码。</p><p>以我的经验，每个不平凡的机器学习项目最终都将使用漏洞缠身且无法维护的内部工具进行缝合。这些工具（通常是Jupyter笔记本和Flask应用程序的拼凑而成）难以部署，需要对客户端-服务器体系结构进行推理，并且无法与Tensorflow GPU会话等机器学习结构很好地集成。</p><p>我首先在卡内基·梅隆大学（Carnegie Mellon），然后在伯克利（Berkeley），谷歌X（Google X），以及后来在Zoox构建自动机器人时就看到了。这些工具通常是在Jupyter笔记本电脑中诞生的：传感器校准工具，模拟比较应用程序，LIDAR对准应用程序，场景重播工具等等。<br>随着工具重要性的提高，项目经理介入了。过程萌芽了。要求开花。这些单独的项目孕育成脚本，并逐渐成为繁琐的维护噩梦。</p><p><img src="https://img.hacpai.com/file/2019/10/15BWfcoBn2yypksY8QuKA-9aaa7cb1.png" alt="15BWfcoBn2yypksY8QuKA.png"><br>机器学习工程师的临时应用构建流程。</p><p>当工具变得至关重要时，我们召集了<strong>工具团队</strong>。他们写了流利的Vue和React。他们在笔记本电脑上贴上声明性框架的标签。他们有一个设计过程：</p><p><img src="https://img.hacpai.com/file/2019/10/1hNO5NYKjcsEV7jIpEaz8Eg-7c517413.png" alt="1hNO5NYKjcsEV7jIpEaz8Eg.png"><br>工具团队的应用程序构建流程整洁。</p><p>太棒了!但是这些工具都需要新功能，例如每周一次。工具团队正在支持其他十个项目。他们会说：“我们将在两个月内再次更新您的工具。”<br>因此，我们回到了构建自己的工具，部署Flask应用程序，编写HTML，CSS和JavaScript，以及尝试对从笔记本到样式表的所有内容进行版本控制的过程。因此，我的老Google X朋友Thiago Teixeira和我开始思考以下问题：<strong>如果我们能够使构建工具像编写Python脚本一样容易，该怎么办？</strong><br>我们希望机器学习工程师无需工具团队就能创建精美的应用程序。这些内部工具应作为ML工作流程的自然副产品而出现。写这样的工具应该感觉像训练神经网络或Jupyter执行即席分析！同时，我们希望保留功能强大的应用程序框架的所有灵活性。我们想要创建工程师可以炫耀的漂亮，高性能的工具。基本上，我们想要这样：</p><p><img src="https://img.hacpai.com/file/2019/10/1gdD55KRcRVRvfjsQLsXA-6c78e2d5.png" alt="1gdD55KRcRVRvfjsQLsXA.png"><br>Streamlit应用程序构建流程。</p><p>我们拥有一个了不起的Beta社区，其中包括来自Uber，Twitter，Stitch Fix和Dropbox的工程师，我们工作了一年的时间来创建Streamlit，这是一个针对ML工程师的完全免费和开源的应用程序框架。对于每个原型，Streamlit的核心原理变得越来越简单。他们是：<br><strong>＃1：拥抱Python脚本。</strong>Streamlit应用程序实际上只是从上到下运行的脚本。没有隐藏状态。您可以使用函数调用来分解代码。如果您知道如何编写Python脚本，则可以编写Streamlit应用程序。例如，这是您写入屏幕的方式：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">导入streamlit为st </span><br><span class="line">st.write（'Hello，world！'）</span><br></pre></td></tr></tbody></table></figure><p><img src="https://img.hacpai.com/file/2019/10/1VNqEOqFJQl5fB7Z0ed5lMw-83fa2837.png" alt="1VNqEOqFJQl5fB7Z0ed5lMw.png"></p><p>很高兴见到你。<br><strong>＃2：将小部件视为变量。</strong>Streamlit中没有回调！每次交互都只是从上到下重新运行脚本。这种方法可以产生非常干净的代码：<br>导入streamlit为st </p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x = st.slider（'x'）</span><br><span class="line">st.write（x，'squared is'，x * x）</span><br></pre></td></tr></tbody></table></figure><p><img src="https://img.hacpai.com/file/2019/10/1h8BwonRrhnh3KtjO5cDEcA-0f122826.png" alt="1h8BwonRrhnh3KtjO5cDEcA.png"><br>包含三行代码的交互式Streamlit应用程序。</p><p><strong>＃3：重用数据和计算。</strong>如果您下载大量数据或执行复杂的计算该怎么办？关键是跨运行安全地重用信息。Streamlit引入了一种缓存原语，其行为类似于持久的默认情况下不可变的数据存储，可让Streamlit应用程序安全，轻松地重用信息。例如，此代码<strong>下载数据一次</strong>从Udacity自驾车项目，得到一个简单，快捷的应用程序：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">导入 streamlit as st</span><br><span class="line">将熊猫作为 pd 导入</span><br><span class="line"></span><br><span class="line">＃重复使用这些数据！</span><br><span class="line">read_and_cache_csv = st.cache（pd.read_csv）</span><br><span class="line"></span><br><span class="line">BUCKET  =  “ https://streamlit-self-driving.s3-us-west-2.amazonaws.com/ ”</span><br><span class="line">数据= read_and_cache_csv（BUCKET  +  “ labels.csv.gz ”，NROWS = 1000）</span><br><span class="line">wanted_label = st.selectbox（'过滤到：'，[ ' car '，' truck ' ]）</span><br><span class="line">st.write（数据[数据。标签==所需标签]）</span><br></pre></td></tr></tbody></table></figure><p>原始代码查看：<a href="https://gist.github.com/treuille/c633dc8bc86efaa98eb8abe76478aa81/raw/2019640b6a9ff5da5ab6d5b11b3345ddc764b285/cache_example.py">https://gist.github.com/treuille/c633dc8bc86efaa98eb8abe76478aa81/raw/2019640b6a9ff5da5ab6d5b11b3345ddc764b285/cache_example.py</a></p><p>使用st.cache在Streamlit运行中保留数据。要运行此代码，请按照以下说明进行操作。</p><p><img src="https://img.hacpai.com/file/2019/10/1vLvk0xZUVEx1GcrzYhWxXQ-b58f56c0.png" alt="1vLvk0xZUVEx1GcrzYhWxXQ.png"></p><p>运行上面的st.cache示例的输出。</p><p>简而言之，Streamlit的工作方式如下：</p><ol><li>对于每个用户交互，整个脚本都是从头开始运行的。</li><li>Streamlit在给定小部件状态的情况下为每个变量分配一个最新值。</li><li>缓存允许Streamlit跳过冗余数据获取和计算。<br>或在图片中：<br><img src="https://img.hacpai.com/file/2019/10/1l4gxFYEZnRhysQQWIVJgA-afdf8c2f.png" alt="1l4gxFYEZnRhysQQWIVJgA.png"><br>用户事件触发Streamlit从头开始重新运行脚本。只有高速缓存在运行之间持续存在。</li></ol><p>如果这听起来很有趣，那么您可以立即尝试！赶紧运行：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ pip install --upgrade streamlit </span><br><span class="line">$ streamlit hello</span><br></pre></td></tr></tbody></table></figure>   <figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">现在，您可以在浏览器中查看Streamlit应用程序。</span><br><span class="line">本地URL：</span><br><span class="line">http://localhost:8501 </span><br><span class="line">外网URL：</span><br><span class="line">http://10.0.1.29:8501</span><br></pre></td></tr></tbody></table></figure><p>这将自动弹出打开一个指向您本地Streamlit应用程序的Web浏览器。如果没有，只需单击链接。</p><p><img src="https://img.hacpai.com/file/2019/10/1Btm7O0pYqAkenXUPECLw-6ba5c610.png" alt="1Btm7O0pYqAkenXUPECLw.png"></p><p>要查看类似此分形动画的更多示例，请从命令行运行streamlit hello。</p><hr><p>好。你从分形玩回来了吗？这些可能会令人着迷。<br>这些想法的简单性不会阻止您使用Streamlit创建令人难以置信的丰富实用的应用程序。在Zoox和Google X期间，我看着无人驾驶汽车项目激增为数以十亿计的视觉数据，需要对其进行搜索和理解，包括在图像上运行模型以比较性能。我见过的每个自动驾驶汽车项目最终都让整个团队都在使用这种工具。<br>在Streamlit中构建这样的工具很容易。这个Streamlit演示使您可以在整个Udacity自动驾驶汽车照片数据集中执行语义搜索，可视化人类注释的地面真相标签，并从应用程序内部实时运行完整的神经网络（YOLO） [1]。<br><img src="https://img.hacpai.com/file/2019/10/1p3XPmx0TUIuMmQQa4mjHQ-81b29b26.gif" alt="1p3XPmx0TUIuMmQQa4mjHQ.gif"></p><p>这个300行的Streamlit演示结合了语义视觉搜索和交互式神经网络推理。</p><p>整个应用程序是一个完全自包含的300行Python脚本，其中大多数是机器学习代码。实际上，整个应用程序中只有23个Streamlit调用。您可以立即自己运行它！</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ pip install --upgrade streamlit opencv-python </span><br><span class="line">$ streamlit run</span><br><span class="line">https://raw.githubusercontent.com/streamlit/demo-self-driving/master/app.py</span><br></pre></td></tr></tbody></table></figure><hr><p>在与机器学习团队合作进行自己的项目时，我们意识到这些简单的想法产生了许多重要的好处：<br><strong>Streamlit应用程序是纯Python文件。</strong>因此，您可以在Streamlit中使用自己喜欢的编辑器和调试器。</p><p><img src="https://img.hacpai.com/file/2019/10/14KMALKoeS3TUSBn0ryzYg-d7bc9c09.png" alt="14KMALKoeS3TUSBn0ryzYg.png"></p><p>我最喜欢的用于编写Streamlit应用程序的布局在左侧是VSCode，在右侧是Chrome。</p><p><strong>纯Python脚本可与Git</strong>和其他源代码控制软件<strong>无缝配合</strong>，包括提交，拉取请求，问题和注释。因为Streamlit的基础语言是纯Python，所以您可以免费获得这些出色的协作工具的所有好处。</p><p><img src="https://img.hacpai.com/file/2019/10/0pY7e7BLPI2atTV-4bf401a4.png" alt="0pY7e7BLPI2atTV.png"></p><p>因为Streamlit应用程序只是Python脚本，所以您可以使用Git轻松地对其进行版本控制。</p><p><strong>Streamlit提供了即时模式实时编码环境。</strong>当Streamlit检测到源文件更改时，只需单击始终重新运行。</p><p><img src="https://img.hacpai.com/file/2019/10/1P3vtLkHGeCRHGu5B5ifg-0d278a81.png" alt="1P3vtLkHGeCRHGu5B5ifg.png"><br>单击“始终重新运行”以启用实时编码。</p><p><strong>缓存简化了计算管道的设置。</strong>令人惊讶的是，链接缓存的功能会自动创建高效的计算管道！考虑以下代码，这些代码是从我们的Udacity演示改编而成的：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">import streamlit as st</span><br><span class="line">import pandas as pd</span><br><span class="line"></span><br><span class="line">@st.cache</span><br><span class="line">def load_metadata():</span><br><span class="line">    DATA_URL = "https://streamlit-self-driving.s3-us-west-2.amazonaws.com/labels.csv.gz"</span><br><span class="line">    return pd.read_csv(DATA_URL, nrows=1000)</span><br><span class="line"></span><br><span class="line">@st.cache</span><br><span class="line">def create_summary(metadata, summary_type):</span><br><span class="line">    one_hot_encoded = pd.get_dummies(metadata[["frame", "label"]], columns=["label"])</span><br><span class="line">    return getattr(one_hot_encoded.groupby(["frame"]), summary_type)()</span><br><span class="line"></span><br><span class="line"># Piping one st.cache function into another forms a computation DAG.</span><br><span class="line">summary_type = st.selectbox("Type of summary:", ["sum", "any"])</span><br><span class="line">metadata = load_metadata()</span><br><span class="line">summary = create_summary(metadata, summary_type)</span><br><span class="line">st.write('## Metadata', metadata, '## Summary', summary)</span><br></pre></td></tr></tbody></table></figure><p>源码来自：<a href="https://gist.github.com/treuille/ac7755eb37c63a78fac7dfef89f3517e/raw/568cc2d190c2f96b2a8a7aaf6fa444d68bde630e/caching_DAG_example.py">https://gist.github.com/treuille/ac7755eb37c63a78fac7dfef89f3517e/raw/568cc2d190c2f96b2a8a7aaf6fa444d68bde630e/caching_DAG_example.py</a></p><p>Streamlit中的简单计算管道。要运行此代码，请按照以下说明进行操作。<br>基本上，管道是load_metadata→create_summary。每次运行脚本时，<strong>Streamlit只会重新计算需要正确答案的管道子集。</strong>酷！</p><p><img src="https://img.hacpai.com/file/2019/10/1e0z12L0pXYlCE5OM3n6LA-7b6f242f.png" alt="1e0z12L0pXYlCE5OM3n6LA.png"><br>为了使应用程序具有高性能，Streamlit仅重新计算更新UI所需的任何内容。</p><p><strong>Streamlit是为GPU构建的。</strong>Streamlit允许直接访问机器级原语，例如TensorFlow和PyTorch，并补充了这些库。例如，在此演示中，Streamlit的缓存存储了整个NVIDIA名人GAN [2]。当用户更新滑块时，这种方法几乎可以实现瞬时推断。</p><p><img src="https://img.hacpai.com/file/2019/10/1188SkUE1onGcpQIuSZsiMQ-644dc8b5.gif" alt="1188SkUE1onGcpQIuSZsiMQ.gif"><br>该Streamlit应用程序使用管韶博的TL-GAN [3] 演示了NVIDIA名人GAN [2]模型。</p><p><strong>Streamlit是一个免费的开源库，而不是专有的Web应用程序。</strong>您可以在不与我们联系的情况下在本地提供Streamlit应用程序。您甚至可以在没有Internet连接的笔记本电脑上本地运行Streamlit！此外，现有项目可以逐步采用Streamlit。</p><p><img src="https://img.hacpai.com/file/2019/10/1nyOMWYNcM9mPTU5mHf1CxQ-fa82969b.png" alt="1nyOMWYNcM9mPTU5mHf1CxQ.png"><br>有几种方法逐渐采用Streamlit。（图标由fullvector / Freepik提供。）<br>这只是您使用Streamlit可以做的事情的表面。</p><p>Streamlit最令人兴奋的方面之一是如何将这些原语轻松地组合成看起来像脚本的复杂应用程序。关于我们的架构如何工作以及我们计划的功能，我们还有很多话要说，但是我们将其保存下来以备将来之用。</p><p><img src="https://img.hacpai.com/file/2019/10/1wmwwsWkOHzsYLe8pB2RzBA-33e9fe5c.png" alt="1wmwwsWkOHzsYLe8pB2RzBA.png"><br>Streamlit组件的框图。更多即将推出！</p><p>我们很高兴能最终与社区今天共享Streamlit，并看到你们所有人用它构建的东西。我们希望您会发现将Python脚本转换为漂亮的ML应用变得轻松而愉快。</p><p>感谢Amanda Kelly，Thiago Teixeira，TC Ricks，Seth Weidman，Regan Carey，Beverly Treuille，GenevièveWachtell和Barney Pell在本文中提供的有益帮助。</p><p>参考文献：<br>[1] J. Redmon and A. Farhadi, *YOLOv3: An Incremental Improvement *(2018), arXiv.<br>[2] T. Karras, T. Aila, S. Laine, and J. Lehtinen, <em>Progressive Growing of GANs for Improved Quality, Stability, and Variation</em> (2018), ICLR.<br>[3] S. Guan, *Controlled image synthesis and editing using a novel TL-GAN model *(2018), Insight Data Science Blog.</p><p>感谢TC Ricks ，Amanda Kelly 和Amanda Kelly 。 </p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="机器学习" scheme="https://xiaochong2018.gitee.io/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>如何为DevOps的面试做好充分准备</title>
    <link href="https://xiaochong2018.gitee.io/2019/09/24/ru-he-wei-devops-de-mian-shi-zuo-hao-chong-fen-zhun-bei/"/>
    <id>https://xiaochong2018.gitee.io/2019/09/24/ru-he-wei-devops-de-mian-shi-zuo-hao-chong-fen-zhun-bei/</id>
    <published>2019-09-24T04:43:37.000Z</published>
    <updated>2019-09-24T04:43:37.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="这是您为DevOps热点准备的面试准备。"><a href="#这是您为DevOps热点准备的面试准备。" class="headerlink" title="这是您为DevOps热点准备的面试准备。"></a>这是您为DevOps热点准备的面试准备。</h3><p><img src="https://dzone.com/storage/temp/12433224-interiew-chairs-and-table.jpg" alt="面试桌椅"></p><p><em>那么，为什么他们要雇用您呢？</em></p><p>在过去的十年中，DevOps成为一种新的技术文化和职业，将软件开发所需的快速迭代与基础架构运营团队的坚如磐石的稳定性相结合。对于系统管理员，运营工程师以及其他拥有强大系统和软件背景的人员来说，过渡到DevOps的时间可能比现在更好。截至2019年8月，仅在美国，目前就有超过50,000个 LinkedIn DevOps工作岗位。</p><p>假设您已经了解了基础知识，并准备开始寻找工作。您如何评价DevOps面试？DevOps工程师必须既是优秀的软件开发人员，又是基础架构专家，因此，他们应该知道Linux基础架构，网络，算法和DevOps工具（例如Terraform，Docker和Kubernetes）。范围从标准软件工程师编码问题到有关系统设计，再到Linux调试和DevOps工具的问题等等。</p><p>这是一个令人生畏的清单，但请不要害怕！在Insight上，DevOps奖学金将许多具有可转让技能的个人的职业推向了人们所期望的行业DevOps职位。这是我们为他们准备面试的方式。</p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>动机是一个好的开始，但是您需要纪律才能有效地做好准备。我编写了这本指南，以帮助您制定有规律的面试准备程序。面试真的很烂-这是随机的，可能会让您对自己感到难过。在此过程中，<strong>不可</strong>控制的事情太多了，但是您<strong>可以</strong>控制自己的准备方式。</p><p>在这里有很多值得一试的东西，所以不要指望能够一次学习所有东西。也许有一天您会选择一个主题来关注。也许您将连续一个星期专注于另一个主题。不过，通常来说，您应该每天习惯性地进行两到三项活动，轮流讨论不同的主题，以使您的思想保持新鲜和投入。这些类别按重要性顺序列出：</p><ol><li>Linux基础</li><li>数据结构与算法</li><li>系统设计</li><li>解析</li><li>DevOps工具</li></ol><p>首先，要建立广泛而浅薄的知识基础，这样一来，以循环方式首先在各个主题之间实现负载平衡是一件好事。这将扩大您的DevOps空间的概念框架，以便您可以更轻松地将新信息放入上下文中。每个类别中的活动也按重要性顺序或多或少地排名。某些活动适合日常实践，例如CodeSignal问题或OverTheWire挑战。其他人则适合深入学习。</p><p>如果您想快点走，那就一个人走。但是，如果您想走得更远，那就一起走吧。与您的同龄人一起创建一个学习小组。互相追究责任。每周或每天签到和信息共享会话。在这段时间里，您会感到无动力，请记住，做某事总比什么都不做好。在您动力十足的那段时间里，请记住，睡眠和运动对您的成功至为重要。这些活动是人生下一阶段的垫脚石，但请记住让自己着迷于每块石头的形状。</p><h2 id="Linux基础"><a href="#Linux基础" class="headerlink" title="Linux基础"></a>Linux基础</h2><p>作为一名DevOps工程师，你应该对Linux了如指掌。从内核到网络再到命令行命令，有关Linux的任何问题都是公平的游戏。</p><h3 id="示例问题"><a href="#示例问题" class="headerlink" title="示例问题"></a>示例问题</h3><ul><li>Linux计算机加电时发生的步骤顺序是什么？</li><li>当您在浏览器中键入google.com并导致网页返回给您时，会发生什么情况？如果没有出现网页怎么办？如何调试问题？</li><li>您如何检查文件系统是否空间不足？如何打印最大文件列表？如何删除所有大于1 GB的.mov文件？</li></ul><h3 id="活动"><a href="#活动" class="headerlink" title="活动"></a>活动</h3><ul><li>通读<a href="http://solutionsproj.net/software/The_Linux_Command_Linex.pdf"><em>Linux命令</em></a>行书</li><li>通过<a href="https://overthewire.org/wargames/">OverTheWire</a>战争游戏进行工作。这些是通过精心设计的Linux系统进行的有趣的寻宝游戏，旨在教您一些基本概念。至少通过强盗等级。如果遇到困难，请不要担心Google解决方案。我强烈建议您随时随地在GitHub中记录进度。</li><li>只需使用vimtutor命令来学习vim。它是有史以来最好的编辑器，请勿让任何人说服您。</li><li>考虑购买课程以获取Linux基础知识认证（Linux +，RedHat等）。的确，一磅的认证比一盎司的经验没有价值，但是，如果您经验不足，那么认证可以帮助填补您的知识空白，并证明您具有基本的了解。</li></ul><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li>最好参考手册Linux命令是<a href="https://tldr.sh/">tldr.sh</a>。我强烈建议您下载tl; dr移动应用程序以快速参考。这在电话采访中帮助了我，我当时根本不知道该怎么做。</li><li><a href="https://devhints.io/">devhints.io</a>是各种备忘单的重要来源。</li><li>它看上去并不浮华，但是<a href="https://www.tldp.org/LDP/abs/html/">Advanced Bash脚本指南</a>是个巨大的财产库。</li></ul><h2 id="数据结构与算法"><a href="#数据结构与算法" class="headerlink" title="数据结构与算法"></a>数据结构与算法</h2><p>请记住，DevOps是<strong>开发</strong> +运营，因此您应该知道如何编码。选择一种您选择的语言（不是Bash-如果您不太喜欢，我建议使用Python）并练习，练习，练习。这不仅仅是寻找最佳解决方案-您必须与面试官清楚地交流问题的参数，传达您的思考过程，并计算不同算法的时间和空间复杂度。</p><h3 id="示例问题-1"><a href="#示例问题-1" class="headerlink" title="示例问题"></a>示例问题</h3><ul><li>从列表中删除所有重复项。</li><li>在包含除一个以外的所有可能IP的文件中找到丢失的IP。</li><li>对二叉树的所有节点进行排序。</li></ul><h3 id="活动-1"><a href="#活动-1" class="headerlink" title="活动"></a>活动</h3><ul><li><a href="https://www.khanacademy.org/computing/computer-science/algorithms">可汗学院</a>有一个非常好的数据结构和算法入门。它使用Javascript，但不要反对它。该课程是与汤姆·科门（Tom Cormen）合作完成的，汤姆·科门（Tom Cormen）是<a href="https://en.wikipedia.org/wiki/Introduction_to_Algorithms">一本有关数据结构和算法</a>的权威<a href="https://en.wikipedia.org/wiki/Introduction_to_Algorithms">著作</a>，绝对值得拥有。</li><li><a href="https://leetcode.com/">LeetCode</a>拥有大量的问题库，这些问题库与真实的面试问题非常接近。实际上，许多公司都会直接问您LeetCode问题！每种算法至少要回答10个简单和中等问题。当您解决了100个问题后，您就可以开始感到准备好了，并且实际上可以解决这些问题而无需查找任何内容。</li><li>每天在<a href="https://codesignal.com/developers/interview-practice/">CodeSignal</a>上<a href="https://codesignal.com/developers/interview-practice/">完成</a>面试准备材料。我建议使用Python，但您可以使用任何语言。将代码复制并粘贴到文件中，并使用Gi​​tHub对其进行版本控制。每天，仔细阅读您昨天做的代码，并详细记录下来。编写代码比阅读旧代码并记住发生的事情要容易。一两天后重新访问旧代码将迫使您综合所学的概念。</li><li>通过CodeSignal的Python Arcade进行工作。这是对所有重要的标准Python库的很好的浏览。有些练习确实没有达到目标，但总体而言，这是一个不错的播放列表。</li><li>研究动态规划，有向无环图，拓扑排序。</li><li>每个人都需要一点SQL。无需花费大量时间，但是您应该在<a href="https://mode.com/">Mode Analytics</a>上注册一个免费帐户，并利用其使用真实公共数据库的出色互动SQL教程。</li><li>随着您对编码技能的适应程度提高，请使用<a href="https://www.pramp.com/">Pramp</a>进行现场技术面试。这是重要的组成部分。像练习技术电话屏幕一样，您没有比技术电话屏幕更充分的准备。</li><li>请记住，唯一有价值的知识是您可以在白板或实时编码上在面试官面前展示的内容。如果您倾向于在高压情况下停滞不前，那么您就远非唯一的人了-请确保与同伴一起做很多练习。</li></ul><h3 id="参考-1"><a href="#参考-1" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="https://learnxinyminutes.com/docs/python3/">LearnXinYminutes</a>是一个很棒的示例驱动的Python备忘单</li><li><a href="https://gto76.github.io/python-cheatsheet/#main">Python</a>备忘<a href="https://gto76.github.io/python-cheatsheet/#main">单</a>：最好的Python备忘单，尽管它很简洁</li><li><a href="https://docs.python-guide.org/">Hitchhiker的Python指南</a>：最佳的Python文档。</li><li>我的<a href="https://github.com/chuckinator0/Projects/tree/master/scripts">脚本GitHub存储库中</a>有很多示例文件，这些文件经过了详细记录，尽管实际上是无组织的！</li></ul><h2 id="系统设计"><a href="#系统设计" class="headerlink" title="系统设计"></a>系统设计</h2><p>系统设计面试可测试您的整体思维，架构复杂基础架构的能力以及沟通技巧。确保采用自上而下的设计方法，并具有清晰的基础结构图和DevOps注意事项。</p><h3 id="示例问题-2"><a href="#示例问题-2" class="headerlink" title="示例问题"></a>示例问题</h3><ul><li>设计一个基于微博消息的社交网络，如Twitter。您将如何确保不同地区的高可用性？</li></ul><h3 id="活动-2"><a href="#活动-2" class="headerlink" title="活动"></a>活动</h3><ul><li>消除<a href="https://github.com/donnemartin/system-design-primer/blob/master/README.md">系统设计入门知识</a>。一个有趣的事情是选择一个主题，然后请朋友选择另一个主题，然后花2个小时研究您的主题，然后再花一两个小时进行分享。轮流扮演面试官和受访者的角色。</li><li>阅读<a href="https://landing.google.com/sre/sre-book/toc/index.html">Google SRE图书</a>。这是现代DevOps必读的书。</li></ul><h2 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h2><p>系统管理员经常分析系统输出和日志，以获得系统见解和调试问题。使用grep，awk和sed之类的工具进行命令行解析是DevOps工具库的一项重要技能。</p><h3 id="示例问题-3"><a href="#示例问题-3" class="headerlink" title="示例问题"></a>示例问题</h3><ul><li>给定一个Apache Web服务器日志，每天有多少个请求？哪些IP是最常访问的访客？最需要哪些页面和图像？</li></ul><h3 id="活动-3"><a href="#活动-3" class="headerlink" title="活动"></a>活动</h3><ul><li>通过Insight的<a href="https://github.com/InsightDataScience/Parsing-Workshop">解析研讨会资料</a>中的<strong>练习进行练习</strong>。专注于awk。本章材料不错，是练习是最重要的部分。<a href="https://github.com/InsightDataScience/Parsing-Workshop"></a></li></ul><h3 id="参考-2"><a href="#参考-2" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="https://learnxinyminutes.com/docs/awk/">LearnXinYminutes</a>：另一个出色的示例驱动参考-这次是awk。</li><li><a href="https://regexr.com/">Regexr</a>：最佳正则表达式参考。</li></ul><h2 id="DevOps工具"><a href="#DevOps工具" class="headerlink" title="DevOps工具"></a>DevOps工具</h2><p>Docker，Terraform和Kubernetes是必不可少的DevOps工具，并且彻底学习它们不会出错。您还应该知道至少一种CI/CD工具，例如Jenkins。强烈建议您至少在三大云之一上学习这些工具：AWS，GCP或Azure。</p><h3 id="示例问题："><a href="#示例问题：" class="headerlink" title="示例问题："></a>示例问题：</h3><ul><li>使用Terraform将Docker应用程序部署到新的AWS EC2实例上。</li></ul><h3 id="活动-4"><a href="#活动-4" class="headerlink" title="活动"></a>活动</h3><ul><li>您需要学习Kubernetes。为了学习Kubernetes，您需要了解容器化和Docker。</li><li>通过<a href="https://github.com/docker/labs/blob/master/beginner/readme.md">Docker初学者</a>实验</li><li>通过<a href="https://training.play-with-docker.com/">Docker课堂</a>进行<a href="https://training.play-with-docker.com/">游戏</a></li><li>Kubernetes（概念：容器编排）</li><li>阅读<a href="https://kubernetes.io/docs/concepts/overview/what-is-kubernetes/">Kubernetes概念</a></li><li>通过<a href="https://kubernetes.io/docs/tutorials/kubernetes-basics/">Kubernetes基础</a>教程学习</li><li>若要进行更深入的潜水，请完成<a href="https://www.katacoda.com/courses/kubernetes">Katacoda课程</a></li><li>通过一两个入门性的<a href="https://jenkins.io/doc/tutorials/build-a-python-app-with-pyinstaller/">Jenkins教程</a>来学习有关CI / CD的更多信息（概念：部署管道作为代码）。老实说，我对Jenkins知之甚少，所以我不了解更好的资源。</li><li>使用<a href="https://www.vagrantup.com/intro/getting-started/index.html">Vagrant</a>声明性地定义VM，然后使用<a href="https://www.virtualbox.org/">VirtualBox</a>或<a href="https://www.packer.io/intro/getting-started/install.html">Packer</a>将该VM导出为OVA文件（概念：不可变的基础结构，配置为代码）。</li><li>Terraform（概念：基础架构作为代码）</li><li>阅读Terragrunt的<a href="https://blog.gruntwork.io/a-comprehensive-guide-to-terraform-b3d32832baca">Terraform综合指南</a></li><li>通过<a href="https://learn.hashicorp.com/terraform/">Terraform教程进行工作</a></li><li>Ansible（概念：配置为代码）</li><li>观看<a href="https://www.ansible.com/resources/videos/quick-start-video">介绍视频</a></li><li>对于一些动手实验，我认为Linux Academy可能是最好的选择（不是免费的）</li><li>进行<a href="https://docs.honeycomb.io/learning-about-observability/quick-start/">Honeycomb Quickstart，</a>以提供一种监视/跟踪工具（概念：全栈跟踪）</li><li>完成<a href="https://learn.hashicorp.com/consul/">Consul教程</a>（概念：服务发现）。</li><li>完成<a href="https://learn.hashicorp.com/vault/">Vault教程</a>（概念：企业级机密管理）</li><li>玩<a href="https://linkerd.io/2/getting-started/">Linkerd</a>（概念：服务网格）</li><li>Apache Kafka（概念：容错，高吞吐量事件流）</li><li>适用于Apache Kafka的无耻插件—  在该网站上免费找到<a href="https://cloud.contentraven.com/confluent/self-userpackage">Confluent培训</a>课程，以获取有关Kafka基础知识的不错的视频集</li><li>查看<a href="https://github.com/confluentinc/training-operations-src">操作培训仓库，</a>以建立自己的本地docker-组成Kafka集群，并开始使用Kafka</li></ul><h3 id="参考-3"><a href="#参考-3" class="headerlink" title="参考"></a>参考</h3><ul><li>Ansible：<a href="https://docs.ansible.com/ansible/latest/user_guide/index.html">用户指南</a>。</li><li>想在Kubernetes中做一些特定的事情吗？检查文档的“ <a href="https://kubernetes.io/docs/tasks/">任务”</a>部分。有许多特定于任务的指南。</li><li>Docker的“demo”(<a href="https://docs.docker.com/samples/)%E9%A1%B5%E9%9D%A2%E6%8F%90%E4%BE%9B%E4%BA%86%E5%AE%8C%E6%95%B4%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E7%9A%84%E8%89%AF%E5%A5%BD%E7%A4%BA%E4%BE%8B%E4%BB%A5%E5%8F%8A%E4%B8%80%E4%BA%9B%E5%AE%9E%E7%94%A8%E7%9A%84%E6%95%99%E7%A8%8B%E3%80%82%E6%88%91%E5%96%9C%E6%AC%A2[Django">https://docs.docker.com/samples/)页面提供了完整应用程序的良好示例以及一些实用的教程。我喜欢[Django</a> + Postgres](<a href="https://docs.docker.com/compose/django/)%E7%A4%BA%E4%BE%8B%E3%80%82">https://docs.docker.com/compose/django/)示例。</a></li></ul><h2 id="其他具有高价值物品"><a href="#其他具有高价值物品" class="headerlink" title="其他具有高价值物品"></a>其他具有高价值物品</h2><h3 id="活动-5"><a href="#活动-5" class="headerlink" title="活动"></a>活动</h3><ul><li>定期收听《软件工程日报》(<a href="https://softwareengineeringdaily.com/)%E6%92%AD%E5%AE%A2%E3%80%82%E5%88%B0%E7%9B%AE%E5%89%8D%E4%B8%BA%E6%AD%A2%EF%BC%8C%E8%BF%99%E6%98%AF%E4%BF%9D%E6%8C%81DevOps%E4%B8%96%E7%95%8C%E8%84%89%E6%90%8F%E7%9A%84%E6%9C%80%E4%BD%B3%E6%96%B9%E6%B3%95%E3%80%82%E5%BB%BA%E8%AE%AE%E6%82%A8%E5%AE%89%E8%A3%85%E8%AF%A5%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%EF%BC%8C%E4%BB%A5%E4%BE%BF%E6%82%A8%E5%8F%AF%E4%BB%A5%E8%BD%BB%E6%9D%BE%E6%90%9C%E7%B4%A2%E6%97%A7%E5%89%A7%E9%9B%86%EF%BC%8C%E4%BB%A5%E6%B7%B1%E5%85%A5%E4%BA%86%E8%A7%A3%E6%AD%A3%E5%9C%A8%E7%A0%94%E7%A9%B6%E7%9A%84%E6%8A%80%E6%9C%AF%E5%92%8C%E6%A6%82%E5%BF%B5%E3%80%82%E5%9C%A8%E2%80%9C">https://softwareengineeringdaily.com/)播客。到目前为止，这是保持DevOps世界脉搏的最佳方法。建议您安装该应用程序，以便您可以轻松搜索旧剧集，以深入了解正在研究的技术和概念。在“</a> DevOps工具”部分中，我为每个工具背后的概念提供了关键字。您可以使用这些关键字在SEdaily中搜索相关的播客。</li><li>阅读有关看板(<a href="https://www.atlassian.com/agile/kanban/boards)%E7%9A%84%E7%9F%A5%E8%AF%86%EF%BC%8C%E5%B9%B6%E4%BD%BF%E7%94%A8%E5%AE%83%E4%BB%AC%E6%9D%A5%E5%A2%9E%E5%BC%BA%E6%82%A8%E7%9A%84%E6%B3%A8%E6%84%8F%E5%8A%9B%E5%92%8C%E7%94%9F%E4%BA%A7%E5%8A%9B%E3%80%82GitHub%E6%9C%89%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E7%9C%8B%E6%9D%BF%EF%BC%8C%E6%82%A8%E5%8F%AF%E4%BB%A5%E4%BD%BF%E7%94%A8%E5%AE%83%E6%9D%A5%E4%BF%9D%E6%8C%81%E7%94%9F%E4%BA%A7%E5%8A%9B%E3%80%82%E6%88%91%E4%B8%AA%E4%BA%BA%E4%B9%9F%E5%96%9C%E6%AC%A2[%E5%AD%90%E5%BC%B9%E5%BC%8F%E6%97%A5%E8%AE%B0](https://www.youtube.com/watch?v=fm15cmYU0IM)%E5%92%8C%5BPomodoro%E6%96%B9%E6%B3%95%5D(https://en.wikipedia.org/wiki/Pomodoro_Technique)%E3%80%82">https://www.atlassian.com/agile/kanban/boards)的知识，并使用它们来增强您的注意力和生产力。GitHub有一个简单的看板，您可以使用它来保持生产力。我个人也喜欢[子弹式日记](https://www.youtube.com/watch?v=fm15cmYU0IM)和[Pomodoro方法](https://en.wikipedia.org/wiki/Pomodoro_Technique)。</a></li><li>深入了解一些您喜欢的工具的技术细节。从文档开始。配对并分享技术深层次的收获。</li><li>考虑为Linux Academy或acloudguru课程付费以获得AWS，GCP或Azure认证。</li></ul><h3 id="参考-4"><a href="#参考-4" class="headerlink" title="参考"></a>参考</h3><ul><li>Digital Ocean有很棒的教程。当我使用Google时，我倾向于首先尝试“ <research topic=""> site：digitalocean.com”。当您第一次学习手动安装某些东西时，这特别有用。</research></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="DevOps" scheme="https://xiaochong2018.gitee.io/tags/DevOps/"/>
    
    <category term="linux" scheme="https://xiaochong2018.gitee.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>nginx Rewrite简单示例</title>
    <link href="https://xiaochong2018.gitee.io/2019/09/23/nginxrewrite-jian-dan-shi-li/"/>
    <id>https://xiaochong2018.gitee.io/2019/09/23/nginxrewrite-jian-dan-shi-li/</id>
    <published>2019-09-23T07:25:46.000Z</published>
    <updated>2019-09-23T07:25:46.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">worker_processes  1;</span><br><span class="line">events {</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">}</span><br><span class="line">http {</span><br><span class="line">       server {</span><br><span class="line">            location /google {</span><br><span class="line">                      rewrite (.*) http://www.google.com;</span><br><span class="line">        }</span><br><span class="line">           location /baidu {</span><br><span class="line">                      rewrite (.*) http://www.baidu.com;</span><br><span class="line">        }</span><br><span class="line">        error_page   500 502 503 504  /50x.html;</span><br><span class="line">        location = /50x.html {</span><br><span class="line">            root   html;</span><br><span class="line">       }</span><br><span class="line">   }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>　　按照前面讲的内容以及上面的代码，修改我们自己的配置文件，保存，重新加载nginx，然后点击【访问测试】，在地址栏给出的地址后面分别输入“*/google<em>”、“</em>/baidu*”，是不是会和我的结果一样呢？</p><p>输入“/google”转到谷歌，输入“/baidu”是不是转到百度了呢？</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="nginx" scheme="https://xiaochong2018.gitee.io/categories/nginx/"/>
    
    
    <category term="nginx" scheme="https://xiaochong2018.gitee.io/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>nginx 负载均衡示例</title>
    <link href="https://xiaochong2018.gitee.io/2019/09/23/nginx-fu-zai-jun-heng-shi-li/"/>
    <id>https://xiaochong2018.gitee.io/2019/09/23/nginx-fu-zai-jun-heng-shi-li/</id>
    <published>2019-09-23T07:21:08.000Z</published>
    <updated>2019-09-23T07:30:03.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">upstream backend{</span><br><span class="line">      #定义负载均衡设备的Ip及设备状态</span><br><span class="line">      server 127.0.0.1:9090 down;</span><br><span class="line">      server 192.168.1.12:8080 weight=2 ;</span><br><span class="line">      server 192.168.1.13:6060 max_fails=3 fail_timeout=30s;</span><br><span class="line">      server 192.168.1.14:7070 backup;</span><br><span class="line">}</span><br><span class="line">server{</span><br><span class="line">    #…………………………</span><br><span class="line">   location /{</span><br><span class="line">        proxy_pass http://backend;</span><br><span class="line">        #…………………………</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>以上代码就是对负载均衡应用的示例。</p><p><em>Upstream</em>可对后端服务器进行健康检查。</p><p>a) <em>down</em>表示当前的server暂时不参与负载。</p><p>b) <em>weight</em>默认为1.weight越大，负载的权重就越大。</p><p>c) _max<em>fails</em> ：在fail_timeout时间内对后台服务器请求失败的次数。</p><p>d) _fail<em>timeout</em>:max_fails次失败后，暂停的时间。</p><p>e) <em>backup</em>： 其它所有的非backup机器down或者忙的时候，请求backup机器。所以这台机器压力会最轻。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="nginx" scheme="https://xiaochong2018.gitee.io/categories/nginx/"/>
    
    
    <category term="nginx" scheme="https://xiaochong2018.gitee.io/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>nginx 正向代理示例</title>
    <link href="https://xiaochong2018.gitee.io/2019/09/23/nginx-zheng-xiang-dai-li-shi-li/"/>
    <id>https://xiaochong2018.gitee.io/2019/09/23/nginx-zheng-xiang-dai-li-shi-li/</id>
    <published>2019-09-23T07:19:43.000Z</published>
    <updated>2019-09-23T07:30:27.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><p>nginx正向代理配置如下：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">server</span><br><span class="line">{</span><br><span class="line">  listen       8080;</span><br><span class="line">  server_name www.baidu.com;</span><br><span class="line">  index index.html index.htm index.php;</span><br><span class="line">  root  /home/wwwroot;</span><br><span class="line">     location / {</span><br><span class="line">         resolver        192.168.8.88;</span><br><span class="line">         proxy_pass      $scheme://$http_host$request_uri;</span><br><span class="line">         proxy_buffers   256 4k;</span><br><span class="line"> }</span><br><span class="line">   access_log off;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>　　以上配置的注意事项：</p><p>1，不能有hostname。</p><p>2，必须有resolver, 即dns，即上面的x.x.x.x，换成当前机器的DNS服务器ip即可(查看dns方法 cat /etc/resolv.conf 代理使用)。</p><p>3，$http_host和$request_uri是nginx系统变量，保持原样即可。</p><p>　　检测配置文件无误后，重启nginx，在浏览器中添加代理服务器的IP地址，就可以使用该Nginx正向代理了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="nginx" scheme="https://xiaochong2018.gitee.io/categories/nginx/"/>
    
    
    <category term="nginx" scheme="https://xiaochong2018.gitee.io/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>nginx 虚拟主机示例</title>
    <link href="https://xiaochong2018.gitee.io/2019/09/23/nginx-xu-ni-zhu-ji-shi-li/"/>
    <id>https://xiaochong2018.gitee.io/2019/09/23/nginx-xu-ni-zhu-ji-shi-li/</id>
    <published>2019-09-23T07:18:14.000Z</published>
    <updated>2019-09-23T07:18:14.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><p>　　Nginx做虚拟主机，尤其是仅仅支持纯静态-html，这是最简单的应用了，可以理解为一个仅支持静态页面的最简单的Web服务器。</p><p>　　例子，同时支持两个虚拟主机（纯静态-html支持）的配置，我们只需要理改server段，如下：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">server {</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  www.baidu.com;</span><br><span class="line">        #charset koi8-r;</span><br><span class="line">        #access_log  logs/host.access.log  main;</span><br><span class="line">        location / {</span><br><span class="line">                      root   /root; </span><br><span class="line">                      index index.php index.html index.htm;  </span><br><span class="line"></span><br><span class="line">        }</span><br><span class="line">        error_page   500 502 503 504  /50x.html;</span><br><span class="line">        location = /50x.html {</span><br><span class="line">            root   html;</span><br><span class="line">        }</span><br><span class="line">      }</span><br><span class="line">server {</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  www.baidu.com;</span><br><span class="line">        #charset koi8-r;</span><br><span class="line">        #access_log  logs/host.access.log  main;</span><br><span class="line">        location / {</span><br><span class="line">                      root   /root;     </span><br><span class="line">                      index index.php index.html index.htm; </span><br><span class="line"></span><br><span class="line">        }</span><br><span class="line">        error_page   500 502 503 504  /50x.html;</span><br><span class="line">        location = /50x.html {</span><br><span class="line">            root   html;</span><br><span class="line">        }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="nginx" scheme="https://xiaochong2018.gitee.io/categories/nginx/"/>
    
    
    <category term="nginx" scheme="https://xiaochong2018.gitee.io/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>nginx 反向代理示例</title>
    <link href="https://xiaochong2018.gitee.io/2019/09/23/nginx-fan-xiang-dai-li-shi-li/"/>
    <id>https://xiaochong2018.gitee.io/2019/09/23/nginx-fan-xiang-dai-li-shi-li/</id>
    <published>2019-09-23T07:16:04.000Z</published>
    <updated>2019-09-23T07:16:04.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><p>　　<em>反向代理（Reverse Proxy）</em>是指代理服务器来接收来自Internet上的连接请求，并将请求转发给内部网络上的服务器，并从服务器上得到的结果返回给Internet上请求连接的客户端。</p><p>　　比如要配置后端跑 apache 服务的 ip 和端口，也就是说，我们的目标是实现通过 <a href="http://ip:port/">http://ip:port</a> 能访问到你的网站。配置文件可以修改以下内容，reload nginx就可以了。</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">## Basic reverse proxy server ##</span><br><span class="line">    upstream apachephp  {</span><br><span class="line">        server ip:8080; #Apache</span><br><span class="line">    }</span><br><span class="line">    ## Start www.nowamagic.net ##</span><br><span class="line">    server {</span><br><span class="line">        listen 80;</span><br><span class="line">        server_name  www.nowamagic.net;</span><br><span class="line">        access_log  logs/quancha.access.log  main;</span><br><span class="line">        error_log  logs/quancha.error.log;</span><br><span class="line">        root   html;</span><br><span class="line">        index  index.html index.htm index.php;</span><br><span class="line"></span><br><span class="line">        ## send request back to apache ##</span><br><span class="line">        location / {</span><br><span class="line">            proxy_pass  http://apachephp;</span><br><span class="line">                #……………………</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="nginx" scheme="https://xiaochong2018.gitee.io/categories/nginx/"/>
    
    
    <category term="nginx" scheme="https://xiaochong2018.gitee.io/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>写自己的nginx配置文件</title>
    <link href="https://xiaochong2018.gitee.io/2019/09/23/xie-zi-ji-de-nginx-pei-zhi-wen-jian/"/>
    <id>https://xiaochong2018.gitee.io/2019/09/23/xie-zi-ji-de-nginx-pei-zhi-wen-jian/</id>
    <published>2019-09-23T07:11:40.000Z</published>
    <updated>2019-09-23T07:11:40.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>前面几节中我们已经学过了nginx配置文件中的各个段的配置指令，下面我们就来写一个自己配置文件。如下代码：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">worker_processes  1;</span><br><span class="line">events {</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">}</span><br><span class="line">http {</span><br><span class="line">       server {</span><br><span class="line">            location / {</span><br><span class="line">                      #root   html;      #定义服务器的默认网站根目录位置</span><br><span class="line">                      #index index.php index.html index.htm;   #定义首页索引文件的名称</span><br><span class="line">                      proxy_pass http://www.baidu.com;</span><br><span class="line">             }</span><br><span class="line">            error_page   500 502 503 504  /50x.html;</span><br><span class="line">            location = /50x.html {</span><br><span class="line">                root   html;</span><br><span class="line">           }</span><br><span class="line">         }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>　　这样我们自己的配置文件就完成了，先将nginx的服务停止，然后我们用<em>nginx -c <em>.conf</em>命令来重新启动nginx，</em>.conf 为我们自己的配置文件所在的路径，nginx启动以后，然后点击【访问测试】，看看会出现什么情况，是不是已经转到我们所配置的站点了。</p><p>　　在右面的编辑页面中编辑一个配置文件，我自己的配置文件名为Mynginx.conf,其中的内容就是以上面代码的内容，保存在/etc/nginx目录下，完成以后我们做如下操作：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nginx -s stop   </span><br><span class="line">nginx -c /etc/nginx/Mynginx.conf</span><br></pre></td></tr></tbody></table></figure><p>然后点击【访问测试】</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="nginx" scheme="https://xiaochong2018.gitee.io/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>nginx rewrite规则</title>
    <link href="https://xiaochong2018.gitee.io/2019/09/23/nginxrewrite-gui-ze/"/>
    <id>https://xiaochong2018.gitee.io/2019/09/23/nginxrewrite-gui-ze/</id>
    <published>2019-09-23T07:09:37.000Z</published>
    <updated>2019-09-23T07:09:37.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><p>　　Nginx Rewrite 规则相关指令有if,rewrite,set,return,break等，其中最关键的就是rewrite。一个简单的Nginx Rewrite规则语法如下：</p><p><code>rewrite ^/b/(.\*)\.html /play.php?video=$1 break;</code></p><p><strong>正则表达式匹配，</strong>其中：</p><ol><li>~ 为区分大小写匹配；  </li><li>~* 为不区分大小写匹配；  </li><li>!<del>和!</del>*分别为区分大小写不匹配及不区分大小写不匹配。</li></ol><p><strong>文件及目录匹配，</strong>其中：</p><ol><li>-f和!-f用来判断是否存在文件；  </li><li>-d和!-d用来判断是否存在目录；  </li><li>-e和!-e用来判断是否存在文件或目录；  </li><li>-x和!-x用来判断文件是否可执行。  </li></ol><p><strong>flag标记有：</strong></p><ol><li>last 相当于Apache里的[L]标记，表示完成rewrite；</li><li>break 终止匹配, 不再匹配后面的规则；</li><li>redirect 返回302临时重定向 地址栏会显示跳转后的地址；</li><li>permanent 返回301永久重定向 地址栏会显示跳转后的地址。</li></ol><p>当然除了这些以外，Rewrite规则中还会用到一些相应的全局变量，如$args，$url等等</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="nginx" scheme="https://xiaochong2018.gitee.io/categories/nginx/"/>
    
    
    <category term="nginx" scheme="https://xiaochong2018.gitee.io/tags/nginx/"/>
    
  </entry>
  
</feed>
