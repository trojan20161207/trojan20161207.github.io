<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>罗翔语录</title>
      <link href="/2021/10/21/luo-xiang-yu-lu/"/>
      <url>/2021/10/21/luo-xiang-yu-lu/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>我们很多时候是不是觉得我们抓的牌实在是太差了呀</p><p>但是再差的牌你都应该打下去</p><p>我们登上并非我们所选择的舞台</p><p>在坐的有谁的剧本是你自己设定的</p><p>其实不是的 </p><p>我们决定不了我们的出身</p><p>我们决定不了我们的智商</p><p>我们更决定不了我们这一生的贵人相助</p><p>很多时候我们经常会羡慕别人的剧本</p><p>我有的时候也非常羡慕别人的剧本</p><p>但是没有谁的剧本值得羡慕</p><p>你只能把你自己的剧本给演好</p><p>如果在你的一生中真的遭遇到这些挫折</p><p>那对不起 这就是你的剧本</p><p>你有两种选择</p><p>一种选择是弃演</p><p>一种选择是把既定的剧本给选好 给演好</p><p>所以希望大家能够演好自己的剧本</p><p>摘自–罗翔</p>]]></content>
      
      
      <categories>
          
          <category> 摘抄 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 摘抄 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS7.6进入单用户模式</title>
      <link href="/2020/12/01/centos7.6-jin-ru-dan-yong-hu-mo-shi/"/>
      <url>/2020/12/01/centos7.6-jin-ru-dan-yong-hu-mo-shi/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>-</p><p>CentOS7.6进入单用户模式</p><p>1、在启动grub菜单，选择编辑启动选项<br>2、按键盘e键，来进入编辑界面<br>3、找到Linux 16那行，将ro改为rw init=/sysroot/bin/sh<br>如果用的是kvm做了console连接授权，还要把授权的console=ttyS0去掉<br>4、按下 Control+x ，使用单用户模式启动<br>5、使用下面的命令访问系统<br>chroot /sysroot<br>6、重置密码<br>passwd root<br>7、更新系统信息（如果打开了selinux需要做这一步）<br>touch /.autorelabel<br>8、退出chroot<br>exit<br>9、重启系统<br>reboot</p>]]></content>
      
      
      
        <tags>
            
            <tag> centos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>centos7的启动过程</title>
      <link href="/2020/11/01/centos7-de-qi-dong-guo-cheng/"/>
      <url>/2020/11/01/centos7-de-qi-dong-guo-cheng/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>centos7的启动过程</p><p>一、终端态启动顺序：</p><p>开机启过程<br>POST–&gt;BOOT<br>SEQUENCE–&gt;BOOTLOADER–&gt;KERNEL+INITRAMFS(INITRD)–&gt;ROOTFS–&gt;/sbin/init</p><p>POST:加电自检</p><p>检查内存，CPU等</p><p>Boot sequence：选择引导顺序</p><p>光盘启动，硬盘启动，网络启动，还是U盘启动(同windows)</p><p>Bootloader：引导加载器</p><p>MBR引导记录大小为512字节，其中前446个字节就是Bootloader,主要用来引导用户选择要启动的系统或不同的内核版本，把用户选定的内核装载到RAM中的特定空间中，解压，展开，而后把系统控制权移交给内核。</p><p>grub2分两部分：<br>1.在MBR引导记录中，大小为446字节，主要功能是引导启动介质的grub主体文件<br>2.partition,/boot/grub[2],此为grub的主体。</p><p>KERNEL+INITRAMFS(INITRD)–&gt;ROOTFS：加载内核</p><p>内核初始化，生成一个ramdisk文件，用来模拟系统环境。退出ramdisk,下一步加载到真正的根文件系统。</p><p>ramdisk：内存上临时虚拟的系统<br>ramdisk(虚拟磁盘，双缓冲，双缓存）—-&gt; ramfs（虚拟文件系统）<br>centos5:initrd</p><p>工具程序：mkinitrd</p><p>centos6,7:initramfs</p><p>工具程序：dracut,mkinitrd</p><p>/sbin/init：运行用户空间的第一个应用程序</p><p>init:</p><p>Centos 5: SysV init    配置文件：/etc/inittab<br>Centos 6: Upstart      配置文件：/etc/inittab;/etc/init/*.conf(主要）<br>Centos 7: systemd      配置文件：/etc/systemd/system;/usr/lib/systemd/system</p><p>至此，内核空间就已经启动完毕，内核启动完成接着开始启动用户态启动过程。<br>systemd是个守护进程，pid号为1,<br>后面所有启动的服务或进程都是systemd的子进程及子进程的子进程。</p><p>二、用户态的启动顺序</p><p>设置默认允许级别—&gt;初始化脚本，<br>完成系统初始化—&gt;关闭及启动对应级别下的服务—–&gt;设置登录终端—–&gt;[启动图形终端]</p><p>参考：<a href="https://blog.51cto.com/m51cto/1958856">https://blog.51cto.com/m51cto/1958856</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> centos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>改进CI管道中自动化性能测试的10条技巧（第1部分）</title>
      <link href="/2019/11/01/gai-jin-ci-guan-dao-zhong-zi-dong-hua-xing-neng-ce-shi-de-10-tiao-ji-qiao-di-1-bu-fen/"/>
      <url>/2019/11/01/gai-jin-ci-guan-dao-zhong-zi-dong-hua-xing-neng-ce-shi-de-10-tiao-ji-qiao-di-1-bu-fen/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="看一看如何通过连续测试和SLA改善CI管道的性能。"><a href="#看一看如何通过连续测试和SLA改善CI管道的性能。" class="headerlink" title="看一看如何通过连续测试和SLA改善CI管道的性能。"></a>看一看如何通过连续测试和SLA改善CI管道的性能。</h3><p><img src="https://dzone.com/storage/temp/12642760-10.jpg" alt="图片标题"></p><p><em>这是创建更好的CI管道的方法的1和2。</em></p><p>在持续集成管道中正确进行测试是Web规模软件开发的关键部分。对于许多公司而言，这是一个挑战，尤其是在自动化性能测试方面。这不是因为缺乏努力。许多公司似乎无法实现其努力的全部价值。原因很多。一些测试工作只是在重新发明轮子。其他人则只是出于执行目的而无明显意图地随机进行。确保测试既适当又旨在满足业务需求是事后才想到的。</p><p>不必一定是以这种方式。</p><p>任何公司都可以在自动化CI管道中进行有用，高效的性能测试。所需要的只是那些有知识的人的一些有用的知识。为了扩大“了解者”的圈子，我们创建了十个技巧列表，以改善CI Pipelines中的性能测试。</p><p>1.根据产品的长期目标进行连续测试</p><p>2.区分SLA，SLO和SLI</p><p>3.保持测试规模小且目标明确</p><p>4.在整体之前测试段</p><p>5.自动化不易碎的东西</p><p>6.节省时间，使用烟雾测试</p><p>7.利用您的源代码管理管理系统</p><p>8.没有反馈循环的期望不是</p><p>9.已知的基础架构是可测试的基础架构</p><p>10.使用您的CI / CD管道，而不是反对</p><p>今天的帖子将重点介绍前两个技巧，而其余建议将在单独的文章中介绍。</p><h2 id="1-根据产品的长期目标进行连续测试"><a href="#1-根据产品的长期目标进行连续测试" class="headerlink" title="1.根据产品的长期目标进行连续测试"></a><strong>1.根据产品的长期目标进行连续测试</strong></h2><p>如果你想快速识别什么可怕的事情是否在进行与贵公司的测试流程，请考虑以下情形。现在该发布产品了。开发团队中的每个人都以焦虑不安的状态坐在会议室的桌子旁，等待端到端测试完成，以便可以将代码推送发布。无论哪种方式，您都无法自拔。为什么？毕竟，如果测试顺利，代码将继续进行。没关系吧？错误。</p><p>发布的生存能力取决于单个引发焦虑的端到端测试的状态这一事实揭示了整个测试过程的重大缺陷。此类测试所承受的压力不应超过常规血液测试的压力。如果患者有定期体检，健康饮食和定期运动的病史，则血液检查应验证历史上的积极行为。但是，如果患者已经十年没有去看医生，只能依靠薯片和生啤酒的饮食生活，而且只能走到邮箱，那么简单的验血会改变您的生活。谁知道它可能揭示什么？</p><p>类比适用于IT流程。如果公司的总体开发实践是健康的，并且在软件开发生命周期的各个级别进行连续测试，则端到端测试应该只是另一个验证复选框。如果发现问题所在，则无需费力即可解决它。</p><p>当开发实践杂乱无章，而测试被拖到最后时，最后的端到端测试又怎会是一种焦虑的经历呢？谁知道代码中隐藏了多少技术债务，开发人员不再在公司工作留下了多少谜团。测试中有多少只不过是循环使用20％的代码库，而其余部分则保持不变？诸如此类的问题在开发环境中令人惊讶地普遍存在，在该环境中，长期产品目标尚不清楚，而测试事件则是偶然的。</p><p>当创造了所有人都可以充分理解长期产品目标的条件时，开发过程和所产生的代码质量也会提高（前提是在整个生命周期阶段都进行了连续测试）。基于产品的长期目标进行连续测试是明智且实用的，并有助于改善自动化性能测试。</p><h2 id="2-区分SLA，SLO和SLI"><a href="#2-区分SLA，SLO和SLI" class="headerlink" title="2.区分SLA，SLO和SLI"></a><strong>2.区分SLA，SLO和SLI</strong></h2><p>当大多数公司考虑定义软件/软件服务的工作方式时，他们相信服务水平协议。定义明确的SLA是必不可少的。否则，就没有可靠的方法让公司作为服务提供商或消费者运营。从提供商的角度来看，缺少SLA意味着客户可以随时（并期望）要求任何东西。从消费者的角度来看，没有SLA会使技术人员处于等待数小时的危险之中，因为他们的公司的数字基础架构崩溃时，他们一直处于等待与关键任务支持人员联系的状态。</p><p>SLA是必需的，但它们只能捕获部分图片。还需要更多。服务水平目标（SLO）和服务水平指标（SLI）的添加提供了必要的附加信息，以确保提供者和消费者之间的伙伴关系满足所有人的需求。</p><p>SLA描述了提供者和消费者之间的承诺；其复杂性将根据各方的需求而变化。SLA将定义每个服务的职责和服务的可用性。该协议仅取决于其背后目标的定义以及确定服务级别的度量标准。这就是SLO和SLI变得重要的地方。</p><p>如果提前定义了SLO，则建立SLA会容易得多。理解消费者希望从代码/服务中获得什么，将提供必要的见解，以确认所提供的服务符合期望。定义明确的SLO将有助于制定对所有人都有意义的SLA。</p><p>为了使SLA有效地满足SLO中规定的目标，必须定义一套标准的，易于理解的度量标准。否则，公司冒着将苹果与橙子进行比较的风险。因此，SLI的价值。服务水平指示器提供有关如何根据SLA衡量运营绩效的详细信息。SLI越精确，就越好。</p><p>SLO / SLI允许您根据SLA构造进行假设。确定了操作的需求和条件以及测量方法。“我需要喝点东西”和“我渴了，需要8盎司水来满足我的渴求”之间的区别。</p><p>然后，基于定义明确的SLO的SLA，然后根据详细SLI的一组度量标准进行测量，这将有益于常规操作以及测试过程。根据SLI中明确定义的参数，满足SLA要求的测试与即席测试相比，提供了更高的准确性和更可靠的分析。</p><p>在SLA，SLO和SLI之间进行区分将大大有助于在软件所涉及的各方（开发人员，测试人员和用户之间）之间建立有意义，可靠的关系。</p><p><em>下周，在由十个技巧组成的三部分博客系列中的第二篇中，我们将深入探讨技巧3-6。</em></p>]]></content>
      
      
      
        <tags>
            
            <tag> 自动化测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DevOps角色：您梦寐以求的工作是什么？</title>
      <link href="/2019/11/01/devops-jiao-se-nin-meng-mei-yi-qiu-de-gong-zuo-shi-shi-me/"/>
      <url>/2019/11/01/devops-jiao-se-nin-meng-mei-yi-qiu-de-gong-zuo-shi-shi-me/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="在DevOps环境中有很多可供选择的选择，每个人都可以找到一份工作。"><a href="#在DevOps环境中有很多可供选择的选择，每个人都可以找到一份工作。" class="headerlink" title="在DevOps环境中有很多可供选择的选择，每个人都可以找到一份工作。"></a>在DevOps环境中有很多可供选择的选择，每个人都可以找到一份工作。</h3><p><img src="https://dzone.com/storage/temp/12646937-blocks.jpg" alt="建筑模块"></p><p><em>有这么多DevOps角色可供选择，您将是哪个构建基块？</em></p><p>当IT专业人员迫切希望成为DevOps的专家时，对于各种DevOps角色还有很多困惑。因此，本文致力于使实施DevOps的公司的团队结构更加清晰。</p><p>您可能一直听说，在DevOps中，每个参与人员都扮演着共同的角色：DevOps，这是两种实践的结合：<em>Development</em>和<em>Operations</em>。但这远非事实。</p><h2 id="DevOps实践"><a href="#DevOps实践" class="headerlink" title="DevOps实践"></a><strong>DevOps实践</strong></h2><p>实际上，DevOps实践强调，开发人员应该能够执行由Ops家伙执行的任务，而Ops则应该能够执行由Dev家伙执行的任务。</p><p>既然您知道DevOps专业人员是具有多种技能的人员，那么您可能还想知道DevOps专业人员在其组织中负责的各种任务。如果是这样，请继续阅读。</p><p>要真正理解这个概念，您需要从另一个角度看待它。如果您置身于实施DevOps的公司中，那么它就更容易理解，因为您必须根据要求分配各种DevOps角色。</p><h2 id="DevOps角色"><a href="#DevOps角色" class="headerlink" title="DevOps角色"></a><strong>DevOps角色</strong></h2><p>首先让我列出各种角色及其描述。</p><ol><li><strong>DevOps传播者</strong> –负责实施DevOps的首席官（领导）</li><li><strong>发布管理器</strong> –发布新功能并确保发布后产品稳定性的工具</li><li><strong>自动化专家</strong> –负责实现工具自动化和编排的人</li><li><strong>软件开发人员/测试人员</strong> –实际开发代码并对其进行测试的人</li><li><strong>质量保证</strong> –确保产品质量符合其要求的人</li><li><strong>安全工程师</strong> –始终监视产品安全性和健康状况的<strong>工程师</strong></li></ol><p>这里要注意的重要一点是，其中许多角色将涉及一个团队或一组专业人员，例如软件开发人员/测试人员，安全工程师和质量保证。因此，您应该以层次结构的形式考虑这些角色及其关系。</p><p><img src="https://www.edureka.co/blog/wp-content/uploads/2018/02/DevOps-Roles.png" alt="DevOps角色"></p><p>根据公司的要求，甚至自动化专家也可以由多个人担任该角色。因此，让我更多地谈谈这些DevOps角色。</p><h3 id="DevOps传播者"><a href="#DevOps传播者" class="headerlink" title="DevOps传播者"></a><strong>DevOps传播者</strong></h3><p>就像我之前提到的那样，这是DevOps中的关键角色。由领导者或负责确保在产品的端到端开发中实施DevOps策略并带来环境积极影响的人员来担任此角色。</p><p>DevOps传播者还考虑到可用的各种自动化工具以及Dev和Ops团队具有的技能，还找到了改进产品现有体系结构的方法。他的主要目标是管理其他DevOps角色并从团队中获得全面的效率。</p><h3 id="发布经理"><a href="#发布经理" class="headerlink" title="发布经理"></a><strong>发布经理</strong></h3><p>该角色是产品可交付成果的关键角色，因为他需要将新功能/更新功能与现有框架集成在一起。该角色可以是担任发布工程师的角色的同一个人，也可以是领导发布工程师团队的发布经理。</p><p>该角色的主要重点领域是从开发到部署，以协调和管理产品。由于此角色是以重要方式参与的，因此应由了解该技术的工作原理和各种结构的技术人员（经理）来担任。</p><p>根据需求，将有多位经理领导各自的团队来处理多个功能（项目）。</p><h3 id="自动化专家"><a href="#自动化专家" class="headerlink" title="自动化专家"></a><strong>自动化专家</strong></h3><p>无需再次强调该角色的重要性，因为DevOps完全是关于自动化的。作为自动化专家，此角色应该能够理解什么可以自动化以及如何将一个产品堆栈与另一个产品堆栈集成。</p><p>此人也称为集成专家，负责分析，设计和实施持续部署的策略，同时确保生产和预生产系统的高可用性。</p><h3 id="软件开发人员-测试人员"><a href="#软件开发人员-测试人员" class="headerlink" title="软件开发人员/测试人员"></a><strong>软件开发人员/测试人员</strong></h3><p>该角色负责软件的实际根级开发。传统的编码人员和程序员属于这一类。除开发外，专业人员还负责测试代码。</p><p>名称可能保持不变，但是软件开发人员/测试人员的新角色大大增加了职责范围，因为他们不仅负责将新需求转化为代码，还负责单元测试，部署和持续监控。</p><h3 id="质量保证"><a href="#质量保证" class="headerlink" title="质量保证"></a><strong>质量保证</strong></h3><p>这是DevOps中引入的新角色，实际上可以保证产品的质量。通常也称为“体验保证”，此角色是传统测试和质量检查之外的一步。</p><p>在此，对产品的功能进行了极限测试，以发现每个缺陷并改善每个独立功能的性能欠佳，因为客户的经验至关重要。这个角色一直在寻找机会，以改善所有功能以提高客户满意度。</p><h3 id="安全工程师"><a href="#安全工程师" class="headerlink" title="安全工程师"></a><strong>安全工程师</strong></h3><p>安全工程师与任何其他角色一样重要，因为他们是负责监视产品交付能力的人员。他们与开发人员并肩工作，在过程中更早地嵌入了他们的建议（安全补丁）。</p><p>除了外部安全性之外，他们还监视系统以检查其性能，报告系统面临的任何停机时间并深入分析以找出造成该问题的原因。防止再次发生停机或安全风险是安全工程师的一项重要任务。</p><p>我希望到目前为止，您对组织中可能存在的各种DevOps角色有了很好的了解。</p>]]></content>
      
      
      
        <tags>
            
            <tag> devops </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title> 容器和配置：3个DevOps工具以及对应的速查表</title>
      <link href="/2019/10/15/rong-qi-he-pei-zhi-3-ge-devops-gong-ju-yi-ji-dui-ying-de-su-cha-biao/"/>
      <url>/2019/10/15/rong-qi-he-pei-zhi-3-ge-devops-gong-ju-yi-ji-dui-ying-de-su-cha-biao/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="Puppet，Docker和Ansible速查表有助于简化DevOps的实现。"><a href="#Puppet，Docker和Ansible速查表有助于简化DevOps的实现。" class="headerlink" title="Puppet，Docker和Ansible速查表有助于简化DevOps的实现。"></a>Puppet，Docker和Ansible速查表有助于简化DevOps的实现。</h3><p><img src="https://dzone.com/storage/temp/12567617-tools.jpg" alt="工具"></p><p><em>这些DevOps工具使每个DevOps实施都更加容易。</em></p><h2 id="Puppet"><a href="#Puppet" class="headerlink" title="Puppet"></a><strong>Puppet</strong></h2><p>Puppet是使用最广泛的DevOps工具之一。它通过支持版本控制，自动测试和连续交付的功能，使交付和发布技术更改的速度更快，更频繁。它可以管理多台服务器并执行系统配置。出于多种原因，Puppet是当今IT行业中最流行的配置管理工具之一。</p><p>Puppet提供了更多的平台支持。例如，以下是您可以使用Puppet管理的平台：</p><ul><li>Debian / Ubuntu</li><li>Microsoft Windows</li><li>Redhat，Centos，Fedora</li><li>Mac OS X Server</li></ul><p>与其他配置管理工具不同，Puppet在任何系统上部署配置后，都会在一定间隔后继续验证那些配置。您也可以修改这些间隔。</p><h3 id="了解Puppet架构和Puppet组件"><a href="#了解Puppet架构和Puppet组件" class="headerlink" title="了解Puppet架构和Puppet组件"></a><strong>了解Puppet架构和Puppet组件</strong></h3><p><img src="https://dzone.com/storage/temp/12568247-how-does-puppet-work-1.png" alt="Puppet"></p><p><strong>Puppet Master：</strong> Puppet Master是处理所有与配置有关的信息的工具。Puppet Master在指定的服务器上运行，并管理部署和配置。</p><p><strong>Puppet Agent：</strong> Puppet代理在客户端上运行。Puppet代理是由Puppet Master维护和管理的实际工作机器。</p><p><strong>Config Repository：</strong> Config Repository是存储与服务器相关的配置和节点的位置。可以在需要时随时将其拉出。</p><p><strong>Facts</strong>：它们是全局变量，包含与机器有关的详细信息，例如操作系统和网络接口。它们用于分析任何节点的当前状态。</p><p><strong>Catalog</strong>：将用Puppet编写的所有配置都转换为编译后的格式，称为目录，然后将这些目录应用于目标系统。</p><p><strong>Manifests</strong>：清单是声明所有需要检查和更改的所有资源（即服务，程序包或文件）的文件。清单的扩展名为“ .pp”。</p><p><strong>Module</strong>：模块是清单文件的集合，这些清单文件的组织方式便于共享文件。</p><p><strong>Class</strong>：与其他编程语言一样，Puppet也具有用于更好地组织代码的类，从而使阅读和理解代码以及重用部分代码更加容易。</p><p><strong>Resources</strong>：在Puppet代码中，是通过声明资源定义的编码块，其中资源可以表示包，文件，用户，命令。</p><p><strong>Nodes</strong>：要在其上安装P代理的所有要管理的服务器或客户端都称为节点。</p><h2 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a><strong>Docker</strong></h2><p>Docker是高端DevOps工具，它允许在多个系统上构建，交付和运行分布式应用程序。它有助于快速组装应用程序，通常适用于容器管理。</p><p>使用Docker容器时的一些重要术语包括：</p><ul><li><strong>Layer</strong>：只读文件以配置系统</li><li><strong>Image</strong>：只读层，它是镜像的基础</li><li><strong>Container</strong>：镜像的可运行实例</li><li><strong>Registry/hub</strong>: 镜像存放的中央位置</li><li><strong>Docker machine</strong>：运行Docker容器的虚拟机</li><li><strong>Docker-compose</strong>：一个虚拟机，可将多个容器作为系统运行</li></ul><p><img src="https://dzone.com/storage/temp/12568254-docker-cheat-sheet.jpg" alt="Docker速查表"></p><h2 id="Ansible"><a href="#Ansible" class="headerlink" title="Ansible"></a><strong>Ansible</strong></h2><p>Ansible是一种开源IT配置工具，可帮助自动执行服务器和云配置，配置管理和应用程序部署。它可以管理复杂的部署并提高生产率，并有助于自动化应用程序的整个生命周期。 </p><p>让我们考虑一种情况，其中系统管理员负责处理公司的基础结构。有九台服务器，其中五台服务器充当Web服务器，五台服务器充当数据库服务器。此外，您想在Web服务器上安装Tomcat，在数据库服务器上安装MySQL。在传统方法中，系统管理员将必须手动管理服务器，安装所需的软件并更改配置，以及分别管理每个服务器上的服务。Ansile通过自动执行此过程的大部分步骤来帮助解决这一问题。<br><img src="https://dzone.com/storage/temp/12568248-ansible-cheat-sheet-3.jpg" alt="Ansible速查表"></p><h3 id="Ansible中的重要术语"><a href="#Ansible中的重要术语" class="headerlink" title="Ansible中的重要术语"></a><strong>Ansible中的重要术语</strong></h3><p><strong>Controller Machine</strong>：这是Ansible的安装位置。控制器机器有助于在您管理的服务器上启用配置。</p><p><strong>Inventory</strong>：基本上，这是一个初始化文件，其中包含有关您所管理的服务器的信息。</p><p><strong>Playbook</strong>：脚本化的有组织的单位，用于定义服务器配置管理的自动化作业。</p><p><strong>Task</strong>：任务块定义了要在服务器上执行的单个过程，例如安装软件包。</p><p><strong>Nagios</strong>：此工具有助于监视IT基础结构。它能够确定错误并在标准网络，服务器和日志监视系统的帮助下进行纠正。</p>]]></content>
      
      
      
        <tags>
            
            <tag> devops </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>将Python脚本变成漂亮的ML工具</title>
      <link href="/2019/10/08/jiang-python-jiao-ben-bian-cheng-piao-liang-de-ml-gong-ju/"/>
      <url>/2019/10/08/jiang-python-jiao-ben-bian-cheng-piao-liang-de-ml-gong-ju/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="将Python脚本变成漂亮的ML工具"><a href="#将Python脚本变成漂亮的ML工具" class="headerlink" title="将Python脚本变成漂亮的ML工具"></a>将Python脚本变成漂亮的ML工具</h2><p>Streamlit，这是专为ML工程师打造的应用程序框架<br>Adrien Treuille<br><img src="https://img.hacpai.com/file/2019/10/1Mbn2SxozueUkGKPW1NJkOw-342c5971.gif" alt="1Mbn2SxozueUkGKPW1NJkOw.gif"><br>在300行Python中使用实时神经网络推理对语义搜索引擎进行编码。</p><p>以我的经验，每个不平凡的机器学习项目最终都将使用漏洞缠身且无法维护的内部工具进行缝合。这些工具（通常是Jupyter笔记本和Flask应用程序的拼凑而成）难以部署，需要对客户端-服务器体系结构进行推理，并且无法与Tensorflow GPU会话等机器学习结构很好地集成。</p><p>我首先在卡内基·梅隆大学（Carnegie Mellon），然后在伯克利（Berkeley），谷歌X（Google X），以及后来在Zoox构建自动机器人时就看到了。这些工具通常是在Jupyter笔记本电脑中诞生的：传感器校准工具，模拟比较应用程序，LIDAR对准应用程序，场景重播工具等等。<br>随着工具重要性的提高，项目经理介入了。过程萌芽了。要求开花。这些单独的项目孕育成脚本，并逐渐成为繁琐的维护噩梦。</p><p><img src="https://img.hacpai.com/file/2019/10/15BWfcoBn2yypksY8QuKA-9aaa7cb1.png" alt="15BWfcoBn2yypksY8QuKA.png"><br>机器学习工程师的临时应用构建流程。</p><p>当工具变得至关重要时，我们召集了<strong>工具团队</strong>。他们写了流利的Vue和React。他们在笔记本电脑上贴上声明性框架的标签。他们有一个设计过程：</p><p><img src="https://img.hacpai.com/file/2019/10/1hNO5NYKjcsEV7jIpEaz8Eg-7c517413.png" alt="1hNO5NYKjcsEV7jIpEaz8Eg.png"><br>工具团队的应用程序构建流程整洁。</p><p>太棒了!但是这些工具都需要新功能，例如每周一次。工具团队正在支持其他十个项目。他们会说：“我们将在两个月内再次更新您的工具。”<br>因此，我们回到了构建自己的工具，部署Flask应用程序，编写HTML，CSS和JavaScript，以及尝试对从笔记本到样式表的所有内容进行版本控制的过程。因此，我的老Google X朋友Thiago Teixeira和我开始思考以下问题：<strong>如果我们能够使构建工具像编写Python脚本一样容易，该怎么办？</strong><br>我们希望机器学习工程师无需工具团队就能创建精美的应用程序。这些内部工具应作为ML工作流程的自然副产品而出现。写这样的工具应该感觉像训练神经网络或Jupyter执行即席分析！同时，我们希望保留功能强大的应用程序框架的所有灵活性。我们想要创建工程师可以炫耀的漂亮，高性能的工具。基本上，我们想要这样：</p><p><img src="https://img.hacpai.com/file/2019/10/1gdD55KRcRVRvfjsQLsXA-6c78e2d5.png" alt="1gdD55KRcRVRvfjsQLsXA.png"><br>Streamlit应用程序构建流程。</p><p>我们拥有一个了不起的Beta社区，其中包括来自Uber，Twitter，Stitch Fix和Dropbox的工程师，我们工作了一年的时间来创建Streamlit，这是一个针对ML工程师的完全免费和开源的应用程序框架。对于每个原型，Streamlit的核心原理变得越来越简单。他们是：<br><strong>＃1：拥抱Python脚本。</strong>Streamlit应用程序实际上只是从上到下运行的脚本。没有隐藏状态。您可以使用函数调用来分解代码。如果您知道如何编写Python脚本，则可以编写Streamlit应用程序。例如，这是您写入屏幕的方式：</p><pre class="line-numbers language-none"><code class="language-none">导入streamlit为st st.write（'Hello，world！'）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://img.hacpai.com/file/2019/10/1VNqEOqFJQl5fB7Z0ed5lMw-83fa2837.png" alt="1VNqEOqFJQl5fB7Z0ed5lMw.png"></p><p>很高兴见到你。<br><strong>＃2：将小部件视为变量。</strong>Streamlit中没有回调！每次交互都只是从上到下重新运行脚本。这种方法可以产生非常干净的代码：<br>导入streamlit为st </p><pre class="line-numbers language-none"><code class="language-none">x = st.slider（'x'）st.write（x，'squared is'，x * x）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://img.hacpai.com/file/2019/10/1h8BwonRrhnh3KtjO5cDEcA-0f122826.png" alt="1h8BwonRrhnh3KtjO5cDEcA.png"><br>包含三行代码的交互式Streamlit应用程序。</p><p><strong>＃3：重用数据和计算。</strong>如果您下载大量数据或执行复杂的计算该怎么办？关键是跨运行安全地重用信息。Streamlit引入了一种缓存原语，其行为类似于持久的默认情况下不可变的数据存储，可让Streamlit应用程序安全，轻松地重用信息。例如，此代码<strong>下载数据一次</strong>从Udacity自驾车项目，得到一个简单，快捷的应用程序：</p><pre class="line-numbers language-none"><code class="language-none">导入 streamlit as st将熊猫作为 pd 导入＃重复使用这些数据！read_and_cache_csv = st.cache（pd.read_csv）BUCKET  =  “ https://streamlit-self-driving.s3-us-west-2.amazonaws.com/ ”数据= read_and_cache_csv（BUCKET  +  “ labels.csv.gz ”，NROWS = 1000）wanted_label = st.selectbox（'过滤到：'，[ ' car '，' truck ' ]）st.write（数据[数据。标签==所需标签]）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>原始代码查看：<a href="https://gist.github.com/treuille/c633dc8bc86efaa98eb8abe76478aa81/raw/2019640b6a9ff5da5ab6d5b11b3345ddc764b285/cache_example.py">https://gist.github.com/treuille/c633dc8bc86efaa98eb8abe76478aa81/raw/2019640b6a9ff5da5ab6d5b11b3345ddc764b285/cache_example.py</a></p><p>使用st.cache在Streamlit运行中保留数据。要运行此代码，请按照以下说明进行操作。</p><p><img src="https://img.hacpai.com/file/2019/10/1vLvk0xZUVEx1GcrzYhWxXQ-b58f56c0.png" alt="1vLvk0xZUVEx1GcrzYhWxXQ.png"></p><p>运行上面的st.cache示例的输出。</p><p>简而言之，Streamlit的工作方式如下：</p><ol><li>对于每个用户交互，整个脚本都是从头开始运行的。</li><li>Streamlit在给定小部件状态的情况下为每个变量分配一个最新值。</li><li>缓存允许Streamlit跳过冗余数据获取和计算。<br>或在图片中：<br><img src="https://img.hacpai.com/file/2019/10/1l4gxFYEZnRhysQQWIVJgA-afdf8c2f.png" alt="1l4gxFYEZnRhysQQWIVJgA.png"><br>用户事件触发Streamlit从头开始重新运行脚本。只有高速缓存在运行之间持续存在。</li></ol><p>如果这听起来很有趣，那么您可以立即尝试！赶紧运行：</p><pre class="line-numbers language-none"><code class="language-none">$ pip install --upgrade streamlit $ streamlit hello<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>   <pre class="line-numbers language-none"><code class="language-none">现在，您可以在浏览器中查看Streamlit应用程序。本地URL：http://localhost:8501 外网URL：http://10.0.1.29:8501<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这将自动弹出打开一个指向您本地Streamlit应用程序的Web浏览器。如果没有，只需单击链接。</p><p><img src="https://img.hacpai.com/file/2019/10/1Btm7O0pYqAkenXUPECLw-6ba5c610.png" alt="1Btm7O0pYqAkenXUPECLw.png"></p><p>要查看类似此分形动画的更多示例，请从命令行运行streamlit hello。</p><hr><p>好。你从分形玩回来了吗？这些可能会令人着迷。<br>这些想法的简单性不会阻止您使用Streamlit创建令人难以置信的丰富实用的应用程序。在Zoox和Google X期间，我看着无人驾驶汽车项目激增为数以十亿计的视觉数据，需要对其进行搜索和理解，包括在图像上运行模型以比较性能。我见过的每个自动驾驶汽车项目最终都让整个团队都在使用这种工具。<br>在Streamlit中构建这样的工具很容易。这个Streamlit演示使您可以在整个Udacity自动驾驶汽车照片数据集中执行语义搜索，可视化人类注释的地面真相标签，并从应用程序内部实时运行完整的神经网络（YOLO） [1]。<br><img src="https://img.hacpai.com/file/2019/10/1p3XPmx0TUIuMmQQa4mjHQ-81b29b26.gif" alt="1p3XPmx0TUIuMmQQa4mjHQ.gif"></p><p>这个300行的Streamlit演示结合了语义视觉搜索和交互式神经网络推理。</p><p>整个应用程序是一个完全自包含的300行Python脚本，其中大多数是机器学习代码。实际上，整个应用程序中只有23个Streamlit调用。您可以立即自己运行它！</p><pre class="line-numbers language-none"><code class="language-none">$ pip install --upgrade streamlit opencv-python $ streamlit runhttps://raw.githubusercontent.com/streamlit/demo-self-driving/master/app.py<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><hr><p>在与机器学习团队合作进行自己的项目时，我们意识到这些简单的想法产生了许多重要的好处：<br><strong>Streamlit应用程序是纯Python文件。</strong>因此，您可以在Streamlit中使用自己喜欢的编辑器和调试器。</p><p><img src="https://img.hacpai.com/file/2019/10/14KMALKoeS3TUSBn0ryzYg-d7bc9c09.png" alt="14KMALKoeS3TUSBn0ryzYg.png"></p><p>我最喜欢的用于编写Streamlit应用程序的布局在左侧是VSCode，在右侧是Chrome。</p><p><strong>纯Python脚本可与Git</strong>和其他源代码控制软件<strong>无缝配合</strong>，包括提交，拉取请求，问题和注释。因为Streamlit的基础语言是纯Python，所以您可以免费获得这些出色的协作工具的所有好处。</p><p><img src="https://img.hacpai.com/file/2019/10/0pY7e7BLPI2atTV-4bf401a4.png" alt="0pY7e7BLPI2atTV.png"></p><p>因为Streamlit应用程序只是Python脚本，所以您可以使用Git轻松地对其进行版本控制。</p><p><strong>Streamlit提供了即时模式实时编码环境。</strong>当Streamlit检测到源文件更改时，只需单击始终重新运行。</p><p><img src="https://img.hacpai.com/file/2019/10/1P3vtLkHGeCRHGu5B5ifg-0d278a81.png" alt="1P3vtLkHGeCRHGu5B5ifg.png"><br>单击“始终重新运行”以启用实时编码。</p><p><strong>缓存简化了计算管道的设置。</strong>令人惊讶的是，链接缓存的功能会自动创建高效的计算管道！考虑以下代码，这些代码是从我们的Udacity演示改编而成的：</p><pre class="line-numbers language-none"><code class="language-none">import streamlit as stimport pandas as pd@st.cachedef load_metadata():    DATA_URL = "https://streamlit-self-driving.s3-us-west-2.amazonaws.com/labels.csv.gz"    return pd.read_csv(DATA_URL, nrows=1000)@st.cachedef create_summary(metadata, summary_type):    one_hot_encoded = pd.get_dummies(metadata[["frame", "label"]], columns=["label"])    return getattr(one_hot_encoded.groupby(["frame"]), summary_type)()# Piping one st.cache function into another forms a computation DAG.summary_type = st.selectbox("Type of summary:", ["sum", "any"])metadata = load_metadata()summary = create_summary(metadata, summary_type)st.write('## Metadata', metadata, '## Summary', summary)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>源码来自：<a href="https://gist.github.com/treuille/ac7755eb37c63a78fac7dfef89f3517e/raw/568cc2d190c2f96b2a8a7aaf6fa444d68bde630e/caching_DAG_example.py">https://gist.github.com/treuille/ac7755eb37c63a78fac7dfef89f3517e/raw/568cc2d190c2f96b2a8a7aaf6fa444d68bde630e/caching_DAG_example.py</a></p><p>Streamlit中的简单计算管道。要运行此代码，请按照以下说明进行操作。<br>基本上，管道是load_metadata→create_summary。每次运行脚本时，<strong>Streamlit只会重新计算需要正确答案的管道子集。</strong>酷！</p><p><img src="https://img.hacpai.com/file/2019/10/1e0z12L0pXYlCE5OM3n6LA-7b6f242f.png" alt="1e0z12L0pXYlCE5OM3n6LA.png"><br>为了使应用程序具有高性能，Streamlit仅重新计算更新UI所需的任何内容。</p><p><strong>Streamlit是为GPU构建的。</strong>Streamlit允许直接访问机器级原语，例如TensorFlow和PyTorch，并补充了这些库。例如，在此演示中，Streamlit的缓存存储了整个NVIDIA名人GAN [2]。当用户更新滑块时，这种方法几乎可以实现瞬时推断。</p><p><img src="https://img.hacpai.com/file/2019/10/1188SkUE1onGcpQIuSZsiMQ-644dc8b5.gif" alt="1188SkUE1onGcpQIuSZsiMQ.gif"><br>该Streamlit应用程序使用管韶博的TL-GAN [3] 演示了NVIDIA名人GAN [2]模型。</p><p><strong>Streamlit是一个免费的开源库，而不是专有的Web应用程序。</strong>您可以在不与我们联系的情况下在本地提供Streamlit应用程序。您甚至可以在没有Internet连接的笔记本电脑上本地运行Streamlit！此外，现有项目可以逐步采用Streamlit。</p><p><img src="https://img.hacpai.com/file/2019/10/1nyOMWYNcM9mPTU5mHf1CxQ-fa82969b.png" alt="1nyOMWYNcM9mPTU5mHf1CxQ.png"><br>有几种方法逐渐采用Streamlit。（图标由fullvector / Freepik提供。）<br>这只是您使用Streamlit可以做的事情的表面。</p><p>Streamlit最令人兴奋的方面之一是如何将这些原语轻松地组合成看起来像脚本的复杂应用程序。关于我们的架构如何工作以及我们计划的功能，我们还有很多话要说，但是我们将其保存下来以备将来之用。</p><p><img src="https://img.hacpai.com/file/2019/10/1wmwwsWkOHzsYLe8pB2RzBA-33e9fe5c.png" alt="1wmwwsWkOHzsYLe8pB2RzBA.png"><br>Streamlit组件的框图。更多即将推出！</p><p>我们很高兴能最终与社区今天共享Streamlit，并看到你们所有人用它构建的东西。我们希望您会发现将Python脚本转换为漂亮的ML应用变得轻松而愉快。</p><p>感谢Amanda Kelly，Thiago Teixeira，TC Ricks，Seth Weidman，Regan Carey，Beverly Treuille，GenevièveWachtell和Barney Pell在本文中提供的有益帮助。</p><p>参考文献：<br>[1] J. Redmon and A. Farhadi, *YOLOv3: An Incremental Improvement *(2018), arXiv.<br>[2] T. Karras, T. Aila, S. Laine, and J. Lehtinen, <em>Progressive Growing of GANs for Improved Quality, Stability, and Variation</em> (2018), ICLR.<br>[3] S. Guan, *Controlled image synthesis and editing using a novel TL-GAN model *(2018), Insight Data Science Blog.</p><p>感谢TC Ricks ，Amanda Kelly 和Amanda Kelly 。 </p>]]></content>
      
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何为DevOps的面试做好充分准备</title>
      <link href="/2019/09/24/ru-he-wei-devops-de-mian-shi-zuo-hao-chong-fen-zhun-bei/"/>
      <url>/2019/09/24/ru-he-wei-devops-de-mian-shi-zuo-hao-chong-fen-zhun-bei/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="这是您为DevOps热点准备的面试准备。"><a href="#这是您为DevOps热点准备的面试准备。" class="headerlink" title="这是您为DevOps热点准备的面试准备。"></a>这是您为DevOps热点准备的面试准备。</h3><p><img src="https://dzone.com/storage/temp/12433224-interiew-chairs-and-table.jpg" alt="面试桌椅"></p><p><em>那么，为什么他们要雇用您呢？</em></p><p>在过去的十年中，DevOps成为一种新的技术文化和职业，将软件开发所需的快速迭代与基础架构运营团队的坚如磐石的稳定性相结合。对于系统管理员，运营工程师以及其他拥有强大系统和软件背景的人员来说，过渡到DevOps的时间可能比现在更好。截至2019年8月，仅在美国，目前就有超过50,000个 LinkedIn DevOps工作岗位。</p><p>假设您已经了解了基础知识，并准备开始寻找工作。您如何评价DevOps面试？DevOps工程师必须既是优秀的软件开发人员，又是基础架构专家，因此，他们应该知道Linux基础架构，网络，算法和DevOps工具（例如Terraform，Docker和Kubernetes）。范围从标准软件工程师编码问题到有关系统设计，再到Linux调试和DevOps工具的问题等等。</p><p>这是一个令人生畏的清单，但请不要害怕！在Insight上，DevOps奖学金将许多具有可转让技能的个人的职业推向了人们所期望的行业DevOps职位。这是我们为他们准备面试的方式。</p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>动机是一个好的开始，但是您需要纪律才能有效地做好准备。我编写了这本指南，以帮助您制定有规律的面试准备程序。面试真的很烂-这是随机的，可能会让您对自己感到难过。在此过程中，<strong>不可</strong>控制的事情太多了，但是您<strong>可以</strong>控制自己的准备方式。</p><p>在这里有很多值得一试的东西，所以不要指望能够一次学习所有东西。也许有一天您会选择一个主题来关注。也许您将连续一个星期专注于另一个主题。不过，通常来说，您应该每天习惯性地进行两到三项活动，轮流讨论不同的主题，以使您的思想保持新鲜和投入。这些类别按重要性顺序列出：</p><ol><li>Linux基础</li><li>数据结构与算法</li><li>系统设计</li><li>解析</li><li>DevOps工具</li></ol><p>首先，要建立广泛而浅薄的知识基础，这样一来，以循环方式首先在各个主题之间实现负载平衡是一件好事。这将扩大您的DevOps空间的概念框架，以便您可以更轻松地将新信息放入上下文中。每个类别中的活动也按重要性顺序或多或少地排名。某些活动适合日常实践，例如CodeSignal问题或OverTheWire挑战。其他人则适合深入学习。</p><p>如果您想快点走，那就一个人走。但是，如果您想走得更远，那就一起走吧。与您的同龄人一起创建一个学习小组。互相追究责任。每周或每天签到和信息共享会话。在这段时间里，您会感到无动力，请记住，做某事总比什么都不做好。在您动力十足的那段时间里，请记住，睡眠和运动对您的成功至为重要。这些活动是人生下一阶段的垫脚石，但请记住让自己着迷于每块石头的形状。</p><h2 id="Linux基础"><a href="#Linux基础" class="headerlink" title="Linux基础"></a>Linux基础</h2><p>作为一名DevOps工程师，你应该对Linux了如指掌。从内核到网络再到命令行命令，有关Linux的任何问题都是公平的游戏。</p><h3 id="示例问题"><a href="#示例问题" class="headerlink" title="示例问题"></a>示例问题</h3><ul><li>Linux计算机加电时发生的步骤顺序是什么？</li><li>当您在浏览器中键入google.com并导致网页返回给您时，会发生什么情况？如果没有出现网页怎么办？如何调试问题？</li><li>您如何检查文件系统是否空间不足？如何打印最大文件列表？如何删除所有大于1 GB的.mov文件？</li></ul><h3 id="活动"><a href="#活动" class="headerlink" title="活动"></a>活动</h3><ul><li>通读<a href="http://solutionsproj.net/software/The_Linux_Command_Linex.pdf"><em>Linux命令</em></a>行书</li><li>通过<a href="https://overthewire.org/wargames/">OverTheWire</a>战争游戏进行工作。这些是通过精心设计的Linux系统进行的有趣的寻宝游戏，旨在教您一些基本概念。至少通过强盗等级。如果遇到困难，请不要担心Google解决方案。我强烈建议您随时随地在GitHub中记录进度。</li><li>只需使用vimtutor命令来学习vim。它是有史以来最好的编辑器，请勿让任何人说服您。</li><li>考虑购买课程以获取Linux基础知识认证（Linux +，RedHat等）。的确，一磅的认证比一盎司的经验没有价值，但是，如果您经验不足，那么认证可以帮助填补您的知识空白，并证明您具有基本的了解。</li></ul><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li>最好参考手册Linux命令是<a href="https://tldr.sh/">tldr.sh</a>。我强烈建议您下载tl; dr移动应用程序以快速参考。这在电话采访中帮助了我，我当时根本不知道该怎么做。</li><li><a href="https://devhints.io/">devhints.io</a>是各种备忘单的重要来源。</li><li>它看上去并不浮华，但是<a href="https://www.tldp.org/LDP/abs/html/">Advanced Bash脚本指南</a>是个巨大的财产库。</li></ul><h2 id="数据结构与算法"><a href="#数据结构与算法" class="headerlink" title="数据结构与算法"></a>数据结构与算法</h2><p>请记住，DevOps是<strong>开发</strong> +运营，因此您应该知道如何编码。选择一种您选择的语言（不是Bash-如果您不太喜欢，我建议使用Python）并练习，练习，练习。这不仅仅是寻找最佳解决方案-您必须与面试官清楚地交流问题的参数，传达您的思考过程，并计算不同算法的时间和空间复杂度。</p><h3 id="示例问题-1"><a href="#示例问题-1" class="headerlink" title="示例问题"></a>示例问题</h3><ul><li>从列表中删除所有重复项。</li><li>在包含除一个以外的所有可能IP的文件中找到丢失的IP。</li><li>对二叉树的所有节点进行排序。</li></ul><h3 id="活动-1"><a href="#活动-1" class="headerlink" title="活动"></a>活动</h3><ul><li><a href="https://www.khanacademy.org/computing/computer-science/algorithms">可汗学院</a>有一个非常好的数据结构和算法入门。它使用Javascript，但不要反对它。该课程是与汤姆·科门（Tom Cormen）合作完成的，汤姆·科门（Tom Cormen）是<a href="https://en.wikipedia.org/wiki/Introduction_to_Algorithms">一本有关数据结构和算法</a>的权威<a href="https://en.wikipedia.org/wiki/Introduction_to_Algorithms">著作</a>，绝对值得拥有。</li><li><a href="https://leetcode.com/">LeetCode</a>拥有大量的问题库，这些问题库与真实的面试问题非常接近。实际上，许多公司都会直接问您LeetCode问题！每种算法至少要回答10个简单和中等问题。当您解决了100个问题后，您就可以开始感到准备好了，并且实际上可以解决这些问题而无需查找任何内容。</li><li>每天在<a href="https://codesignal.com/developers/interview-practice/">CodeSignal</a>上<a href="https://codesignal.com/developers/interview-practice/">完成</a>面试准备材料。我建议使用Python，但您可以使用任何语言。将代码复制并粘贴到文件中，并使用Gi​​tHub对其进行版本控制。每天，仔细阅读您昨天做的代码，并详细记录下来。编写代码比阅读旧代码并记住发生的事情要容易。一两天后重新访问旧代码将迫使您综合所学的概念。</li><li>通过CodeSignal的Python Arcade进行工作。这是对所有重要的标准Python库的很好的浏览。有些练习确实没有达到目标，但总体而言，这是一个不错的播放列表。</li><li>研究动态规划，有向无环图，拓扑排序。</li><li>每个人都需要一点SQL。无需花费大量时间，但是您应该在<a href="https://mode.com/">Mode Analytics</a>上注册一个免费帐户，并利用其使用真实公共数据库的出色互动SQL教程。</li><li>随着您对编码技能的适应程度提高，请使用<a href="https://www.pramp.com/">Pramp</a>进行现场技术面试。这是重要的组成部分。像练习技术电话屏幕一样，您没有比技术电话屏幕更充分的准备。</li><li>请记住，唯一有价值的知识是您可以在白板或实时编码上在面试官面前展示的内容。如果您倾向于在高压情况下停滞不前，那么您就远非唯一的人了-请确保与同伴一起做很多练习。</li></ul><h3 id="参考-1"><a href="#参考-1" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="https://learnxinyminutes.com/docs/python3/">LearnXinYminutes</a>是一个很棒的示例驱动的Python备忘单</li><li><a href="https://gto76.github.io/python-cheatsheet/#main">Python</a>备忘<a href="https://gto76.github.io/python-cheatsheet/#main">单</a>：最好的Python备忘单，尽管它很简洁</li><li><a href="https://docs.python-guide.org/">Hitchhiker的Python指南</a>：最佳的Python文档。</li><li>我的<a href="https://github.com/chuckinator0/Projects/tree/master/scripts">脚本GitHub存储库中</a>有很多示例文件，这些文件经过了详细记录，尽管实际上是无组织的！</li></ul><h2 id="系统设计"><a href="#系统设计" class="headerlink" title="系统设计"></a>系统设计</h2><p>系统设计面试可测试您的整体思维，架构复杂基础架构的能力以及沟通技巧。确保采用自上而下的设计方法，并具有清晰的基础结构图和DevOps注意事项。</p><h3 id="示例问题-2"><a href="#示例问题-2" class="headerlink" title="示例问题"></a>示例问题</h3><ul><li>设计一个基于微博消息的社交网络，如Twitter。您将如何确保不同地区的高可用性？</li></ul><h3 id="活动-2"><a href="#活动-2" class="headerlink" title="活动"></a>活动</h3><ul><li>消除<a href="https://github.com/donnemartin/system-design-primer/blob/master/README.md">系统设计入门知识</a>。一个有趣的事情是选择一个主题，然后请朋友选择另一个主题，然后花2个小时研究您的主题，然后再花一两个小时进行分享。轮流扮演面试官和受访者的角色。</li><li>阅读<a href="https://landing.google.com/sre/sre-book/toc/index.html">Google SRE图书</a>。这是现代DevOps必读的书。</li></ul><h2 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h2><p>系统管理员经常分析系统输出和日志，以获得系统见解和调试问题。使用grep，awk和sed之类的工具进行命令行解析是DevOps工具库的一项重要技能。</p><h3 id="示例问题-3"><a href="#示例问题-3" class="headerlink" title="示例问题"></a>示例问题</h3><ul><li>给定一个Apache Web服务器日志，每天有多少个请求？哪些IP是最常访问的访客？最需要哪些页面和图像？</li></ul><h3 id="活动-3"><a href="#活动-3" class="headerlink" title="活动"></a>活动</h3><ul><li>通过Insight的<a href="https://github.com/InsightDataScience/Parsing-Workshop">解析研讨会资料</a>中的<strong>练习进行练习</strong>。专注于awk。本章材料不错，是练习是最重要的部分。<a href="https://github.com/InsightDataScience/Parsing-Workshop"></a></li></ul><h3 id="参考-2"><a href="#参考-2" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="https://learnxinyminutes.com/docs/awk/">LearnXinYminutes</a>：另一个出色的示例驱动参考-这次是awk。</li><li><a href="https://regexr.com/">Regexr</a>：最佳正则表达式参考。</li></ul><h2 id="DevOps工具"><a href="#DevOps工具" class="headerlink" title="DevOps工具"></a>DevOps工具</h2><p>Docker，Terraform和Kubernetes是必不可少的DevOps工具，并且彻底学习它们不会出错。您还应该知道至少一种CI/CD工具，例如Jenkins。强烈建议您至少在三大云之一上学习这些工具：AWS，GCP或Azure。</p><h3 id="示例问题："><a href="#示例问题：" class="headerlink" title="示例问题："></a>示例问题：</h3><ul><li>使用Terraform将Docker应用程序部署到新的AWS EC2实例上。</li></ul><h3 id="活动-4"><a href="#活动-4" class="headerlink" title="活动"></a>活动</h3><ul><li>您需要学习Kubernetes。为了学习Kubernetes，您需要了解容器化和Docker。</li><li>通过<a href="https://github.com/docker/labs/blob/master/beginner/readme.md">Docker初学者</a>实验</li><li>通过<a href="https://training.play-with-docker.com/">Docker课堂</a>进行<a href="https://training.play-with-docker.com/">游戏</a></li><li>Kubernetes（概念：容器编排）</li><li>阅读<a href="https://kubernetes.io/docs/concepts/overview/what-is-kubernetes/">Kubernetes概念</a></li><li>通过<a href="https://kubernetes.io/docs/tutorials/kubernetes-basics/">Kubernetes基础</a>教程学习</li><li>若要进行更深入的潜水，请完成<a href="https://www.katacoda.com/courses/kubernetes">Katacoda课程</a></li><li>通过一两个入门性的<a href="https://jenkins.io/doc/tutorials/build-a-python-app-with-pyinstaller/">Jenkins教程</a>来学习有关CI / CD的更多信息（概念：部署管道作为代码）。老实说，我对Jenkins知之甚少，所以我不了解更好的资源。</li><li>使用<a href="https://www.vagrantup.com/intro/getting-started/index.html">Vagrant</a>声明性地定义VM，然后使用<a href="https://www.virtualbox.org/">VirtualBox</a>或<a href="https://www.packer.io/intro/getting-started/install.html">Packer</a>将该VM导出为OVA文件（概念：不可变的基础结构，配置为代码）。</li><li>Terraform（概念：基础架构作为代码）</li><li>阅读Terragrunt的<a href="https://blog.gruntwork.io/a-comprehensive-guide-to-terraform-b3d32832baca">Terraform综合指南</a></li><li>通过<a href="https://learn.hashicorp.com/terraform/">Terraform教程进行工作</a></li><li>Ansible（概念：配置为代码）</li><li>观看<a href="https://www.ansible.com/resources/videos/quick-start-video">介绍视频</a></li><li>对于一些动手实验，我认为Linux Academy可能是最好的选择（不是免费的）</li><li>进行<a href="https://docs.honeycomb.io/learning-about-observability/quick-start/">Honeycomb Quickstart，</a>以提供一种监视/跟踪工具（概念：全栈跟踪）</li><li>完成<a href="https://learn.hashicorp.com/consul/">Consul教程</a>（概念：服务发现）。</li><li>完成<a href="https://learn.hashicorp.com/vault/">Vault教程</a>（概念：企业级机密管理）</li><li>玩<a href="https://linkerd.io/2/getting-started/">Linkerd</a>（概念：服务网格）</li><li>Apache Kafka（概念：容错，高吞吐量事件流）</li><li>适用于Apache Kafka的无耻插件—  在该网站上免费找到<a href="https://cloud.contentraven.com/confluent/self-userpackage">Confluent培训</a>课程，以获取有关Kafka基础知识的不错的视频集</li><li>查看<a href="https://github.com/confluentinc/training-operations-src">操作培训仓库，</a>以建立自己的本地docker-组成Kafka集群，并开始使用Kafka</li></ul><h3 id="参考-3"><a href="#参考-3" class="headerlink" title="参考"></a>参考</h3><ul><li>Ansible：<a href="https://docs.ansible.com/ansible/latest/user_guide/index.html">用户指南</a>。</li><li>想在Kubernetes中做一些特定的事情吗？检查文档的“ <a href="https://kubernetes.io/docs/tasks/">任务”</a>部分。有许多特定于任务的指南。</li><li>Docker的“demo”(<a href="https://docs.docker.com/samples/)%E9%A1%B5%E9%9D%A2%E6%8F%90%E4%BE%9B%E4%BA%86%E5%AE%8C%E6%95%B4%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E7%9A%84%E8%89%AF%E5%A5%BD%E7%A4%BA%E4%BE%8B%E4%BB%A5%E5%8F%8A%E4%B8%80%E4%BA%9B%E5%AE%9E%E7%94%A8%E7%9A%84%E6%95%99%E7%A8%8B%E3%80%82%E6%88%91%E5%96%9C%E6%AC%A2[Django">https://docs.docker.com/samples/)页面提供了完整应用程序的良好示例以及一些实用的教程。我喜欢[Django</a> + Postgres](<a href="https://docs.docker.com/compose/django/)%E7%A4%BA%E4%BE%8B%E3%80%82">https://docs.docker.com/compose/django/)示例。</a></li></ul><h2 id="其他具有高价值物品"><a href="#其他具有高价值物品" class="headerlink" title="其他具有高价值物品"></a>其他具有高价值物品</h2><h3 id="活动-5"><a href="#活动-5" class="headerlink" title="活动"></a>活动</h3><ul><li>定期收听《软件工程日报》(<a href="https://softwareengineeringdaily.com/)%E6%92%AD%E5%AE%A2%E3%80%82%E5%88%B0%E7%9B%AE%E5%89%8D%E4%B8%BA%E6%AD%A2%EF%BC%8C%E8%BF%99%E6%98%AF%E4%BF%9D%E6%8C%81DevOps%E4%B8%96%E7%95%8C%E8%84%89%E6%90%8F%E7%9A%84%E6%9C%80%E4%BD%B3%E6%96%B9%E6%B3%95%E3%80%82%E5%BB%BA%E8%AE%AE%E6%82%A8%E5%AE%89%E8%A3%85%E8%AF%A5%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%EF%BC%8C%E4%BB%A5%E4%BE%BF%E6%82%A8%E5%8F%AF%E4%BB%A5%E8%BD%BB%E6%9D%BE%E6%90%9C%E7%B4%A2%E6%97%A7%E5%89%A7%E9%9B%86%EF%BC%8C%E4%BB%A5%E6%B7%B1%E5%85%A5%E4%BA%86%E8%A7%A3%E6%AD%A3%E5%9C%A8%E7%A0%94%E7%A9%B6%E7%9A%84%E6%8A%80%E6%9C%AF%E5%92%8C%E6%A6%82%E5%BF%B5%E3%80%82%E5%9C%A8%E2%80%9C">https://softwareengineeringdaily.com/)播客。到目前为止，这是保持DevOps世界脉搏的最佳方法。建议您安装该应用程序，以便您可以轻松搜索旧剧集，以深入了解正在研究的技术和概念。在“</a> DevOps工具”部分中，我为每个工具背后的概念提供了关键字。您可以使用这些关键字在SEdaily中搜索相关的播客。</li><li>阅读有关看板(<a href="https://www.atlassian.com/agile/kanban/boards)%E7%9A%84%E7%9F%A5%E8%AF%86%EF%BC%8C%E5%B9%B6%E4%BD%BF%E7%94%A8%E5%AE%83%E4%BB%AC%E6%9D%A5%E5%A2%9E%E5%BC%BA%E6%82%A8%E7%9A%84%E6%B3%A8%E6%84%8F%E5%8A%9B%E5%92%8C%E7%94%9F%E4%BA%A7%E5%8A%9B%E3%80%82GitHub%E6%9C%89%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E7%9C%8B%E6%9D%BF%EF%BC%8C%E6%82%A8%E5%8F%AF%E4%BB%A5%E4%BD%BF%E7%94%A8%E5%AE%83%E6%9D%A5%E4%BF%9D%E6%8C%81%E7%94%9F%E4%BA%A7%E5%8A%9B%E3%80%82%E6%88%91%E4%B8%AA%E4%BA%BA%E4%B9%9F%E5%96%9C%E6%AC%A2[%E5%AD%90%E5%BC%B9%E5%BC%8F%E6%97%A5%E8%AE%B0](https://www.youtube.com/watch?v=fm15cmYU0IM)%E5%92%8C%5BPomodoro%E6%96%B9%E6%B3%95%5D(https://en.wikipedia.org/wiki/Pomodoro_Technique)%E3%80%82">https://www.atlassian.com/agile/kanban/boards)的知识，并使用它们来增强您的注意力和生产力。GitHub有一个简单的看板，您可以使用它来保持生产力。我个人也喜欢[子弹式日记](https://www.youtube.com/watch?v=fm15cmYU0IM)和[Pomodoro方法](https://en.wikipedia.org/wiki/Pomodoro_Technique)。</a></li><li>深入了解一些您喜欢的工具的技术细节。从文档开始。配对并分享技术深层次的收获。</li><li>考虑为Linux Academy或acloudguru课程付费以获得AWS，GCP或Azure认证。</li></ul><h3 id="参考-4"><a href="#参考-4" class="headerlink" title="参考"></a>参考</h3><ul><li>Digital Ocean有很棒的教程。当我使用Google时，我倾向于首先尝试“ <research topic=""> site：digitalocean.com”。当您第一次学习手动安装某些东西时，这特别有用。</research></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> DevOps </tag>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nginx Rewrite简单示例</title>
      <link href="/2019/09/23/nginxrewrite-jian-dan-shi-li/"/>
      <url>/2019/09/23/nginxrewrite-jian-dan-shi-li/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><pre class="line-numbers language-none"><code class="language-none">worker_processes  1;events {    worker_connections  1024;}http {       server {            location /google {                      rewrite (.*) http://www.google.com;        }           location /baidu {                      rewrite (.*) http://www.baidu.com;        }        error_page   500 502 503 504  /50x.html;        location = /50x.html {            root   html;       }   }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>　　按照前面讲的内容以及上面的代码，修改我们自己的配置文件，保存，重新加载nginx，然后点击【访问测试】，在地址栏给出的地址后面分别输入“*/google<em>”、“</em>/baidu*”，是不是会和我的结果一样呢？</p><p>输入“/google”转到谷歌，输入“/baidu”是不是转到百度了呢？</p>]]></content>
      
      
      <categories>
          
          <category> nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nginx 负载均衡示例</title>
      <link href="/2019/09/23/nginx-fu-zai-jun-heng-shi-li/"/>
      <url>/2019/09/23/nginx-fu-zai-jun-heng-shi-li/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><pre class="line-numbers language-none"><code class="language-none">upstream backend{      #定义负载均衡设备的Ip及设备状态      server 127.0.0.1:9090 down;      server 192.168.1.12:8080 weight=2 ;      server 192.168.1.13:6060 max_fails=3 fail_timeout=30s;      server 192.168.1.14:7070 backup;}server{    #…………………………   location /{        proxy_pass http://backend;        #…………………………    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上代码就是对负载均衡应用的示例。</p><p><em>Upstream</em>可对后端服务器进行健康检查。</p><p>a) <em>down</em>表示当前的server暂时不参与负载。</p><p>b) <em>weight</em>默认为1.weight越大，负载的权重就越大。</p><p>c) _max<em>fails</em> ：在fail_timeout时间内对后台服务器请求失败的次数。</p><p>d) _fail<em>timeout</em>:max_fails次失败后，暂停的时间。</p><p>e) <em>backup</em>： 其它所有的非backup机器down或者忙的时候，请求backup机器。所以这台机器压力会最轻。</p>]]></content>
      
      
      <categories>
          
          <category> nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nginx 正向代理示例</title>
      <link href="/2019/09/23/nginx-zheng-xiang-dai-li-shi-li/"/>
      <url>/2019/09/23/nginx-zheng-xiang-dai-li-shi-li/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><p>nginx正向代理配置如下：</p><pre class="line-numbers language-none"><code class="language-none">server{  listen       8080;  server_name www.baidu.com;  index index.html index.htm index.php;  root  /home/wwwroot;     location / {         resolver        192.168.8.88;         proxy_pass      $scheme://$http_host$request_uri;         proxy_buffers   256 4k; }   access_log off;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>　　以上配置的注意事项：</p><p>1，不能有hostname。</p><p>2，必须有resolver, 即dns，即上面的x.x.x.x，换成当前机器的DNS服务器ip即可(查看dns方法 cat /etc/resolv.conf 代理使用)。</p><p>3，$http_host和$request_uri是nginx系统变量，保持原样即可。</p><p>　　检测配置文件无误后，重启nginx，在浏览器中添加代理服务器的IP地址，就可以使用该Nginx正向代理了。</p>]]></content>
      
      
      <categories>
          
          <category> nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nginx 虚拟主机示例</title>
      <link href="/2019/09/23/nginx-xu-ni-zhu-ji-shi-li/"/>
      <url>/2019/09/23/nginx-xu-ni-zhu-ji-shi-li/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><p>　　Nginx做虚拟主机，尤其是仅仅支持纯静态-html，这是最简单的应用了，可以理解为一个仅支持静态页面的最简单的Web服务器。</p><p>　　例子，同时支持两个虚拟主机（纯静态-html支持）的配置，我们只需要理改server段，如下：</p><pre class="line-numbers language-none"><code class="language-none">server {        listen       80;        server_name  www.baidu.com;        #charset koi8-r;        #access_log  logs/host.access.log  main;        location / {                      root   /root;                       index index.php index.html index.htm;          }        error_page   500 502 503 504  /50x.html;        location = /50x.html {            root   html;        }      }server {        listen       80;        server_name  www.baidu.com;        #charset koi8-r;        #access_log  logs/host.access.log  main;        location / {                      root   /root;                           index index.php index.html index.htm;         }        error_page   500 502 503 504  /50x.html;        location = /50x.html {            root   html;        }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nginx 反向代理示例</title>
      <link href="/2019/09/23/nginx-fan-xiang-dai-li-shi-li/"/>
      <url>/2019/09/23/nginx-fan-xiang-dai-li-shi-li/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><p>　　<em>反向代理（Reverse Proxy）</em>是指代理服务器来接收来自Internet上的连接请求，并将请求转发给内部网络上的服务器，并从服务器上得到的结果返回给Internet上请求连接的客户端。</p><p>　　比如要配置后端跑 apache 服务的 ip 和端口，也就是说，我们的目标是实现通过 <a href="http://ip:port/">http://ip:port</a> 能访问到你的网站。配置文件可以修改以下内容，reload nginx就可以了。</p><pre class="line-numbers language-none"><code class="language-none">## Basic reverse proxy server ##    upstream apachephp  {        server ip:8080; #Apache    }    ## Start www.nowamagic.net ##    server {        listen 80;        server_name  www.nowamagic.net;        access_log  logs/quancha.access.log  main;        error_log  logs/quancha.error.log;        root   html;        index  index.html index.htm index.php;        ## send request back to apache ##        location / {            proxy_pass  http://apachephp;                #……………………}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>写自己的nginx配置文件</title>
      <link href="/2019/09/23/xie-zi-ji-de-nginx-pei-zhi-wen-jian/"/>
      <url>/2019/09/23/xie-zi-ji-de-nginx-pei-zhi-wen-jian/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>前面几节中我们已经学过了nginx配置文件中的各个段的配置指令，下面我们就来写一个自己配置文件。如下代码：</p><pre class="line-numbers language-none"><code class="language-none">worker_processes  1;events {    worker_connections  1024;}http {       server {            location / {                      #root   html;      #定义服务器的默认网站根目录位置                      #index index.php index.html index.htm;   #定义首页索引文件的名称                      proxy_pass http://www.baidu.com;             }            error_page   500 502 503 504  /50x.html;            location = /50x.html {                root   html;           }         }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>　　这样我们自己的配置文件就完成了，先将nginx的服务停止，然后我们用<em>nginx -c <em>.conf</em>命令来重新启动nginx，</em>.conf 为我们自己的配置文件所在的路径，nginx启动以后，然后点击【访问测试】，看看会出现什么情况，是不是已经转到我们所配置的站点了。</p><p>　　在右面的编辑页面中编辑一个配置文件，我自己的配置文件名为Mynginx.conf,其中的内容就是以上面代码的内容，保存在/etc/nginx目录下，完成以后我们做如下操作：</p><pre class="line-numbers language-none"><code class="language-none">nginx -s stop   nginx -c /etc/nginx/Mynginx.conf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>然后点击【访问测试】</p>]]></content>
      
      
      
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nginx rewrite规则</title>
      <link href="/2019/09/23/nginxrewrite-gui-ze/"/>
      <url>/2019/09/23/nginxrewrite-gui-ze/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><p>　　Nginx Rewrite 规则相关指令有if,rewrite,set,return,break等，其中最关键的就是rewrite。一个简单的Nginx Rewrite规则语法如下：</p><p><code>rewrite ^/b/(.\*)\.html /play.php?video=$1 break;</code></p><p><strong>正则表达式匹配，</strong>其中：</p><ol><li>~ 为区分大小写匹配；  </li><li>~* 为不区分大小写匹配；  </li><li>!<del>和!</del>*分别为区分大小写不匹配及不区分大小写不匹配。</li></ol><p><strong>文件及目录匹配，</strong>其中：</p><ol><li>-f和!-f用来判断是否存在文件；  </li><li>-d和!-d用来判断是否存在目录；  </li><li>-e和!-e用来判断是否存在文件或目录；  </li><li>-x和!-x用来判断文件是否可执行。  </li></ol><p><strong>flag标记有：</strong></p><ol><li>last 相当于Apache里的[L]标记，表示完成rewrite；</li><li>break 终止匹配, 不再匹配后面的规则；</li><li>redirect 返回302临时重定向 地址栏会显示跳转后的地址；</li><li>permanent 返回301永久重定向 地址栏会显示跳转后的地址。</li></ol><p>当然除了这些以外，Rewrite规则中还会用到一些相应的全局变量，如$args，$url等等</p>]]></content>
      
      
      <categories>
          
          <category> nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nginx location配置</title>
      <link href="/2019/09/23/nginxlocation-pei-zhi/"/>
      <url>/2019/09/23/nginxlocation-pei-zhi/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><p>语法规则： <em>location [=|<del>|</del></em>|^~] /uri/ { … }*</p><p>| — | — |<br>| 通配符 |  说明 |<br>| =   |开头表示精确匹配 |<br>| ^~ |  开头表示uri以某个常规字符串开头，理解为匹配 url路径即可 |<br>| ~ |  开头表示区分大小写的正则匹配 |<br>| !~ |  区分大小写不匹配 |<br>| !~* |  不区分大小写不匹配 |<br>| ~* |  开头表示不区分大小写的正则匹配 |<br>| / |  通用匹配，任何请求都会匹配到 |</p><p>　　首先匹配 =，其次匹配^~, 其次是按文件中顺序的正则匹配，最后是交给 / 通用匹配。当有匹配成功时候，停止匹配，按当前匹配规则处理请求。</p><pre class="line-numbers language-none"><code class="language-none">location = / {   #规则A}location = /login {   #规则B}location ^~ /static/ {   #规则C}location ~ \.(gif|jpg|png|js|css)$ {   #规则D}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>　　那么产生的效果如下：</p><p>访问根目录/， 比如<a href="http://localhost/">http://localhost/</a> 将匹配规则A；<br>访问 <a href="http://localhost/login">http://localhost/login</a> 将匹配规则B；<br>访问 <a href="http://localhost/static/a.html">http://localhost/static/a.html</a> 将匹配规则C；<br>访问 <a href="http://localhost/a.gif">http://localhost/a.gif</a>, <a href="http://localhost/b.jpg">http://localhost/b.jpg</a> 将匹配规则D。</p>]]></content>
      
      
      <categories>
          
          <category> nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nginx 负载均衡</title>
      <link href="/2019/09/23/nginx-fu-zai-jun-heng/"/>
      <url>/2019/09/23/nginx-fu-zai-jun-heng/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>　　<em>负载均衡</em>（又称为负载分担），英文名称为Load Balance，其意思就是将负载（工作任务）进行平衡、分摊到多个操作单元上进行执行，例如Web服务器、FTP服务器、企业关键应用服务器和其它关键任务服务器等，从而共同完成工作任务。</p><p>　　nginx的<em>upstream</em>目前支持4种方式的分配</p><p>　　1)、<em>default</em>（默认） 每个请求按时间顺序逐一分配到不同的后端服务器，如果后端服务器down掉，能自动剔除。</p><p>　　2)、<em>weight</em> 指定轮询几率，weight和访问比率成正比，用于后端服务器性能不均的情况。</p><p>　　3)、<em>ip_hash</em> 每个请求按访问ip的hash结果分配，这样每个访客固定访问一个后端服务器，可以解决session的问题。</p><p>　　4)、<em>fair</em>（第三方） 按后端服务器的响应时间来分配请求，响应时间短的优先分配。</p><pre class="line-numbers language-none"><code class="language-none">upstream ixdba.net{    ip_hash;    server 192.168.12.133:80;    server 192.168.12.134:80  down;    server 192.168.12.135:8009  max_fails=3  fail_timeout=20s;    server 192.168.12.136:8080;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>　　<em>upstream</em>是Nginx的HTTP Upstream模块，这个模块通过一个简单的调度算法来实现客户端IP到后端服务器的负载均衡。在上面的设定中，通过upstream指令指定了一个负载均衡器的名称ixdba.net。这个名称可以任意指定，在后面需要的地方直接调用即可。</p>]]></content>
      
      
      <categories>
          
          <category> nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一位年轻的董事长给大学生的18条好建议</title>
      <link href="/2019/09/23/yi-wei-nian-qing-de-dong-shi-chang-gei-da-xue-sheng-de-18-tiao-hao-jian-yi/"/>
      <url>/2019/09/23/yi-wei-nian-qing-de-dong-shi-chang-gei-da-xue-sheng-de-18-tiao-hao-jian-yi/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>做每件事情之前一定要考虑好，从而才能做到胸有成竹啊！</p><h2 id="一位年轻的董事长给大学生的18条好建议"><a href="#一位年轻的董事长给大学生的18条好建议" class="headerlink" title="一位年轻的董事长给大学生的18条好建议"></a>一位年轻的董事长给大学生的18条好建议</h2><p>　　1.一定要有独立的人格、独立的思想。一个经过独立思考而坚持错误观点的人比一个不假思索而接受正确观点的人更值得肯定。不要成为灌输教育的牺牲品。</p><p>　　2.仕途，商界，学术。大致说来，每个人都注定要走上三条道路中的某一条。在进行职业生涯规划的时候，不妨以此作为思考的出发点。根据不同的职业生涯规划来塑造各自的核心竞争力。只有知道自己以后要做什么，才能知道自己应该学什么。 </p><p>　　3.专业无冷热，学校无高低。没有哪个用人单位会认为你代表了你的学校或者你的专业。<br>千万不要因为你是名牌大学或者热门专业而沾沾自喜，也大可不必因为你的学校不好或者专业冷门而自卑。</p><p>　　4.千招会，不如一招熟。十个百分之十并不是百分之百，而是零。如果你有十项工作，每项都会做百分之十，那么，在用人单位眼中，你什么都不会。所以，你必须要让自己具备核心竞争力，“通才”只有在“专才”的基础上才有意义。</p><p>　　5.不逃课的学生不是好学生。什么课都不逃，跟什么课都逃掉没什么两样。一定要掌握学习的主动性，不要像读中学一样被老师牵着鼻子走。逃课没有错，但是不要逃错课。同时，既要逃课，又要让老师给高分。</p><p>　　6.一定要学会理财。对于贫困生来说，首先要做的不是挣钱，而是省钱。很多大学生读书的时候一掷千金，可是，毕业以后一个月的工资还不够交半个月的房租。</p><p>　　7.大部分女生将电脑当成了影碟机，大部分男生将电脑当成了游戏机。大学生要掌握必要的计算机操作能力，但是，很多时候电脑会成为浪费时间的堂而皇之的借口。有电脑的大学生非常多，可是，这中间很多人可能大学毕业的时候还不会Excel，不会做一个像样的PPT。</p><p>　　8.做事不如做人，人脉决定成败。一个人有多少钱并不是指他拥有多少钱的所有权，而是指他拥有多少钱的使用权。一个人具备多少能力，不只是说他一个人的时候能做什么，还包括他能通过别人做什么。一个人赚的钱，12.5%是靠自身的知识，87.5%则来自人脉关系。三十岁以前靠专业赚钱，三十岁以后拿人脉赚钱。所以，请好好珍惜大学期间建立起来的人脉关系。这几年你认识的朋友可能会是你毕业以后最可宝贵的财富。</p><p>　　9.互联网固然威力无穷，但是，如果你沉迷于网络聊天，或者沉迷于网络游戏，浪费的金钱倒是可以弥补，荒废的青春就无可追寻了。轻舞飞扬已经红颜薄命了，而痞子蔡却继续跟别的女孩发生着一次又一次的亲密接触。对于很多大学生而言，网吧就是一个血淋淋的黑洞。</p><p>　　10.爱情是不期而至的，可以期待，但不可以制造。花开堪折方须折，莫让鲜花败残枝。一个有一万块钱的人为你花掉一百元，你只占了他的百分之一；而一个只有十块钱的人为你花掉十块，你就成了他的全部。</p><p>　　11.研究生扩招的速度是30%，也就意味着硕士学历贬值的速度是30%。千万不要以为考研究生就是积极进取的表现。对于很多人而言，考研不过是一种消极逃避的方式罢了。对于绝大多数人而言，读研究生纯粹是浪费时间浪费金钱，立志从事科研、学术的人及其他少数人除外。</p><p>　　12.不要一门心思想着出国，更加不要迷信外国的月亮比中国圆。削尖脑袋记GRE词汇很可能是一件非常愚蠢也非常可悲的事情。既然全世界的公司都想到中国的市场上来瓜分蛋糕，为什么中国人还要一门心思到国外去留学然后给外国人打工？</p><p>　　13.人才市场就是一个地雷阵。通过多种方式求职固然没有错，但是千万不要饥不择食。只要用人单位一说要你交钱，你掉头就走便是了。</p><p>　　14.求职简历必须突出自己的核心竞争力。求职的时候大可不必像严守一那样“有一说一”，必要的时候恰到好处地说一些谎言是非常有用的。一份求职简历只要用一张A4纸做个表格就足够了。很多女生的求职简历就像是写真集，不但浪费钱，而且对求职毫无用处。面试其实是有规律的，每次面试的时候只要背标准答案就行了……</p><p>　　15.垃圾是放错位置的人才。所以，在找工作的时候一定要把自己放到那个让你成为人才而不是垃圾的职位上。当然，前提是你要知道自己究竟想做什么、究竟适合做什么。世界上最大的悲剧莫过于有太多的年轻人从来没有发现自己真正想做什么。骑驴找马固然没错，可是，并非随便找一头驴就能找到千里马。所以，一定要重视第一份工作。</p><p>　　16.大公司是做人，小公司是做事。进入公司工作以后，必须尽快融入写字楼政治。职员能否得到提升，很大程度不在于是否努力，而在于老板对你的赏识程度。在写字楼的政治斗争中，一定要学会自我保护。</p><p>　　17.瘦死的骆驼比马大。撑死胆大的，饿死胆小的。一定要有创业的勇气和魄力。如果你一直满足于给别人打工，那么，不管你工资多高，永远都只能是一个可怜的穷光蛋。就算月薪两万，在深圳上海那种地方，一年的存款还买不来一个小小的洗手间。</p><p>　　18.大学期间一定要多去图书馆多去自习室。很多书你现在不读，一辈子就再也没有机会去读了。虽然不是每本书看了都一定有用，但是，因为你不知道究竟哪本书以后会有用，所以只好多看书，并且抛弃那些过于功利的想法。尽管每次网到鱼的不过是一个网眼，但要想捕到鱼，就必须要编织一张网。</p>]]></content>
      
      
      <categories>
          
          <category> 感悟 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 感悟 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nginx http配置指令</title>
      <link href="/2019/09/23/nginxhttp-pei-zhi-zhi-ling/"/>
      <url>/2019/09/23/nginxhttp-pei-zhi-zhi-ling/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><p>　　设定mime类型,类型由mime.type文件定义 用<em>include</em>指令.</p><pre class="line-numbers language-none"><code class="language-none">include       /etc/nginx/mime.types;default_type  application/octet-stream;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>　　开启gzip压缩指令</p><pre class="line-numbers language-none"><code class="language-none">gzip on;gzip_disable "MSIE [1-6]\.(?!.*SV1)";<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>　　设定负载均衡的服务器列表用指令<em>upstream</em>。</p><pre class="line-numbers language-none"><code class="language-none">upstream mysvr {    #weigth参数表示权值，权值越高被分配到的几率越大    #本机上的Squid开启3128端口    server 192.168.8.1:3128 weight=5;    server 192.168.8.2:80  weight=1;    server 192.168.8.3:80  weight=6;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>　　设定虚拟主机用指令<em>server</em>，其中包括端口，主机名称，默认请求等设置。</p><pre class="line-numbers language-none"><code class="language-none">server {    #侦听80端口    listen       80;    #定义使用www.xx.com访问    server_name  www.xx.com;    #设定本虚拟主机的访问日志    access_log  logs/www.xx.com.access.log  main;    #默认请求    location / {          root   /root;      #定义服务器的默认网站根目录位置          index index.php index.html index.htm;   #定义首页索引文件的名称          fastcgi_pass  www.xx.com;          fastcgi_param SCRIPT_FILENAME $document_root/$fastcgi_script_name;          include /etc/nginx/fastcgi_params;     }    # 定义错误提示页面    error_page   500 502 503 504 /50x.html;     location = /50x.html {    root   /root;    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>请求转向指令_proxy<em>pass</em></p><pre class="line-numbers language-none"><code class="language-none">proxy_pass http://www.baidu.com;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nginx event配置指令</title>
      <link href="/2019/09/23/nginxevent-pei-zhi-zhi-ling/"/>
      <url>/2019/09/23/nginxevent-pei-zhi-zhi-ling/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><p>　　参考事件模型指令：<em>use [ kqueue | rtsig | epoll | /dev/poll | select | poll ];</em></p><pre class="line-numbers language-none"><code class="language-none">use epoll;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>　　注：epoll模型是Linux 2.6以上版本内核中的高性能网络I/O模型，如果跑在FreeBSD上面，就用kqueue模型。</p><p>　　设置单个进程最大连接数用指令：_worker<em>connections</em>（最大连接数=连接数*进程数）</p><pre class="line-numbers language-none"><code class="language-none">worker_connections 65535;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nginx  main配置指令</title>
      <link href="/2019/09/23/nginxmain-pei-zhi-zhi-ling/"/>
      <url>/2019/09/23/nginxmain-pei-zhi-zhi-ling/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><p>　　定义Nginx运行的用户和用户组用<em>user</em>指令。</p><pre class="line-numbers language-none"><code class="language-none">user www-data;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>　　定义nginx进程数，用_worker<em>processes</em>指令，建议设置为等于CPU总核心数。</p><pre class="line-numbers language-none"><code class="language-none">worker_processes 8;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>　　全局错误日志定义类型，[ debug | info | notice | warn | error | crit ]用_error<em>log</em>指令。另外日志还可以定义在http、server及location上下文中，语法格式一样。</p><pre class="line-numbers language-none"><code class="language-none">error_log /var/log/nginx/error.log info;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>　　定义进程文件用<em>pid</em>指令</p><pre class="line-numbers language-none"><code class="language-none">pid /var/run/nginx.pid;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>　　用_worker_rlimit<em>nofile</em>指令描述nginx进程打开的最多文件描述符的数目，建议设置为默认值。</p><pre class="line-numbers language-none"><code class="language-none">worker_rlimit_nofile 65535;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nginx.conf配置文件结构</title>
      <link href="/2019/09/23/nginx.conf-pei-zhi-wen-jian-jie-gou/"/>
      <url>/2019/09/23/nginx.conf-pei-zhi-wen-jian-jie-gou/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>　Nginx的核心模块为<em>Main</em>和<em>Events</em>，此外还包括标准<em>HTTP模块</em>、可选<em>HTTP模块</em>和<em>邮件模块</em>，其还可以支持诸多第三方模块。Main用于配置错误日志、进程及权限等相关的参数，Events用于配置IO模型，如epoll、kqueue、select或poll等，它们是必备模块，HTTP模块用于控制Nginx的HTTP进程。</p><p>　　Nginx的主配置文件由几个段组成，这个段通常也被称为nginx的上下文，每个段的定义格式如下所示。需要注意的是，其每一个指令都必须使用分号(<em>;</em>)结束，否则为语法错误。</p><pre class="line-numbers language-none"><code class="language-none">&lt;section&gt; {     &lt;directive&gt; &lt;parameters&gt;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>主要结构（所有配置以分号结尾）如下：</p><pre class="line-numbers language-none"><code class="language-none">## Main段，定义全局属性events {          ##定义不同IO模型下的工作机制；}http {     ##定义作为web服务器的相关属性（还可以反向代理mail）    server {         ##定义一个虚拟主机的属性，所有web服务必须定义成一个虚拟主机，与httpd不同        location [option] uri {             ##定义一个URI的特性            ##location中可以嵌套location的            location [option] uri {                 #嵌套location            }               if (condition) {                ##定义URL重写            }        }    }    upstream  &amp;ltName&amp;gt {        ##将多个server结合在一起，实现负载均衡    } }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nginx配置系统</title>
      <link href="/2019/09/23/nginx-pei-zhi-xi-tong/"/>
      <url>/2019/09/23/nginx-pei-zhi-xi-tong/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>　　nginx的配置系统由一个主配置文件和其他一些辅助的配置文件构成。这些配置文件均是纯文本文件，全部位于nginx安装目录下的conf目录下。</p><p>　　配置文件中以*#*开始的行，或者是前面有若干空格或者TAB，然后再跟#的行，都被认为是注释，也就是只对编辑查看文件的用户有意义，程序在读取这些注释行的时候，其实际的内容是被忽略的。</p><p>　　由于除主配置文件nginx.conf以外的文件都是在某些情况下才使用的，而只有主配置文件是在任何情况下都被使用的。所以在这里我们就以主配置文件为例，来解释nginx的配置系统。</p><p>在nginx.conf中，包含若干配置项。每个配置项由<em>配置指令</em>和_指令参数<em>2个部分构成。</em>指令参数_也就是配置指令对应的配置值。</p><p>　　<em>配置指令</em>是一个字符串，可以用单引号或者双引号括起来，也可以不括。但是如果配置指令包含空格，一定要引起来。</p><p>　　指令的参数使用一个或者多个空格或者TAB字符与指令分开。指令的参数有一个或者多个Token串组成。Token串之间由空格或者Tab键分隔。</p>]]></content>
      
      
      <categories>
          
          <category> nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nginx初体验</title>
      <link href="/2019/09/23/nginx-chu-ti-yan/"/>
      <url>/2019/09/23/nginx-chu-ti-yan/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>当我们安装完nginx后，我们首先进入nginx的安装目录，启动nginx的服务，然后在地址中输入 <a href="http://127.0.0.1/">http://127.0.0.1/</a> ， 然后我们就会看到”<em>welcome to nginx</em>“。<br>　　下面的代码为nginx.conf配置文件中的server段的默认配置，nginx所实现的功能都基于这个文件。我们将在后面的内容中继续进行讲解。</p><pre class="line-numbers language-none"><code class="language-none"> server {   listen       80;   server_name  localhost;   #charset koi8-r;   #access_log  logs/host.access.log  main;   location / {           root   /root;      #定义服务器的默认网站根目录位置           index index.php index.html index.htm;   #定义首页索引文件的名称   }   #error_page  404              /404.html;   # redirect server error pages to the static page /50x.html   error_page   500 502 503 504  /50x.html;   location = /50x.html {           root   html;   }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nginx常用命令</title>
      <link href="/2019/09/23/nginx-chang-yong-ming-ling/"/>
      <url>/2019/09/23/nginx-chang-yong-ming-ling/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>1.nginx启动</p><pre class="line-numbers language-none"><code class="language-none">nginx   -c /etc/nginx/nginx.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其中参数-c指定nginx启动时加载的配置文件，当然也可以不指定配置文件，省略-c，也可以启动，表示使用默认的配置文件。</p><pre class="line-numbers language-none"><code class="language-none">nginx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2.nginx停止(三种方式任选其一)</p><pre class="line-numbers language-none"><code class="language-none">nginx -s stop nginx -s quit pkill -9 nginx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>　　例如在我们的编辑环境中已经安装好了nginx,并且已启动,在命令提示符下直接输入nginx -s stop就可以停止了。</p><p>3.nginx重载配置</p><pre class="line-numbers language-none"><code class="language-none">nginx -s reload<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>4.检查配置文件是否正确</p><pre class="line-numbers language-none"><code class="language-none">nginx -t<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nginx概述</title>
      <link href="/2019/09/23/nginx-gai-shu/"/>
      <url>/2019/09/23/nginx-gai-shu/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><pre><code>Nginx ("engine x") 是一个高性能的 HTTP 和 *反向代理* 服务器，也是一个 IMAP/POP3/SMTP *代理服务器*。 Nginx 是由 Igor Sysoev 为*俄罗斯*访问量第二的 Rambler.ru 站点开发的，第一个公开版本0.1.0发布于2004年10月4日。其将源代码以类BSD许可证的形式发布，因它的稳定性、丰富的功能集、示例配置文件和低系统资源的消耗而闻名。2011年6月1日，nginx 1.0.4发布。Nginx是一款轻量级的Web 服务器/反向代理服务器及电子邮件（IMAP/POP3）代理服务器，并在一个BSD-like 协议下发行。由俄罗斯的程序设计师Igor Sysoev所开发，供俄国大型的入口网站及搜索引擎Rambler（俄文：Рамблер）使用。其特点是占有内存少，并发能力强，事实上nginx的并发能力确实在同类型的网页服务器中表现较好，中国大陆使用nginx网站用户有：新浪、网易、腾讯等。</code></pre>]]></content>
      
      
      <categories>
          
          <category> nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux日常巡检shell</title>
      <link href="/2019/09/19/linux-ri-chang-xun-jian-shell/"/>
      <url>/2019/09/19/linux-ri-chang-xun-jian-shell/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><pre class="line-numbers language-none"><code class="language-none">#!/bin/bash#################################################################### Functions: this script from polling system status# Info: be suitable for CentOS/RHEL 6/7 # Changelog:#      2019-01-30    haodexuan     initial commit####################################################################set path env,if not set will some command not found in crontabexport PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin:/root/binsource /etc/profile# run this script use root[ $(id -u) -gt 0 ] &amp;&amp; echo "please use root run the script! " &amp;&amp; exit 1# check system  versionOS_Version=$(awk '{print $(NF-1)}' /etc/redhat-release)# declare script version dateScript_Version="2019.01.30"# define polling log pathLOGPATH=/home/logs/polling[ -d $LOGPATH ] || mkdir -p $LOGPATHRESULTFILE="$LOGPATH/HostDailyCheck-`hostname`-`date +%Y%m%d`.txt"# define globle variablereport_DateTime=""    #日期 okreport_Hostname=""    #主机名 okreport_OSRelease=""    #发行版本 okreport_Kernel=""    #内核 okreport_Language=""    #语言/编码 okreport_LastReboot=""    #最近启动时间 okreport_Uptime=""    #运行时间（天） okreport_CPUs=""    #CPU数量 okreport_CPUType=""    #CPU类型 okreport_Arch=""    #CPU架构 okreport_MemTotal=""    #内存总容量(MB) okreport_MemFree=""    #内存剩余(MB) okreport_MemUsedPercent=""    #内存使用率% okreport_DiskTotal=""    #硬盘总容量(GB) okreport_DiskFree=""    #硬盘剩余(GB) okreport_DiskUsedPercent=""    #硬盘使用率% okreport_InodeTotal=""    #Inode总量 okreport_InodeFree=""    #Inode剩余 okreport_InodeUsedPercent=""    #Inode使用率 okreport_IP=""    #IP地址 okreport_MAC=""    #MAC地址 okreport_Gateway=""    #默认网关 okreport_DNS=""    #DNS okreport_Listen=""    #监听 okreport_Selinux=""    #Selinux okreport_Firewall=""    #防火墙 okreport_USERs=""    #用户 okreport_USEREmptyPassword=""   #空密码用户 okreport_USERTheSameUID=""      #相同ID的用户 ok report_PasswordExpiry=""    #密码过期（天） okreport_RootUser=""    #root用户 okreport_Sudoers=""    #sudo授权  okreport_SSHAuthorized=""    #SSH信任主机 okreport_SSHDProtocolVersion=""    #SSH协议版本 okreport_SSHDPermitRootLogin=""    #允许root远程登录 okreport_DefunctProsess=""    #僵尸进程数量 okreport_SelfInitiatedService=""    #自启动服务数量 okreport_SelfInitiatedProgram=""    #自启动程序数量 okreport_RuningService=""           #运行中服务数  okreport_Crontab=""    #计划任务数 okreport_Syslog=""    #日志服务 okreport_SNMP=""    #SNMP  OKreport_NTP=""    #NTP okreport_JDK=""    #JDK版本 okfunction version(){    echo ""    echo "System Polling：Version $Script_Version "    echo ""}function getCpuStatus(){    echo ""    echo "############################ Check CPU Status#############################"    Physical_CPUs=$(grep "physical id" /proc/cpuinfo| sort | uniq | wc -l)    Virt_CPUs=$(grep "processor" /proc/cpuinfo | wc -l)    CPU_Kernels=$(grep "cores" /proc/cpuinfo|uniq| awk -F ': ' '{print $2}')    CPU_Type=$(grep "model name" /proc/cpuinfo | awk -F ': ' '{print $2}' | sort | uniq)    CPU_Arch=$(uname -m)    echo "物理CPU个数:$Physical_CPUs"    echo "逻辑CPU个数:$Virt_CPUs"    echo "每CPU核心数:$CPU_Kernels"    echo "    CPU型号:$CPU_Type"    echo "    CPU架构:$CPU_Arch"    # report information    report_CPUs=$Virt_CPUs    #CPU数量    report_CPUType=$CPU_Type  #CPU类型    report_Arch=$CPU_Arch     #CPU架构}function getMemStatus(){    echo ""    echo "############################ Check Memmory Usage ###########################"    if [[ $OS_Version &lt; 7 ]];then        free -mo    else        free -h    fi    # report information    MemTotal=$(grep MemTotal /proc/meminfo| awk '{print $2}')  #KB    MemFree=$(grep MemFree /proc/meminfo| awk '{print $2}')    #KB    let MemUsed=MemTotal-MemFree    MemPercent=$(awk "BEGIN {if($MemTotal==0){printf 100}else{printf \"%.2f\",$MemUsed*100/$MemTotal}}")    report_MemTotal="$((MemTotal/1024))""MB"        #内存总容量(MB)    report_MemFree="$((MemFree/1024))""MB"          #内存剩余(MB)    report_MemUsedPercent="$(awk "BEGIN {if($MemTotal==0){printf 100}else{printf \"%.2f\",$MemUsed*100/$MemTotal}}")""%"   #内存使用率%}function getDiskStatus(){    echo ""    echo "############################ Check Disk Status ############################"    df -hiP | sed 's/Mounted on/Mounted/' &gt; /tmp/inode    df -hTP | sed 's/Mounted on/Mounted/' &gt; /tmp/disk     join /tmp/disk /tmp/inode | awk '{print $1,$2,"|",$3,$4,$5,$6,"|",$8,$9,$10,$11,"|",$12}'| column -t    # report information    diskdata=$(df -TP | sed '1d' | awk '$2!="tmpfs"{print}') #KB    disktotal=$(echo "$diskdata" | awk '{total+=$3}END{print total}') #KB    diskused=$(echo "$diskdata" | awk '{total+=$4}END{print total}')  #KB    diskfree=$((disktotal-diskused)) #KB    diskusedpercent=$(echo $disktotal $diskused | awk '{if($1==0){printf 100}else{printf "%.2f",$2*100/$1}}')     inodedata=$(df -iTP | sed '1d' | awk '$2!="tmpfs"{print}')    inodetotal=$(echo "$inodedata" | awk '{total+=$3}END{print total}')    inodeused=$(echo "$inodedata" | awk '{total+=$4}END{print total}')    inodefree=$((inodetotal-inodeused))    inodeusedpercent=$(echo $inodetotal $inodeused | awk '{if($1==0){printf 100}else{printf "%.2f",$2*100/$1}}')    report_DiskTotal=$((disktotal/1024/1024))"GB"   #硬盘总容量(GB)    report_DiskFree=$((diskfree/1024/1024))"GB"     #硬盘剩余(GB)    report_DiskUsedPercent="$diskusedpercent""%"    #硬盘使用率%    report_InodeTotal=$((inodetotal/1000))"K"       #Inode总量    report_InodeFree=$((inodefree/1000))"K"         #Inode剩余    report_InodeUsedPercent="$inodeusedpercent""%"  #Inode使用率%    echo ""}function getSystemStatus(){    echo ""    echo "############################ Check System Status ############################"    if [ -e /etc/sysconfig/i18n ];then        default_LANG="$(grep "LANG=" /etc/sysconfig/i18n | grep -v "^#" | awk -F '"' '{print $2}')"    else        default_LANG=$LANG    fi    export LANG="en_US.UTF-8"    Release=$(cat /etc/redhat-release 2&gt;/dev/null)    Kernel=$(uname -r)    OS=$(uname -o)    Hostname=$(uname -n)    SELinux=$(/usr/sbin/sestatus | grep "SELinux status: " | awk '{print $3}')    LastReboot=$(who -b | awk '{print $3,$4}')    uptime=$(uptime | sed 's/.*up [,]∗, .*/\1/')    echo "     系统：$OS"    echo " 发行版本：$Release"    echo "     内核：$Kernel"    echo "   主机名：$Hostname"    echo "  SELinux：$SELinux"    echo "语言/编码：$default_LANG"    echo " 当前时间：$(date +'%F %T')"    echo " 最后启动：$LastReboot"    echo " 运行时间：$uptime"    # report information    report_DateTime=$(date +"%F %T")  #日期    report_Hostname="$Hostname"       #主机名    report_OSRelease="$Release"       #发行版本    report_Kernel="$Kernel"           #内核    report_Language="$default_LANG"   #语言/编码    report_LastReboot="$LastReboot"   #最近启动时间    report_Uptime="$uptime"           #运行时间（天）    report_Selinux="$SELinux"    export LANG="$default_LANG"    echo ""}function getServiceStatus(){    echo ""    echo "############################ Check Service Status ############################"    if [[ $OS_Version &gt; 7 ]];then        conf=$(systemctl list-unit-files --type=service --state=enabled --no-pager | grep "enabled")        process=$(systemctl list-units --type=service --state=running --no-pager | grep ".service")        # report information        report_SelfInitiatedService="$(echo "$conf" | wc -l)"       #自启动服务数量        report_RuningService="$(echo "$process" | wc -l)"           #运行中服务数量    else        conf=$(/sbin/chkconfig | grep -E ":on|:启用")        process=$(/sbin/service --status-all 2&gt;/dev/null | grep -E "is running|正在运行")        # report information        report_SelfInitiatedService="$(echo "$conf" | wc -l)"       #自启动服务数量        report_RuningService="$(echo "$process" | wc -l)"           #运行中服务数量    fi    echo "Service Configure"    echo "--------------------------------"    echo "$conf" | column -t    echo ""    echo "The Running Services"    echo "--------------------------------"    echo "$process"}function getAutoStartStatus(){    echo ""    echo "############################ Check Self-starting Services ##########################"    conf=$(grep -v "^#" /etc/rc.d/rc.local| sed '/^$/d')    echo "$conf"    # report information    report_SelfInitiatedProgram="$(echo $conf | wc -l)"    #自启动程序数量}function getLoginStatus(){    echo ""    echo "############################ Check Login In ############################"    last | head}function getNetworkStatus(){    echo ""    echo "############################ Check Network ############################"    if [[ $OS_Version &lt; 7 ]];then        /sbin/ifconfig -a | grep -v packets | grep -v collisions | grep -v inet6    else        #ip address        for i in $(ip link | grep BROADCAST | awk -F: '{print $2}');do ip add show $i | grep -E "BROADCAST|global"| awk '{print $2}' | tr '\n' ' ' ;echo "" ;done    fi    GATEWAY=$(ip route | grep default | awk '{print $3}')    DNS=$(grep nameserver /etc/resolv.conf| grep -v "#" | awk '{print $2}' | tr '\n' ',' | sed 's/,$//')    echo ""    echo "Gateway: $GATEWAY "    echo " DNS: $DNS"    # report information    IP=$(ip -f inet addr | grep -v 127.0.0.1 |  grep inet | awk '{print $NF,$2}' | tr '\n' ',' | sed 's/,$//')    MAC=$(ip link | grep -v "LOOPBACK\|loopback" | awk '{print $2}' | sed 'N;s/\n//' | tr '\n' ',' | sed 's/,$//')    report_IP="$IP"            #IP地址    report_MAC=$MAC            #MAC地址    report_Gateway="$GATEWAY"  #默认网关    report_DNS="$DNS"          #DNS}function getListenStatus(){    echo ""    echo "############################ Check Connect Status ############################"#    TCPListen=$(ss -ntul | column -t)    TCPListen=$(netstat -ntulp | column -t)    AllConnect=$(ss -an | awk 'NR&gt;1 {++s[$1]} END {for(k in s) print k,s[k]}' | column -t)    echo "$TCPListen"    echo "$AllConnect"    # report information    report_Listen="$(echo "$TCPListen"| sed '1d' | awk '/tcp/ {print $5}' | awk -F: '{print $NF}' | sort | uniq | wc -l)"}function getCronStatus(){    echo ""    echo "############################ Check Crontab ########################"    Crontab=0    for shell in $(grep -v "/sbin/nologin" /etc/shells);do        for user in $(grep "$shell" /etc/passwd | awk -F: '{print $1}');do            crontab -l -u $user &gt;/dev/null 2&gt;&amp;1            status=$?            if [ $status -eq 0 ];then                echo "$user"                echo "-------------"                crontab -l -u $user                let Crontab=Crontab+$(crontab -l -u $user | wc -l)                echo ""            fi        done    done    # scheduled task    find /etc/cron* -type f | xargs -i ls -l {} | column  -t    let Crontab=Crontab+$(find /etc/cron* -type f | wc -l)    # report information    report_Crontab="$Crontab"    #计划任务数}function getHowLongAgo(){    # 计算一个时间戳离现在有多久了    datetime="$*"    [ -z "$datetime" ] &amp;&amp; echo "错误的参数：getHowLongAgo() $*"    Timestamp=$(date +%s -d "$datetime")    #转化为时间戳    Now_Timestamp=$(date +%s)    Difference_Timestamp=$(($Now_Timestamp-$Timestamp))    days=0;hours=0;minutes=0;    sec_in_day=$((60*60*24));    sec_in_hour=$((60*60));    sec_in_minute=60    while (( $(($Difference_Timestamp-$sec_in_day)) &gt; 1 ))    do        let Difference_Timestamp=Difference_Timestamp-sec_in_day        let days++    done    while (( $(($Difference_Timestamp-$sec_in_hour)) &gt; 1 ))    do        let Difference_Timestamp=Difference_Timestamp-sec_in_hour        let hours++    done    echo "$days 天 $hours 小时前"}function getUserLastLogin(){    # 获取用户最近一次登录的时间，含年份    # 很遗憾last命令不支持显示年份，只有"last -t YYYYMMDDHHMMSS"表示某个时间之间的登录，我    # 们只能用最笨的方法了，对比今天之前和今年元旦之前（或者去年之前和前年之前……）某个用户    # 登录次数，如果登录统计次数有变化，则说明最近一次登录是今年。    username=$1    : ${username:="`whoami`"}    thisYear=$(date +%Y)    oldesYear=$(last | tail -n1 | awk '{print $NF}')    while(( $thisYear &gt;= $oldesYear));do        loginBeforeToday=$(last $username | grep $username | wc -l)        loginBeforeNewYearsDayOfThisYear=$(last $username -t $thisYear"0101000000" | grep $username | wc -l)        if [ $loginBeforeToday -eq 0 ];then            echo "Never Login"            break        elif [ $loginBeforeToday -gt $loginBeforeNewYearsDayOfThisYear ];then            lastDateTime=$(last -i $username | head -n1 | awk '{for(i=4;i&lt;(NF-2);i++)printf"%s ",$i}')" $thisYear" #格式如: Sat Nov 2 20:33 2015            lastDateTime=$(date "+%Y-%m-%d %H:%M:%S" -d "$lastDateTime")            echo "$lastDateTime"            break        else            thisYear=$((thisYear-1))        fi    done}function getUserStatus(){    echo ""    echo "############################ Check User ############################"    # /etc/passwd the last modification time    pwdfile="$(cat /etc/passwd)"    Modify=$(stat /etc/passwd | grep Modify | tr '.' ' ' | awk '{print $2,$3}')    echo "/etc/passwd The last modification time：$Modify ($(getHowLongAgo $Modify))"    echo ""    echo "A privileged user"    echo "-----------------"    RootUser=""    for user in $(echo "$pwdfile" | awk -F: '{print $1}');do        if [ $(id -u $user) -eq 0 ];then            echo "$user"            RootUser="$RootUser,$user"        fi    done    echo ""    echo "User List"    echo "--------"    USERs=0    echo "$(    echo "UserName UID GID HOME SHELL LasttimeLogin"    for shell in $(grep -v "/sbin/nologin" /etc/shells);do        for username in $(grep "$shell" /etc/passwd| awk -F: '{print $1}');do            userLastLogin="$(getUserLastLogin $username)"            echo "$pwdfile" | grep -w "$username" |grep -w "$shell"| awk -F: -v lastlogin="$(echo "$userLastLogin" | tr ' ' '_')" '{print $1,$3,$4,$6,$7,lastlogin}'        done        let USERs=USERs+$(echo "$pwdfile" | grep "$shell"| wc -l)    done    )" | column -t    echo ""    echo "Null Password User"    echo "------------------"    USEREmptyPassword=""    for shell in $(grep -v "/sbin/nologin" /etc/shells);do            for user in $(echo "$pwdfile" | grep "$shell" | cut -d: -f1);do            r=$(awk -F: '$2=="!!"{print $1}' /etc/shadow | grep -w $user)            if [ ! -z $r ];then                echo $r                USEREmptyPassword="$USEREmptyPassword,"$r            fi        done        done    echo ""    echo "The Same UID User"    echo "----------------"    USERTheSameUID=""    UIDs=$(cut -d: -f3 /etc/passwd | sort | uniq -c | awk '$1&gt;1{print $2}')    for uid in $UIDs;do        echo -n "$uid";        USERTheSameUID="$uid"        r=$(awk -F: 'ORS="";$3=='"$uid"'{print ":",$1}' /etc/passwd)        echo "$r"        echo ""        USERTheSameUID="$USERTheSameUID $r,"    done    # report information    report_USERs="$USERs"    #用户    report_USEREmptyPassword=$(echo $USEREmptyPassword | sed 's/^,//')     report_USERTheSameUID=$(echo $USERTheSameUID | sed 's/,$//')     report_RootUser=$(echo $RootUser | sed 's/^,//')    #特权用户}function getPasswordStatus {    echo ""    echo "############################ Check Password Status ############################"    pwdfile="$(cat /etc/passwd)"    echo ""    echo "Password Expiration Check"    echo "-------------------------"    result=""    for shell in $(grep -v "/sbin/nologin" /etc/shells);do        for user in $(echo "$pwdfile" | grep "$shell" | cut -d: -f1);do            get_expiry_date=$(/usr/bin/chage -l $user | grep 'Password expires' | cut -d: -f2)            if [[ $get_expiry_date = ' never' || $get_expiry_date = 'never' ]];then                printf "%-15s never expiration\n" $user                result="$result,$user:never"            else                password_expiry_date=$(date -d "$get_expiry_date" "+%s")                current_date=$(date "+%s")                diff=$(($password_expiry_date-$current_date))                let DAYS=$(($diff/(60*60*24)))                printf "%-15s %s expiration after days\n" $user $DAYS                result="$result,$user:$DAYS days"            fi        done    done    report_PasswordExpiry=$(echo $result | sed 's/^,//')    echo ""    echo "Check The Password Policy"    echo "------------"    grep -v "#" /etc/login.defs | grep -E "PASS_MAX_DAYS|PASS_MIN_DAYS|PASS_MIN_LEN|PASS_WARN_AGE"    echo ""}function getSudoersStatus(){    echo ""    echo "############################ Sudoers Check #########################"    conf=$(grep -v "^#" /etc/sudoers| grep -v "^Defaults" | sed '/^$/d')    echo "$conf"    echo ""    # report information    report_Sudoers="$(echo $conf | wc -l)"}function getInstalledStatus(){    echo ""    echo "############################ Software Check ############################"    rpm -qa --last | head | column -t }function getProcessStatus(){    echo ""    echo "############################ Process Check ############################"    if [ $(ps -ef | grep defunct | grep -v grep | wc -l) -ge 1 ];then        echo ""        echo "zombie process";        echo "--------"        ps -ef | head -n1        ps -ef | grep defunct | grep -v grep    fi    echo ""    echo "Merory Usage TOP10"    echo "-------------"    echo -e "PID %MEM RSS COMMAND    $(ps aux | awk '{print $2, $4, $6, $11}' | sort -k3rn | head -n 10 )"| column -t     echo ""    echo "CPU Usage TOP10"    echo "------------"    top b -n1 | head -17 | tail -11    # report information    report_DefunctProsess="$(ps -ef | grep defunct | grep -v grep|wc -l)"}function getJDKStatus(){    echo ""    echo "############################ JDK Check #############################"    java -version 2&gt;/dev/null    if [ $? -eq 0 ];then        java -version 2&gt;&amp;1    fi    echo "JAVA_HOME=\"$JAVA_HOME\""    # report information    report_JDK="$(java -version 2&gt;&amp;1 | grep version | awk '{print $1,$3}' | tr -d '"')"}function getSyslogStatus(){    echo ""    echo "############################ Syslog Check ##########################"    echo "Service Status：$(getState rsyslog)"    echo ""    echo "/etc/rsyslog.conf"    echo "-----------------"    cat /etc/rsyslog.conf 2&gt;/dev/null | grep -v "^#" | grep -v "^\\$" | sed '/^$/d'  | column -t    #report information    report_Syslog="$(getState rsyslog)"}function getFirewallStatus(){    echo ""    echo "############################ Firewall Check ##########################"    # Firewall Status/Poilcy    if [[ $OS_Version &lt; 7 ]];then        /etc/init.d/iptables status &gt;/dev/null  2&gt;&amp;1        status=$?        if [ $status -eq 0 ];then                s="active"        elif [ $status -eq 3 ];then                s="inactive"        elif [ $status -eq 4 ];then                s="permission denied"        else                s="unknown"        fi    else        s="$(getState iptables)"    fi    echo "iptables: $s"    echo ""    echo "/etc/sysconfig/iptables"    echo "-----------------------"    cat /etc/sysconfig/iptables 2&gt;/dev/null    # report information    report_Firewall="$s"}function getSNMPStatus(){    #SNMP Service Status,Configure    echo ""    echo "############################ SNMP Check ############################"    status="$(getState snmpd)"    echo "Service Status：$status"    echo ""    if [ -e /etc/snmp/snmpd.conf ];then        echo "/etc/snmp/snmpd.conf"        echo "--------------------"        cat /etc/snmp/snmpd.conf 2&gt;/dev/null | grep -v "^#" | sed '/^$/d'    fi    # report information    report_SNMP="$(getState snmpd)"}function getState(){    if [[ $OS_Version &lt; 7 ]];then        if [ -e "/etc/init.d/$1" ];then            if [ `/etc/init.d/$1 status 2&gt;/dev/null | grep -E "is running|正在运行" | wc -l` -ge 1 ];then                r="active"            else                r="inactive"            fi        else            r="unknown"        fi    else        #CentOS 7+        r="$(systemctl is-active $1 2&gt;&amp;1)"    fi    echo "$r"}function getSSHStatus(){    #SSHD Service Status,Configure    echo ""    echo "############################ SSH Check #############################"    # Check the trusted host    pwdfile="$(cat /etc/passwd)"    echo "Service Status：$(getState sshd)"    Protocol_Version=$(cat /etc/ssh/sshd_config | grep Protocol | awk '{print $2}')    echo "SSH Protocol Version：$Protocol_Version"    echo ""    echo "Trusted Host"    echo "------------"    authorized=0    for user in $(echo "$pwdfile" | grep /bin/bash | awk -F: '{print $1}');do        authorize_file=$(echo "$pwdfile" | grep -w $user | awk -F: '{printf $6"/.ssh/authorized_keys"}')        authorized_host=$(cat $authorize_file 2&gt;/dev/null | awk '{print $3}' | tr '\n' ',' | sed 's/,$//')        if [ ! -z $authorized_host ];then            echo "$user authorization \"$authorized_host\" Password-less access"        fi        let authorized=authorized+$(cat $authorize_file 2&gt;/dev/null | awk '{print $3}'|wc -l)    done    echo ""    echo "Whether to allow ROOT remote login"    echo "----------------------------------"    config=$(cat /etc/ssh/sshd_config | grep PermitRootLogin)    firstChar=${config:0:1}    if [ $firstChar == "#" ];then        PermitRootLogin="yes"  #The default is to allow ROOT remote login    else        PermitRootLogin=$(echo $config | awk '{print $2}')    fi    echo "PermitRootLogin $PermitRootLogin"    echo ""    echo "/etc/ssh/sshd_config"    echo "--------------------"    cat /etc/ssh/sshd_config | grep -v "^#" | sed '/^$/d'    # report information    report_SSHAuthorized="$authorized"    #SSH信任主机    report_SSHDProtocolVersion="$Protocol_Version"    #SSH协议版本    report_SSHDPermitRootLogin="$PermitRootLogin"    #允许root远程登录}function getNTPStatus(){    # The NTP service status, the current time, configuration, etc    echo ""    echo "############################ NTP Check #############################"    if [ -e /etc/ntp.conf ];then        echo "Service Status：$(getState ntpd)"        echo ""        echo "/etc/ntp.conf"        echo "-------------"        cat /etc/ntp.conf 2&gt;/dev/null | grep -v "^#" | sed '/^$/d'    fi    # report information    report_NTP="$(getState ntpd)"}function getZabbixStatus(){    # Check Zabbix Serivce Status    echo ""    echo "######################### Zabbix Check ##############################"    netstat -nltp | grep -v grep | grep zabbix &gt; /dev/null 2&gt;&amp;1    if [ $? -eq 0 ];then       echo "Service Status": Zabbix is running!    else       echo "Service Status": Zabbix not running!    fi    # report information}function uploadHostDailyCheckReport(){    json="{        \"DateTime\":\"$report_DateTime\",        \"Hostname\":\"$report_Hostname\",        \"OSRelease\":\"$report_OSRelease\",        \"Kernel\":\"$report_Kernel\",        \"Language\":\"$report_Language\",        \"LastReboot\":\"$report_LastReboot\",        \"Uptime\":\"$report_Uptime\",        \"CPUs\":\"$report_CPUs\",        \"CPUType\":\"$report_CPUType\",        \"Arch\":\"$report_Arch\",        \"MemTotal\":\"$report_MemTotal\",        \"MemFree\":\"$report_MemFree\",        \"MemUsedPercent\":\"$report_MemUsedPercent\",        \"DiskTotal\":\"$report_DiskTotal\",        \"DiskFree\":\"$report_DiskFree\",        \"DiskUsedPercent\":\"$report_DiskUsedPercent\",        \"InodeTotal\":\"$report_InodeTotal\",        \"InodeFree\":\"$report_InodeFree\",        \"InodeUsedPercent\":\"$report_InodeUsedPercent\",        \"IP\":\"$report_IP\",        \"MAC\":\"$report_MAC\",        \"Gateway\":\"$report_Gateway\",        \"DNS\":\"$report_DNS\",        \"Listen\":\"$report_Listen\",        \"Selinux\":\"$report_Selinux\",        \"Firewall\":\"$report_Firewall\",        \"USERs\":\"$report_USERs\",        \"USEREmptyPassword\":\"$report_USEREmptyPassword\",        \"USERTheSameUID\":\"$report_USERTheSameUID\",        \"PasswordExpiry\":\"$report_PasswordExpiry\",        \"RootUser\":\"$report_RootUser\",        \"Sudoers\":\"$report_Sudoers\",        \"SSHAuthorized\":\"$report_SSHAuthorized\",        \"SSHDProtocolVersion\":\"$report_SSHDProtocolVersion\",        \"SSHDPermitRootLogin\":\"$report_SSHDPermitRootLogin\",        \"DefunctProsess\":\"$report_DefunctProsess\",        \"SelfInitiatedService\":\"$report_SelfInitiatedService\",        \"SelfInitiatedProgram\":\"$report_SelfInitiatedProgram\",        \"RuningService\":\"$report_RuningService\",        \"Crontab\":\"$report_Crontab\",        \"Syslog\":\"$report_Syslog\",        \"SNMP\":\"$report_SNMP\",        \"NTP\":\"$report_NTP\",        \"JDK\":\"$report_JDK\"    }"    #echo "$json"     curl -l -H "Content-type: application/json" -X POST -d "$json" "$uploadHostDailyCheckReportApi" 2&gt;/dev/null}function check(){    version    getSystemStatus    getCpuStatus    getMemStatus    getDiskStatus    getNetworkStatus    getListenStatus    getProcessStatus    getServiceStatus    getAutoStartStatus    getLoginStatus    getCronStatus    getUserStatus    getPasswordStatus    getSudoersStatus    getJDKStatus    getFirewallStatus    getSSHStatus    getSyslogStatus    getSNMPStatus    getNTPStatus    getZabbixStatus    getInstalledStatus}# Perform inspections and save the inspection results  #执行检查并保存检查结果check &gt; $RESULTFILEecho "Check the result：$RESULTFILE"# Upload the result file  #上传检查结果的文件#curl -F "filename=@$RESULTFILE" "$uploadHostDailyCheckApi" 2&gt;/dev/null#Upload inspection result report  #上传检查结果的报表#uploadHostDailyCheckReport 1&gt;/dev/null<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> shell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shell, 巡检 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>运维架构层级</title>
      <link href="/2019/09/19/yun-wei-jia-gou-ceng-ji/"/>
      <url>/2019/09/19/yun-wei-jia-gou-ceng-ji/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="https://img.hacpai.com/bing/20180330.jpg?imageView2/1/w/960/h/540/interlace/1/q/100"> </p><p><img src="https://img.hacpai.com/file/2019/09/image-08604d6b.png" alt="image.png"><br><img src="https://img.hacpai.com/file/2019/09/image-753a7fbe.png" alt="image.png"><br><img src="https://img.hacpai.com/file/2019/09/image-8a1fb5a5.png" alt="image.png"><br><img src="https://img.hacpai.com/file/2019/09/image-6fdcd397.png" alt="image.png"><br>来源：<a href="https://www.unixhot.com/page/ops">https://www.unixhot.com/page/ops</a></p>]]></content>
      
      
      <categories>
          
          <category> 架构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux运维 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker命令使用</title>
      <link href="/2019/09/19/docker-ming-ling-shi-yong/"/>
      <url>/2019/09/19/docker-ming-ling-shi-yong/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>docker01</p><h2 id="List-Docker-CLI-commands"><a href="#List-Docker-CLI-commands" class="headerlink" title="List Docker CLI commands"></a>List Docker CLI commands</h2><pre class="line-numbers language-none"><code class="language-none">docker container --help<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="Display-Docker-version-and-info"><a href="#Display-Docker-version-and-info" class="headerlink" title="Display Docker version and info"></a>Display Docker version and info</h2><pre class="line-numbers language-none"><code class="language-none">docker --versiondocker versiondocker info<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="Execute-Docker-image"><a href="#Execute-Docker-image" class="headerlink" title="Execute Docker image"></a>Execute Docker image</h2><pre class="line-numbers language-none"><code class="language-none">docker run hello-world<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="List-Docker-images"><a href="#List-Docker-images" class="headerlink" title="List Docker images"></a>List Docker images</h2><pre class="line-numbers language-none"><code class="language-none">docker image ls<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="List-Docker-containers-running-all-all-in-quiet-mode"><a href="#List-Docker-containers-running-all-all-in-quiet-mode" class="headerlink" title="List Docker containers (running, all, all in quiet mode)"></a>List Docker containers (running, all, all in quiet mode)</h2><pre class="line-numbers language-none"><code class="language-none">docker container lsdocker container ls --alldocker container ls -aq<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>docker02</p><h2 id="Create-image-using-this-directory’s-Dockerfile"><a href="#Create-image-using-this-directory’s-Dockerfile" class="headerlink" title="Create image using this directory’s Dockerfile"></a>Create image using this directory’s Dockerfile</h2><pre class="line-numbers language-none"><code class="language-none">docker build -t friendlyhello .  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="Run-“friendlyhello”-mapping-port-4000-to-80"><a href="#Run-“friendlyhello”-mapping-port-4000-to-80" class="headerlink" title="Run “friendlyhello” mapping port 4000 to 80"></a>Run “friendlyhello” mapping port 4000 to 80</h2><pre class="line-numbers language-none"><code class="language-none">docker run -p 4000:80 friendlyhello  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="Same-thing-but-in-detached-mode"><a href="#Same-thing-but-in-detached-mode" class="headerlink" title="Same thing, but in detached mode"></a>Same thing, but in detached mode</h2><pre class="line-numbers language-none"><code class="language-none">docker run -d -p 4000:80 friendlyhello <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="List-all-running-containers"><a href="#List-all-running-containers" class="headerlink" title="List all running containers"></a>List all running containers</h2><pre class="line-numbers language-none"><code class="language-none">docker container ls     <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="List-all-containers-even-those-not-running"><a href="#List-all-containers-even-those-not-running" class="headerlink" title="List all containers, even those not running"></a>List all containers, even those not running</h2><pre class="line-numbers language-none"><code class="language-none">docker container ls -a     <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="Gracefully-stop-the-specified-container"><a href="#Gracefully-stop-the-specified-container" class="headerlink" title="Gracefully stop the specified container"></a>Gracefully stop the specified container</h2><pre class="line-numbers language-none"><code class="language-none">docker container stop &lt;hash&gt; <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="Force-shutdown-of-the-specified-container"><a href="#Force-shutdown-of-the-specified-container" class="headerlink" title="Force shutdown of the specified container"></a>Force shutdown of the specified container</h2><pre class="line-numbers language-none"><code class="language-none">docker container kill &lt;hash&gt; <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="Remove-specified-container-from-this-machine"><a href="#Remove-specified-container-from-this-machine" class="headerlink" title="Remove specified container from this machine"></a>Remove specified container from this machine</h2><pre class="line-numbers language-none"><code class="language-none">docker container rm &lt;hash&gt;     <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="Remove-all-containers"><a href="#Remove-all-containers" class="headerlink" title="Remove all containers"></a>Remove all containers</h2><pre class="line-numbers language-none"><code class="language-none">docker container rm $(docker container ls -a -q)   <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="List-all-images-on-this-machine"><a href="#List-all-images-on-this-machine" class="headerlink" title="List all images on this machine"></a>List all images on this machine</h2><pre class="line-numbers language-none"><code class="language-none">docker image ls -a  ```                     ## Remove specified image from this machine      <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>docker image rm <img id=""> </p><pre class="line-numbers language-none"><code class="language-none">## Remove all images from this machine   <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>docker image rm $(docker image ls -a -q)  </p><pre class="line-numbers language-none"><code class="language-none">## Log in this CLI session using your Docker credentials <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>docker login   </p><pre class="line-numbers language-none"><code class="language-none">## Tag &lt;image&gt; for upload to registry<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>docker tag <img> username/repository:tag  </p><pre class="line-numbers language-none"><code class="language-none">## Upload tagged image to registry<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>docker push username/repository:tag</p><pre class="line-numbers language-none"><code class="language-none">## Run image from a registry <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>docker run username/repository:tag<br>```  </p>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>快速shell安装docker-ce</title>
      <link href="/2019/09/19/kuai-su-shell-an-zhuang-dockerce/"/>
      <url>/2019/09/19/kuai-su-shell-an-zhuang-dockerce/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>我们以18.09.8为例，以下为详细shell：</p><pre class="line-numbers language-none"><code class="language-none">#!/bin/shset -eCHANNEL="stable"docker_version=18.09.8apt_url="https://apt.dockerproject.org"yum_url="https://yum.dockerproject.org"gpg_fingerprint="9DC858229FC7DD38854AE2D88D81803C0EBFCD88"key_servers="ha.pool.sks-keyservers.netpgp.mit.edukeyserver.ubuntu.com"rhel_repos="rhel-7-server-extras-rpmsrhui-REGION-rhel-server-extrasrhui-rhel-7-server-rhui-extras-rpmsrhui-rhel-7-for-arm-64-extras-rhui-rpms"mirror=''while [ $# -gt 0 ]; docase "$1" in--mirror)mirror="$2"shift;;*)echo "Illegal option $1";;esacshift $(( $# &gt; 0 ? 1 : 0 ))donecase "$mirror" inAzureChinaCloud)apt_url="https://mirror.azure.cn/docker-engine/apt"yum_url="https://mirror.azure.cn/docker-engine/yum";;Aliyun)apt_url="https://mirrors.aliyun.com/docker-engine/apt"yum_url="https://mirrors.aliyun.com/docker-engine/yum";;esaccommand_exists() {command -v "$@" &gt; /dev/null 2&gt;&amp;1}echo_docker_as_nonroot() {if command_exists docker &amp;&amp; [ -e /var/run/docker.sock ]; then(set -x$sh_c 'docker version') || truefiyour_user=your-user[ "$user" != 'root' ] &amp;&amp; your_user="$user"# intentionally mixed spaces and tabs here -- tabs are stripped by "&lt;&lt;-EOF", spaces are kept in the outputcat &lt;&lt;-EOFIf you would like to use Docker as a non-root user, you should now consideradding your user to the "docker" group with something like:  sudo usermod -aG docker $your_userRemember that you will have to log out and back in for this to take effect!WARNING: Adding a user to the "docker" group will grant the ability to run         containers which can be used to obtain root privileges on the         docker host.         Refer to https://docs.docker.com/engine/security/security/#docker-daemon-attack-surface         for more information.EOF}# Check if this is a forked Linux distrocheck_forked() {# Check for lsb_release command existence, it usually exists in forked distrosif command_exists lsb_release; then# Check if the `-u` option is supportedset +elsb_release -a -u &gt; /dev/null 2&gt;&amp;1lsb_release_exit_code=$?set -e# Check if the command has exited successfully, it means we're in a forked distroif [ "$lsb_release_exit_code" = "0" ]; then# Print info about current distrocat &lt;&lt;-EOFYou're using '$lsb_dist' version '$dist_version'.EOF# Get the upstream release infolsb_dist=$(lsb_release -a -u 2&gt;&amp;1 | tr '[:upper:]' '[:lower:]' | grep -E 'id' | cut -d ':' -f 2 | tr -d '[[:space:]]')dist_version=$(lsb_release -a -u 2&gt;&amp;1 | tr '[:upper:]' '[:lower:]' | grep -E 'codename' | cut -d ':' -f 2 | tr -d '[[:space:]]')# Print info about upstream distrocat &lt;&lt;-EOFUpstream release is '$lsb_dist' version '$dist_version'.EOFelseif [ -r /etc/debian_version ] &amp;&amp; [ "$lsb_dist" != "ubuntu" ] &amp;&amp; [ "$lsb_dist" != "raspbian" ]; then# We're Debian and don't even know it!lsb_dist=debiandist_version="$(cat /etc/debian_version | sed 's/\/.*//' | sed 's/\..*//')"case "$dist_version" in10)dist_version="buster";;9)dist_version="stretch";;8|'Kali Linux 2')dist_version="jessie";;7)dist_version="wheezy";;esacfififi}semverParse() {major="${1%%.*}"minor="${1#$major.}"minor="${minor%%.*}"patch="${1#$major.$minor.}"patch="${patch%%[-.]*}"}deprecation_notice() {echoechoecho "  WARNING: $1 is no longer updated @ $url"echo "           Installing the legacy docker-engine package..."echoechosleep 10;}do_install() {architecture=$(uname -m)case $architecture in# officially supportedamd64|aarch64|arm64|x86_64);;# unofficially supported with available repositoriesarmv6l|armv7l);;# unofficially supported without available repositoriesppc64le|s390x)cat 1&gt;&amp;2 &lt;&lt;-EOFError: This install script does not support $architecture, because no$architecture package exists in Docker's repositories.Other install options include checking your distribution's package repositoryfor a version of Docker, or building Docker from source.EOFexit 1;;# not supported*)cat &gt;&amp;2 &lt;&lt;-EOFError: $architecture is not a recognized platform.EOFexit 1;;esacif command_exists docker; thenversion="$(docker -v | cut -d ' ' -f3 | cut -d ',' -f1)"MAJOR_W=1MINOR_W=10semverParse $versionshouldWarn=0if [ $major -lt $MAJOR_W ]; thenshouldWarn=1fiif [ $major -le $MAJOR_W ] &amp;&amp; [ $minor -lt $MINOR_W ]; thenshouldWarn=1ficat &gt;&amp;2 &lt;&lt;-'EOF'Warning: the "docker" command appears to already exist on this system.If you already have Docker installed, this script can cause trouble, which iswhy we're displaying this warning and provide the opportunity to cancel theinstallation.If you installed the current Docker package using this script and are using itEOFif [ $shouldWarn -eq 1 ]; thencat &gt;&amp;2 &lt;&lt;-'EOF'again to update Docker, we urge you to migrate your image store before upgradingto v1.10+.You can find instructions for this here:https://github.com/docker/docker/wiki/Engine-v1.10.0-content-addressability-migrationEOFelsecat &gt;&amp;2 &lt;&lt;-'EOF'again to update Docker, you can safely ignore this message.EOFficat &gt;&amp;2 &lt;&lt;-'EOF'You may press Ctrl+C now to abort this script.EOF( set -x; sleep 20 )fiuser="$(id -un 2&gt;/dev/null || true)"sh_c='sh -c'if [ "$user" != 'root' ]; thenif command_exists sudo; thensh_c='sudo -E sh -c'elif command_exists su; thensh_c='su -c'elsecat &gt;&amp;2 &lt;&lt;-'EOF'Error: this installer needs the ability to run commands as root.We are unable to find either "sudo" or "su" available to make this happen.EOFexit 1fificurl=''if command_exists curl; thencurl='curl -sSL'elif command_exists wget; thencurl='wget -qO-'elif command_exists busybox &amp;&amp; busybox --list-modules | grep -q wget; thencurl='busybox wget -qO-'fi# check to see which repo they are trying to install fromif [ -z "$repo" ]; thenrepo='main'if [ "https://test.docker.com/" = "$url" ]; thenrepo='testing'elif [ "https://experimental.docker.com/" = "$url" ]; thenrepo='experimental'fifi# perform some very rudimentary platform detectionlsb_dist=''dist_version=''if command_exists lsb_release; thenlsb_dist="$(lsb_release -si)"fiif [ -z "$lsb_dist" ] &amp;&amp; [ -r /etc/lsb-release ]; thenlsb_dist="$(. /etc/lsb-release &amp;&amp; echo "$DISTRIB_ID")"fiif [ -z "$lsb_dist" ] &amp;&amp; [ -r /etc/debian_version ]; thenlsb_dist='debian'fiif [ -z "$lsb_dist" ] &amp;&amp; [ -r /etc/fedora-release ]; thenlsb_dist='fedora'fiif [ -z "$lsb_dist" ] &amp;&amp; [ -r /etc/oracle-release ]; thenlsb_dist='oracleserver'fiif [ -z "$lsb_dist" ] &amp;&amp; [ -r /etc/centos-release ]; thenlsb_dist='centos'fiif [ -z "$lsb_dist" ] &amp;&amp; [ -r /etc/redhat-release ]; thenlsb_dist='redhat'fiif [ -z "$lsb_dist" ] &amp;&amp; [ -r /etc/os-release ]; thenlsb_dist="$(. /etc/os-release &amp;&amp; echo "$ID")"filsb_dist="$(echo "$lsb_dist" | tr '[:upper:]' '[:lower:]')"# Special case redhatenterpriseserverif [ "${lsb_dist}" = "redhatenterpriseserver" ]; then# Set it to redhat, it will be changed to centos below anywayslsb_dist='redhat'ficase "$lsb_dist" inubuntu)if command_exists lsb_release; thendist_version="$(lsb_release --codename | cut -f2)"fiif [ -z "$dist_version" ] &amp;&amp; [ -r /etc/lsb-release ]; thendist_version="$(. /etc/lsb-release &amp;&amp; echo "$DISTRIB_CODENAME")"fi;;debian|raspbian)dist_version="$(cat /etc/debian_version | sed 's/\/.*//' | sed 's/\..*//')"case "$dist_version" in9)dist_version="stretch";;8)dist_version="jessie";;7)dist_version="wheezy";;esac;;oracleserver)# need to switch lsb_dist to match yum repo URLlsb_dist="oraclelinux"dist_version="$(rpm -q --whatprovides redhat-release --queryformat "%{VERSION}\n" | sed 's/\/.*//' | sed 's/\..*//' | sed 's/Server*//')";;fedora|centos|redhat)dist_version="$(rpm -q --whatprovides ${lsb_dist}-release --queryformat "%{VERSION}\n" | sed 's/\/.*//' | sed 's/\..*//' | sed 's/Server*//' | sort | tail -1)";;*)if command_exists lsb_release; thendist_version="$(lsb_release --codename | cut -f2)"fiif [ -z "$dist_version" ] &amp;&amp; [ -r /etc/os-release ]; thendist_version="$(. /etc/os-release &amp;&amp; echo "$VERSION_ID")"fi;;esac# Check if this is a forked Linux distrocheck_forked# Run setup for each distro accordinglycase "$lsb_dist" inubuntu|debian)pre_reqs="apt-transport-https ca-certificates curl"if [ "$lsb_dist" = "debian" ] &amp;&amp; [ "$dist_version" = "wheezy" ]; thenpre_reqs="$pre_reqs python-software-properties"backports="deb http://ftp.debian.org/debian wheezy-backports main"if ! grep -Fxq "$backports" /etc/apt/sources.list; then(set -x; $sh_c "echo \"$backports\" &gt;&gt; /etc/apt/sources.list")fielsepre_reqs="$pre_reqs software-properties-common"fiif ! command -v gpg &gt; /dev/null; thenpre_reqs="$pre_reqs gnupg"fiapt_repo="deb [arch=$(dpkg --print-architecture)] https://download.docker.com/linux/$lsb_dist $dist_version $CHANNEL"(set -x$sh_c 'apt-get update'$sh_c "apt-get install -y -q $pre_reqs"curl -fsSl "https://download.docker.com/linux/$lsb_dist/gpg" | $sh_c 'apt-key add -'$sh_c "add-apt-repository \"$apt_repo\""if [ "$lsb_dist" = "debian" ] &amp;&amp; [ "$dist_version" = "wheezy" ]; then$sh_c 'sed -i "/deb-src.*download\.docker/d" /etc/apt/sources.list'fi$sh_c 'apt-get update'$sh_c "apt-get install -y -q docker-ce=$(apt-cache madison docker-ce | grep ${docker_version} | head -n 1 | cut -d ' ' -f 4)")echo_docker_as_nonrootexit 0;;centos|fedora|redhat|oraclelinux)yum_repo="https://download.docker.com/linux/centos/docker-ce.repo"if [ "$lsb_dist" = "fedora" ]; thenif [ "$dist_version" -lt "24" ]; thenecho "Error: Only Fedora &gt;=24 are supported by $url"exit 1fipkg_manager="dnf"config_manager="dnf config-manager"enable_channel_flag="--set-enabled"pre_reqs="dnf-plugins-core"elsepkg_manager="yum"config_manager="yum-config-manager"enable_channel_flag="--enable"pre_reqs="yum-utils"fi(set -x        if [ "$lsb_dist" = "redhat" ]; then                                        for rhel_repo in $rhel_repos ; do                                                $sh_c "$config_manager $enable_channel_flag $rhel_repo"                                        done                                fi$sh_c "$pkg_manager install -y -q $pre_reqs"$sh_c "$config_manager --add-repo $yum_repo"if [ "$CHANNEL" != "stable" ]; thenecho "Info: Enabling channel '$CHANNEL' for docker-ce repo"$sh_c "$config_manager $enable_channel_flag docker-ce-$CHANNEL"fi$sh_c "$pkg_manager makecache fast"$sh_c "$pkg_manager install -y -q docker-ce-${docker_version}"if [ -d '/run/systemd/system' ]; then$sh_c 'service docker start'else$sh_c 'systemctl start docker'fi)echo_docker_as_nonrootexit 0;;raspbian)deprecation_notice "$lsb_dist"export DEBIAN_FRONTEND=noninteractivedid_apt_get_update=apt_get_update() {if [ -z "$did_apt_get_update" ]; then( set -x; $sh_c 'sleep 3; apt-get update' )did_apt_get_update=1fi}if [ "$lsb_dist" != "raspbian" ]; then# aufs is preferred over devicemapper; try to ensure the driver is available.if ! grep -q aufs /proc/filesystems &amp;&amp; ! $sh_c 'modprobe aufs'; thenif uname -r | grep -q -- '-generic' &amp;&amp; dpkg -l 'linux-image-*-generic' | grep -qE '^ii|^hi' 2&gt;/dev/null; thenkern_extras="linux-image-extra-$(uname -r) linux-image-extra-virtual"apt_get_update( set -x; $sh_c 'sleep 3; apt-get install -y -q '"$kern_extras" ) || trueif ! grep -q aufs /proc/filesystems &amp;&amp; ! $sh_c 'modprobe aufs'; thenecho &gt;&amp;2 'Warning: tried to install '"$kern_extras"' (for AUFS)'echo &gt;&amp;2 ' but we still have no AUFS.  Docker may not work. Proceeding anyways!'( set -x; sleep 10 )fielseecho &gt;&amp;2 'Warning: current kernel is not supported by the linux-image-extra-virtual'echo &gt;&amp;2 ' package.  We have no AUFS support.  Consider installing the packages'echo &gt;&amp;2 ' "linux-image-virtual" and "linux-image-extra-virtual" for AUFS support.'( set -x; sleep 10 )fififi# install apparmor utils if they're missing and apparmor is enabled in the kernel# otherwise Docker will fail to startif [ "$(cat /sys/module/apparmor/parameters/enabled 2&gt;/dev/null)" = 'Y' ]; thenif command -v apparmor_parser &gt;/dev/null 2&gt;&amp;1; thenecho 'apparmor is enabled in the kernel and apparmor utils were already installed'elseecho 'apparmor is enabled in the kernel, but apparmor_parser is missing. Trying to install it..'apt_get_update( set -x; $sh_c 'sleep 3; apt-get install -y -q apparmor' )fifiif [ ! -e /usr/lib/apt/methods/https ]; thenapt_get_update( set -x; $sh_c 'sleep 3; apt-get install -y -q apt-transport-https ca-certificates' )fiif [ -z "$curl" ]; thenapt_get_update( set -x; $sh_c 'sleep 3; apt-get install -y -q curl ca-certificates' )curl='curl -sSL'fiif ! command -v gpg &gt; /dev/null; thenapt_get_update( set -x; $sh_c 'sleep 3; apt-get install -y -q gnupg2 || apt-get install -y -q gnupg' )fi# dirmngr is a separate package in ubuntu yakkety; see https://bugs.launchpad.net/ubuntu/+source/apt/+bug/1634464if ! command -v dirmngr &gt; /dev/null; thenapt_get_update( set -x; $sh_c 'sleep 3; apt-get install -y -q dirmngr' )fi(set -x                        for key_server in $key_servers ; do                                $sh_c "apt-key adv --keyserver hkp://${key_server}:80 --recv-keys ${gpg_fingerprint}" &amp;&amp; break                        done                        $sh_c "apt-key adv -k ${gpg_fingerprint} &gt;/dev/null"$sh_c "mkdir -p /etc/apt/sources.list.d"$sh_c "echo deb \[arch=$(dpkg --print-architecture)\] ${apt_url}/repo ${lsb_dist}-${dist_version} ${repo} &gt; /etc/apt/sources.list.d/docker.list"$sh_c 'sleep 3; apt-get update; apt-get install -y -q docker-engine')echo_docker_as_nonrootexit 0;;rancheros)(set -x$sh_c "sleep 3; ros engine switch -f $(sudo ros engine list | grep ${docker_version} | head -n 1 | cut -d ' ' -f 2)")exit 0;;esac# intentionally mixed spaces and tabs here -- tabs are stripped by "&lt;&lt;-'EOF'", spaces are kept in the outputcat &gt;&amp;2 &lt;&lt;-'EOF'Either your platform is not easily detectable or is not supported by thisinstaller script.Please visit the following URL for more detailed installation instructions:https://docs.docker.com/engine/installation/EOFexit 1}# wrapped up in a function so that we have some protection against only getting# half the file during "curl | sh"do_install<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> docker, shell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker, shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux 目录结构</title>
      <link href="/2019/09/19/linux-mu-lu-jie-gou/"/>
      <url>/2019/09/19/linux-mu-lu-jie-gou/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>bin<br>bin 是 Binaries (二进制文件) 的缩写, 这个目录存放着最经常使用的命令。</p><p>boot<br>这里存放的是启动 Linux 时使用的一些核心文件，包括一些连接文件以及镜像文件。</p><p>dev<br>dev 是 Device(设备) 的缩写, 该目录下存放的是 Linux 的外部设备，在 Linux 中访问设备的方式和访问文件的方式是相同的。</p><p>etc<br>etc 是 Etcetera(等等) 的缩写,这个目录用来存放所有的系统管理所需要的配置文件和子目录。</p><p>home<br>用户的主目录，在 Linux 中，每个用户都有一个自己的目录，一般该目录名是以用户的账号命名的</p><p>lib<br>lib 是 Library(库) 的缩写这个目录里存放着系统最基本的动态连接共享库，其作用类似于 Windows 里的 DLL 文件。几乎所有的应用程序都需要用到这些共享库。</p><p>通过/bin和/sbin中的二进制文件。</p><p><a href="https://qastack.cn/unix/74646/difference-between-lib-lib32-lib64-libx32-and-libexec">https://qastack.cn/unix/74646/difference-between-lib-lib32-lib64-libx32-and-libexec</a></p><p>lib64<br>存放64位lib库</p><p>/lost+found：<br>这个目录一般情况下是空的，当系统非法关机后，这里就存放了一些文件。</p><p>media<br>linux 系统会自动识别一些设备，例如U盘、光驱等等，当识别后，Linux 会把识别的设备挂载到这个目录下。</p><p>mnt<br>系统提供该目录是为了让用户临时挂载别的文件系统的，我们可以将光驱挂载在 /mnt/ 上，然后进入该目录就可以查看光驱里的内容了。</p><p>opt<br>opt 是 optional(可选) 的缩写，这是给主机额外安装软件所摆放的目录。比如你安装一个ORACLE数据库则就可以放到这个目录下。默认是空的。</p><p>proc<br>proc 是 Processes(进程) 的缩写，/proc 是一种伪文件系统（也即虚拟文件系统），存储的是当前内核运行状态的一系列特殊文件，这个目录是一个虚拟的目录，它是系统内存的映射，我们可以通过直接访问这个目录来获取系统信息。</p><p>这个目录的内容不在硬盘上而是在内存里，我们也可以直接修改里面的某些文件，比如可以通过下面的命令来屏蔽主机的ping命令，使别人无法ping你的机器：<br>echo 1 &gt; /proc/sys/net/ipv4/icmp_echo_ignore_all</p><p>root<br>该目录为系统管理员，也称作超级权限者的用户主目录。</p><p>run<br>是一个临时文件系统，存储系统启动以来的信息。当系统重启时，这个目录下的文件应该被删掉或清除。如果你的系统上有 /var/run 目录，应该让它指向 run。</p><p>sbin<br>s 就是 Super User 的意思，是 Superuser Binaries (超级用户的二进制文件)的缩写，这里存放的是系统管理员使用的系统管理程序。</p><p>/selinux：<br> 这个目录是 Redhat/CentOS 所特有的目录，Selinux 是一个安全机制，类似于 windows 的防火墙，但是这套机制比较复杂，这个目录就是存放selinux相关的文件的。</p><p>src</p><p>srv<br>该目录存放一些服务启动之后需要提取的数据。</p><p>sys<br>这是 Linux2.6 内核的一个很大的变化。该目录下安装了<br>2.6 内核中新出现的一个文件系统 sysfs 。</p><p>sysfs 文件系统集成了下面3种文件系统的信息：<br>针对进程信息的 proc 文件系统、<br>针对设备的 devfs 文件系统<br>以及针对伪终端的 devpts 文件系统。</p><p>该文件系统是内核设备树的一个直观反映。</p><p>当一个内核对象被创建的时候，对应的文件和目录也在内核对象子系统中被创建。</p><p>tmp<br>tmp 是 temporary(临时) 的缩写这个目录是用来存放一些临时文件的。</p><p>usr<br>usr 是 unix shared resources(共享资源) 的缩写，这是一个非常重要的目录，用户的很多应用程序和文件都放在这个目录下，类似于 windows 下的 program files 目录。</p><p>var<br>var 是 variable(变量) 的缩写，这个目录中存放着在不断扩充着的东西，我们习惯将那些经常被修改的目录放在这个目录下。包括各种日志文件。</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker安装与简单使用</title>
      <link href="/2019/09/19/docker-an-zhuang-yu-jian-dan-shi-yong/"/>
      <url>/2019/09/19/docker-an-zhuang-yu-jian-dan-shi-yong/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="docker安装与简单使用-来自docker官方"><a href="#docker安装与简单使用-来自docker官方" class="headerlink" title="docker安装与简单使用(来自docker官方)"></a>docker安装与简单使用(来自docker官方)</h2><h4 id="系统要求："><a href="#系统要求：" class="headerlink" title="系统要求："></a>系统要求：</h4><p>Docker CE 支持 64 位版本 CentOS 7，并且要求<strong>内核版本</strong>不低于 3.10,安装最新版CE，推荐使用CentOS 7.6</p><h4 id="卸载旧版本："><a href="#卸载旧版本：" class="headerlink" title="卸载旧版本："></a>卸载旧版本：</h4><pre class="line-numbers language-none"><code class="language-none">sudo yum remove docker \                  docker-client \                  docker-client-latest \                  docker-common \                  docker-latest \                  docker-latest-logrotate \                  docker-logrotate \                  docker-selinux \                  docker-engine-selinux \                  docker-engine<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="使用-yum-安装：依赖"><a href="#使用-yum-安装：依赖" class="headerlink" title="使用 yum 安装：依赖"></a>使用 yum 安装：依赖</h4><pre class="line-numbers language-none"><code class="language-none">sudo yum install -y yum-utils \       device-mapper-persistent-data \       lvm2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="设置稳定存储库："><a href="#设置稳定存储库：" class="headerlink" title="设置稳定存储库："></a>设置稳定存储库：</h4><pre class="line-numbers language-none"><code class="language-none">sudo yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="新建docker文件夹"><a href="#新建docker文件夹" class="headerlink" title="新建docker文件夹"></a>新建docker文件夹</h4><pre class="line-numbers language-none"><code class="language-none">mkdir  /etc/docker <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="修改docker的配置文件daemon-json-这里只添加了加速器（可以显著提升拉取速度）"><a href="#修改docker的配置文件daemon-json-这里只添加了加速器（可以显著提升拉取速度）" class="headerlink" title="修改docker的配置文件daemon.json,这里只添加了加速器（可以显著提升拉取速度）"></a>修改docker的配置文件daemon.json,这里只添加了加速器（可以显著提升拉取速度）</h4><p>vi /etc/docker/daemon.json </p><pre class="line-numbers language-none"><code class="language-none">{"registry-mirrors": ["https://registry.docker-cn.com","https://9n9n3nrq.mirror.aliyuncs.com"]}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>以上准备工作做好之后，下面开始步入正题：</p><h4 id="安装-Docker-CE"><a href="#安装-Docker-CE" class="headerlink" title="安装 Docker CE"></a>安装 Docker CE</h4><p>更新 yum 软件源缓存，并安装 docker-ce。</p><hr><h4 id="1-选择自己需要的版本安装"><a href="#1-选择自己需要的版本安装" class="headerlink" title="1.选择自己需要的版本安装"></a>1.选择自己需要的版本安装</h4><pre class="line-numbers language-none"><code class="language-none">列出并对您的仓库中可用的版本进行排序。此示例按版本号对结果进行排序，从最高到最低，并被截断：yum list docker-ce --showduplicates | sort -r选择版本号，对应安装sudo yum install docker-ce-&lt;VERSION_STRING&gt; docker-ce-cli-&lt;VERSION_STRING&gt; containerd.io<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h4 id="2-选择最新版本安装"><a href="#2-选择最新版本安装" class="headerlink" title="2.选择最新版本安装"></a>2.选择最新版本安装</h4><pre class="line-numbers language-none"><code class="language-none">sudo yum makecache fastsudo yum install docker-ce<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="以-busybox-为关键词进行搜索："><a href="#以-busybox-为关键词进行搜索：" class="headerlink" title="以 busybox 为关键词进行搜索："></a>以 busybox 为关键词进行搜索：</h4><pre class="line-numbers language-none"><code class="language-none">docker search busybox<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="拉镜像："><a href="#拉镜像：" class="headerlink" title="拉镜像："></a>拉镜像：</h4><pre class="line-numbers language-none"><code class="language-none">docker pull busyboxdocker pull ubuntu:16.04<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h4><pre class="line-numbers language-none"><code class="language-none">docker run -it --rm \    ubuntu:16.04 \    /bin/bash<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="列出镜像"><a href="#列出镜像" class="headerlink" title="列出镜像"></a>列出镜像</h4><pre class="line-numbers language-none"><code class="language-none">docker image ls<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="列表包含了-仓库名、标签、镜像-ID、创建时间-以及所占用的空间。"><a href="#列表包含了-仓库名、标签、镜像-ID、创建时间-以及所占用的空间。" class="headerlink" title="列表包含了 仓库名、标签、镜像 ID、创建时间 以及所占用的空间。"></a>列表包含了 仓库名、标签、镜像 ID、创建时间 以及所占用的空间。</h4><h4 id="镜像体积"><a href="#镜像体积" class="headerlink" title="镜像体积"></a>镜像体积</h4><pre class="line-numbers language-none"><code class="language-none">docker system df<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="虚悬镜像"><a href="#虚悬镜像" class="headerlink" title="虚悬镜像"></a>虚悬镜像</h4><p>上面的镜像列表中，还可以看到一个特殊的镜像，这个镜像既没有仓库名，也没有标签，均为 <code>&lt;none&gt;</code>。</p><pre class="line-numbers language-none"><code class="language-none">docker image ls -f dangling=true<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="删除此镜像"><a href="#删除此镜像" class="headerlink" title="删除此镜像"></a>删除此镜像</h4><pre class="line-numbers language-none"><code class="language-none">docker image prune<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="中间层镜像"><a href="#中间层镜像" class="headerlink" title="中间层镜像"></a>中间层镜像</h4><pre><code>为了加速镜像构建、重复利用资源，Docker 会利用 中间层镜像。所以在使用一段时间后，可能会看到一些依赖的中间层镜像。默认的 docker image ls 列表中只会显示顶层镜像，如果希望显示包括中间层镜像在内的所有镜像的话，需要加 -a 参数。</code></pre><pre class="line-numbers language-none"><code class="language-none">docker image ls -a<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="列出部分镜像"><a href="#列出部分镜像" class="headerlink" title="列出部分镜像"></a>列出部分镜像</h4><pre class="line-numbers language-none"><code class="language-none">docker image ls ubuntudocker image ls ubuntu:16.04<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="以特定格式显示"><a href="#以特定格式显示" class="headerlink" title="以特定格式显示"></a>以特定格式显示</h4><p>默认情况下，docker image ls 会输出一个完整的表格，<br>但是我们并非所有时候都会需要这些内容。</p><p>比如，刚才删除虚悬镜像的时候，<br>我们需要利用 docker image ls 把所有的虚悬镜像的 ID 列出来，<br>然后才可以交给 docker image rm 命令作为参数来删除指定的这些镜像，这个时候就用到了 -q 参数。</p><pre class="line-numbers language-none"><code class="language-none">docker image ls -q<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>下面的命令会直接列出镜像结果，并且只包含镜像ID和仓库名（标签）：</p><pre class="line-numbers language-none"><code class="language-none">docker image ls --format "{{.ID}}: {{.Repository}}"docker image ls --format "table {{.ID}}\t{{.Repository}}\t{{.Tag}}"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="删除本地镜像"><a href="#删除本地镜像" class="headerlink" title="删除本地镜像"></a>删除本地镜像</h4><pre class="line-numbers language-none"><code class="language-none">docker image rm<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>我们可以用镜像的完整 ID，也称为 长 ID，来删除镜像。使用脚本的时候可能会用长 ID，但是人工输入就太累了，所以更多的时候是用 短 ID 来删除镜像。docker image ls 默认列出的就已经是短 ID 了，一般取前3个字符以上，只要足够区分于别的镜像就可以了。</p><pre class="line-numbers language-none"><code class="language-none">docker image ls<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">docker image rm centos<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="使用镜像摘要删除"><a href="#使用镜像摘要删除" class="headerlink" title="使用镜像摘要删除"></a>使用镜像摘要删除</h4><pre class="line-numbers language-none"><code class="language-none">docker image ls --digestsdocker image rm node@sha256:b4f0e0bdeb578043c1ea6862f0d40cc4afe32a4a582f3be235a3b164422be228<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>对于 CentOS/RHEL 的用户来说，在没有办法使用 UnionFS 的情况下，一定要配置 direct-lvm 给 devicemapper，无论是为了性能、稳定性还是空间利用率。</p><h4 id="参考文献："><a href="#参考文献：" class="headerlink" title="参考文献："></a>参考文献：</h4><ol><li><a href="https://blog.lab99.org/post/docker-2016-07-14-faq.html">https://blog.lab99.org/post/docker-2016-07-14-faq.html</a></li><li><a href="https://docs.docker.com/install/linux/docker-ce/centos/#install-docker-ce-1">https://docs.docker.com/install/linux/docker-ce/centos/#install-docker-ce-1</a></li><li><a href="https://blog.csdn.net/kamputer/article/details/79047765">https://blog.csdn.net/kamputer/article/details/79047765</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux运维的个人进阶</title>
      <link href="/2019/09/19/linux-yun-wei-de-ge-ren-jin-jie/"/>
      <url>/2019/09/19/linux-yun-wei-de-ge-ren-jin-jie/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="一直以来，个人都是在通过不断探索，以寻找最好的学习Linux的方式。"><a href="#一直以来，个人都是在通过不断探索，以寻找最好的学习Linux的方式。" class="headerlink" title="一直以来，个人都是在通过不断探索，以寻找最好的学习Linux的方式。"></a>一直以来，个人都是在通过不断探索，以寻找最好的学习Linux的方式。</h2><p>本文简单介绍了其中一种linux运维的个人进阶路线，有需要的朋友可以参考下。</p><h3 id="第一阶段：企业级Linux运维工程师"><a href="#第一阶段：企业级Linux运维工程师" class="headerlink" title="第一阶段：企业级Linux运维工程师"></a>第一阶段：企业级Linux运维工程师</h3><p>1、Linux运维最佳学习方法”5W1H”六何分析法全面介绍，独家Linux快速入门学习技巧</p><p>2、冯诺依曼体系（CPU架构、操作系统概念、发展演变、应用场景、业内形态）</p><p>3、Linux运维基础实战入门，用户管理，权限，文件查找，文本编辑及实战讲解</p><p>4、Linux运维系统管理和技能进阶，磁盘管理，软件安装，文件系统、内核使用方法和高级技巧</p><p>5、Linux系统环境及日常管理，结合日常工作常用20个场景，排错思路、面试和工作中注意事项</p><p>6、以实战方式全方位展示Bash八大特性和高级用法介绍以及高级企业级使用技巧实战演练</p><p>7、Shell脚本工作原理、学习方法、配罝技巧、企业级书写规范、开发环境定制全面实战介绍</p><p>8、职场人价值体系-知识、技能、成长目标和方向定位年薪30W运维人员必备知识体系关键技能点</p><h3 id="第二阶段：Linux应用运维工程师-amp-DBA"><a href="#第二阶段：Linux应用运维工程师-amp-DBA" class="headerlink" title="第二阶段：Linux应用运维工程师&amp;DBA"></a>第二阶段：Linux应用运维工程师&amp;DBA</h3><p>1、TCP/IP网络通信协议，IP地址含义、TCP有限状态机转换原理，路由协议</p><p>2、利用Kickstart文件实现企业级自动化安装环境定制，百台并发安装实战</p><p>3、Linux常见系统故障案例分析，企业级Linux运维工程师常犯错误Top5</p><p>4、全面讲解CDN核心技术理念，实现智能DNS流量分发和用户策略引导</p><p>5、实战讲解LAMP运维架构，Apache+PHP+Mysql架构体系和文件存储</p><p>6、介绍企业级安全体系，iptables构建安全架构以及软硬防火墙优劣势</p><p>7、深入讲解运维必备Web服务开源解决方案Nginx及LNMP企业高级用法</p><p>8、企业级DBA实战课程，Mysql企业级实战应用，调优及redis企业级应用</p><h3 id="第三阶段：企业级Linux云计算工程师"><a href="#第三阶段：企业级Linux云计算工程师" class="headerlink" title="第三阶段：企业级Linux云计算工程师"></a>第三阶段：企业级Linux云计算工程师</h3><p>1、全面讲解企业级LNMP架构及12条策略建议，实现互联网电子商务、博客、论坛等实战案例</p><p>2、专业压测评估体系，从并发、响应时间、持久连接、pv、峰值、带宽，以及ab等压测方案实施</p><p>4、讲解Linux Cluster集群，全面分析集群类别，讲解F5和LVS、haproxy、nginx的4-7层负载均衡</p><p>5、实战带领在Centos7上实现LVS集群配罝、服务管理、调度算法修改、后端服务器上下线、服务状态监控，状态监测方实现NAT、DR、TUN等模型演练</p><p>6、全面实现基于Nginx负载均衡功能，实现Nginx反代后端、Nginx负载均衡实现网站动静分离详解</p><p>7、实战带领实现Keepalived主从架构及双主切换方案、报警定制、日志分析等</p><p>8、全面讲解Zabbix3.X监控特性、Web服务监控、Zabbix内部监控、Zabbix特性及功能详解</p><p>9、全面讲解Varnish缓存技术，深入Varnish工作机制、核心架构、及主流开源缓存技术解决方案</p><p>10、laaS、PaaS和SaaS云平台功能及常见实现方式及OpenStack的功能特性及其实现的增强功能</p><p>11、全面讲解KVM虚拟化技术，docker技术实现互联网容器和Docker容器云以及Kubemetes管理</p><h3 id="第四阶段：Linux自动化运维工程师-amp-DevOps"><a href="#第四阶段：Linux自动化运维工程师-amp-DevOps" class="headerlink" title="第四阶段：Linux自动化运维工程师&amp;DevOps"></a>第四阶段：Linux自动化运维工程师&amp;DevOps</h3><p>1、以自动化运维框架为主线，讲解Devops运维自动化趋和核心技术</p><p>2、自动化运维工具Puppet、Ansible、Cobbler、Saltstack、 Fabric对比</p><p>3、Ansible生产环境应用案例和实战操练、批量进行上百台服务器管理</p><p>4、企业自动化工具Puppet使用场景，实现搭建企业运维自动化平台架构</p><p>5、全面讲解Git版本控制、脚本自动化管理、Git分支合并，Git服务器搭建</p><p>6、深入讲解基于Shell脚本企业级高级用法和常见实现Shell自动化管理</p><p>7、python基本语法和自动化工具应用，及开源跳板机Jumpserver实现</p><p>8、实战：基于生产环境持续集成案例，Jenkins+gitlab+maven+shell实现代码自动化上线部署，可持续集成</p><p>9、生产环境基于自动化运维常见场景如自动化发布、灰度发布、批量上线、降级方案、无缝切换等核心技术</p><h3 id="第五阶段：Linux系统架构师-amp-运维架构师"><a href="#第五阶段：Linux系统架构师-amp-运维架构师" class="headerlink" title="第五阶段：Linux系统架构师&amp;运维架构师"></a>第五阶段：Linux系统架构师&amp;运维架构师</h3><p>1、全面介绍缓存技术要点，讲解数据流式化、代理式缓存、旁路式缓存、缓存算法、缓存设定策略、一致性哈希算法优劣势等</p><p>2、全面讲解正向代理、反向代理机制，实战实现Nginx反向代理负载均衡，跳转规則实现动静分离、IP曰志记录、头部信息改写、缓存模块、缓存策略、请求超时机制、健康状态监测、判定规则、状态码定义、实现后端故障及自动上线等能力</p><p>3、实战带领实现千万级大型互联网Web架构核心技术，运用LVS、Haproxy、Vamish、 Nginx、tomcat、MySQL等实现高并发运维体系Web架构，实现分布式集群存储Fastdfs和mogileFS架构</p><p>4、全面讲解MySQL—主多从、一从多主企业级用法，深入讲解MySQL读写分离、连接池及sharding技术，以及MMM、MHA、Galera-Cluster核心技术， MySQL读写分离Amoeba实现</p><p>5、实战:分布式收集Nginx日志于Elk集群，并通过Kibana展示；实战:分布式收集 JAVA日志于Elk集群，并通过Kibana展示；实战:分布式收集Syslog曰志于Elk集群，并通过Kibana展示</p><p>6、结合自动化工具实现企业业务服务管理，持续化集成，实现Devops运维管理模型及架构设计。</p><p>7、实现基于k8s的企业级容器云架构管理，以及docker容器的服务应用，实现私有云架构方案</p><p>8、全面讲解大众点评、美团、滴滴、饿了么等亿级别PV大型互联网架构方案，以及设计规范，包含负载均衡、缓存、高可用、数据库、分布式存储、消息队列、自动化、运维规范、监控体系等</p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux运维, 进阶 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>高并发大流量网站10个调优策略</title>
      <link href="/2019/09/19/gao-bing-fa-da-liu-liang-wang-zhan-10-ge-diao-you-ce-lue/"/>
      <url>/2019/09/19/gao-bing-fa-da-liu-liang-wang-zhan-10-ge-diao-you-ce-lue/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>1.</strong> <strong>硬件升级</strong></p><p>普通的P4服务器一般最多能支持每天10万独立IP，如果访问量比这个还要大，那么必须首先配置一台更高性能的专用服务器才能解决问题，否则怎么优化都不可能彻底解决性能问题。</p><p><strong>2.</strong> <strong>负载均衡</strong></p><p>它是根据某种负载均衡策略把请求分发到集群中的每一台服务器上，让整个服务器群来处理网站的请求。</p><p>公司比较有钱的，可以购买专门负责均衡的硬件（如：F5），效果肯定会很好。对于大部分公司，会选择廉价有效的方法扩展整个系统的架构，来增加服务器的吞吐量和处理能力，以及承载能力。</p><p><strong>3.</strong> <strong>服务器集群</strong></p><p>服务器集群就是指将N台服务器集中起来一起进行同一种服务，它们之间通过网络实现通信。让N台服务器之间相互协作，共同承载一个网站的请求压力。</p><p>在客户端看来就像是只有一个服务器。集群可以利用多个计算机进行并行计算从而获得很高的计算速度，也可以用多个计算机做备份，从而使得任何一个机器坏了整个系统还是能正常运行。</p><p><strong>4.</strong> <strong>数据库读写分离</strong></p><p>基本的原理是让主数据库处理事务性增、改、删操作（INSERT、UPDATE、DELETE）,而从数据库处理SELECT查询操作。</p><p><strong>5.</strong> <strong>数据库分表技术（垂直分割，水平分割）</strong></p><p>当一张的数据达到几百万时，你查询一次所花的时间会变多，如果有联合查询的话，很有可能会死在那儿了。分表的目的就在于此，减小数据库的负担，缩短查询时间。</p><p><strong>6.</strong> <strong>表建立相应的索引</strong></p><p>使用索引可快速访问数据库表中的特定信息。</p><p><strong>7.</strong> <strong>页面静态化</strong></p><p>前台实现完全的静态化最好，可以完全不用访问数据库。</p><p><strong>8.</strong> <strong>缓存技术（MemCache\Redis）</strong></p><p>缓存技术就是另一个解决方案，就是将动态数据存储到缓存文件中，动态网页直接调用这些文件，而不必再访问数据库</p><p><strong>9.</strong> <strong>禁止外部盗链</strong></p><p>外部网站的图片或者文件盗链往往会带来大量的负载压力，因此应该严格限制外部对于自身的图片或者文件盗链</p><p><strong>10.</strong> <strong>控制大文件的下载</strong></p><p>大文件的下载会占用很大的流量，并且对于非SCSI硬盘来说，大量下载文件会消耗CPU，使得网站响应能力下降。因此，尽量不要提供超过2M的大文件下载，如果需要提供，建议尽量将大文件放在另外一台服务器上。</p>]]></content>
      
      
      <categories>
          
          <category> 网站调优 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 高并发, 网站调优 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>事件驱动的微服务架构的最佳实践</title>
      <link href="/2019/09/14/shi-jian-qu-dong-de-wei-fu-wu-jia-gou-de-zui-jia-shi-jian/"/>
      <url>/2019/09/14/shi-jian-qu-dong-de-wei-fu-wu-jia-gou-de-zui-jia-shi-jian/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="事件驱动的微服务架构的最佳实践"><a href="#事件驱动的微服务架构的最佳实践" class="headerlink" title="事件驱动的微服务架构的最佳实践"></a>事件驱动的微服务架构的最佳实践</h1><h3 id="你做到了吗？"><a href="#你做到了吗？" class="headerlink" title="你做到了吗？"></a>你做到了吗？</h3><p><img src="https://dzone.com/storage/temp/12455990-she-is-doing-her-22best-practice22.jpeg" alt="她正在做她的“最佳实践”。"></p><p><em>她正在做她的“最佳实践”。</em></p><p>如果您是企业架构师，您可能已经听说过并使用过微服务架构。虽然您过去可能已将REST用作服务通信层，但越来越多的项目正在转向事件驱动的体系结构。让我们深入探讨这种流行架构的优缺点，它所包含的一些关键设计选择以及常见的反模式。</p><h2 id="什么是事件驱动的微服务架构？"><a href="#什么是事件驱动的微服务架构？" class="headerlink" title="什么是事件驱动的微服务架构？"></a>什么是事件驱动的微服务架构？</h2><p>在事件驱动的体系结构中，当服务执行其他服务可能感兴趣的某项工作时，该服务会生成事件 - 执行操作的记录。其他服务使用这些事件，以便他们可以执行事件所需的任何自己的任务。与REST不同，创建请求的服务不需要知道使用请求的服务的详细信息。</p><p>这是一个简单的例子：当一个订单放在电子商务网站上时，会产生一个“下订单”事件，然后由几个微服务消费：</p><ol><li>有序服务，可以将订单记录写入数据库。</li><li>客户服务，可以创建客户记录。 </li><li>付款服务，可以处理付款。</li></ol><p>事件可以以各种方式发布。例如，可以将它们发布到保证将事件传递给适当的消费者的队列，或者可以将它们发布到发布事件并允许访问所有感兴趣的各方的“发布/订阅”模型流。在任何一种情况下，生产者都会发布事件，消费者会收到该事件，并做出相应的反应。请注意，在某些情况下，这两个actor也可以称为发布者（生产者）和订阅者（​​消费者）。</p><h2 id="为什么使用事件驱动的体系结构"><a href="#为什么使用事件驱动的体系结构" class="headerlink" title="为什么使用事件驱动的体系结构"></a>为什么使用事件驱动的体系结构</h2><p>事件驱动的体系结构提供了多种优于REST的优势，其中包括：</p><ul><li><strong>异步</strong>  - 基于事件的体系结构是异步的，没有阻塞。这允许资源在他们的工作单元完成后自由移动到下一个任务，而不用担心之前发生的事情或接下来发生的事情。它们还允许事件排队或缓冲，从而防止消费者对生产者施加压力或阻止它们。</li><li><strong>松散耦合</strong>  - 服务不需要（也不应该）了解或依赖其他服务。使用事件时，服务独立运行，不了解其他服务，包括其实现细节和传输协议。事件模型下的服务可以独立且更容易地更新，测试和部署。</li><li><strong>轻松扩展</strong>  - 由于服务在事件驱动的体系结构下解耦，并且服务通常只执行一项任务，因此追踪到特定服务的瓶颈，并且扩展该服务（并且只有该服务）变得容易。</li><li><strong>恢复支持</strong>  - 具有队列的事件驱动架构可以通过“重放”过去的事件来恢复丢失的工作。当消费者需要恢复时，这对于防止数据丢失是有价值的。</li></ul><p>当然，事件驱动的体系结构也有缺点。通过分离紧密耦合时可能更简单的问题，它们很容易过度设计; 他们可能需要大量的前期投资; 并且通常会导致基础架构，服务合同或模式，多语言构建系统和依赖关系图的额外复杂性。</p><p>也许最重要的缺点和挑战是数据和事务管理。由于它们的异步性质，事件驱动模型必须小心处理服务之间的不一致数据，不兼容的版本，监视重复事件，并且通常不支持ACID事务，而不是支持更难以跟踪或调试的<a href="https://en.wikipedia.org/wiki/Eventual_consistency">最终一致性</a>。</p><p>即使存在这些缺点，事件驱动的体系结构通常也是企业级微服务系统的更好选择。专业可扩展，松散耦合，开发友好的设计 - 超过缺点。</p><h2 id="何时使用REST"><a href="#何时使用REST" class="headerlink" title="何时使用REST"></a>何时使用REST</h2><p>但是，有时候REST / Web界面可能更适合：</p><ul><li>您需要一个异步请求/回复接口。</li><li>您需要支持强大的交易。</li><li>您的API可供公众使用。</li><li>您的项目很小（REST设置和部署起来要简单得多）。</li></ul><h2 id="您最重要的设计选择-消息传递框架"><a href="#您最重要的设计选择-消息传递框架" class="headerlink" title="您最重要的设计选择 - 消息传递框架"></a>您最重要的设计选择 - 消息传递框架</h2><p>一旦确定了事件驱动的体系结构，就应该选择事件框架了。生成和使用事件的方式是系统中的关键因素。存在数十种经过验证的框架和选择，选择正确的框架和选择需要时间和研究。</p><p>您的基本选择归结为消息处理或流处理。</p><h2 id="消息处理"><a href="#消息处理" class="headerlink" title="消息处理"></a>消息处理</h2><p>在传统的消息处理中，组件创建消息，然后将其发送到特定（通常是单个）目的地。已经闲置并等待的接收组件接收该消息并相应地动作。通常，当消息到达时，接收组件执行单个过程。然后，该邮件将被删除。</p><p>消息处理体系结构的典型示例是消息队列。虽然大多数较新的项目使用流处理（如下所述），但使用消息（或事件）队列的体系结构仍然很受欢迎。消息队列通常使用“存储和转发”系统的代理，其中事件从代理传递到代理，直到它们到达适当的消费者。<a href="https://activemq.apache.org/">ActiveMQ</a>和<a href="https://www.rabbitmq.com/">RabbitMQ</a>是消息队列框架的两个流行示例。这两个项目都有多年的经过验证的使用和已建立的社区。</p><h3 id="流处理"><a href="#流处理" class="headerlink" title="流处理"></a>流处理</h3><p>另一方面，在流处理中，组件在达到某个状态时发出事件。其他感兴趣的组件在事件流上侦听这些事件并做出相应的反应。事件不是针对某个收件人，而是针对所有感兴趣的组件。</p><p>在流处理中，组件可以同时对多个事件做出反应，并对多个流和事件应用复杂的操作。一些流包括持久性，其中事件在必要时保留在流上。</p><p>通过流处理，系统可以重现事件历史，在事件发生后上线并仍然对其作出反应，甚至执行滑动窗口计算。例如，它可以从每秒事件流计算每分钟的平均CPU使用率。</p><p><a href="https://kafka.apache.org/">Apache Kafka</a>是最受欢迎的流处理框架之一  。Kafka是许多项目使用的成熟稳定的解决方案。它可以被认为是一种首选的工业级流处理解决方案。Kafka拥有庞大的用户群，有用的社区和不断发展的工具集。</p><h2 id="其他选择"><a href="#其他选择" class="headerlink" title="其他选择"></a>其他选择</h2><p>还有其他框架可以提供流和消息处理的组合或它们自己独特的解决方案。例如，  <a href="https://pulsar.apache.org/">Pulsar</a>是Apache的新产品，是一个开源的pub / sub消息系统，支持流和事件队列，所有这些都具有极高的性能。Pulsar功能丰富 - 它提供多租户和地理复制 - 因此很复杂。据说Kafka的目标是高吞吐量，而Pulsar的目标是低延迟。</p><p><a href="https://nats.io/">NATS</a>是具有“合成”排队的备选发布/订阅消息系统。NATS旨在发送小而频繁的消息。它提供高性能和低延迟; 但是，NATS认为某些级别的数据丢失是可以接受的，优先考虑性能而不是交付保证。</p><h2 id="其他设计考虑因素"><a href="#其他设计考虑因素" class="headerlink" title="其他设计考虑因素"></a>其他设计考虑因素</h2><p>选择事件框架后，还需要考虑以下几个其他挑战：</p><ul><li>活动采购</li></ul><p>很难实现松散耦合服务，不同数据存储和原子事务的组合。可能<a href="https://dzone.com/articles/introduction-to-event-sourcing">有用的</a>一种模式是  <a href="https://dzone.com/articles/introduction-to-event-sourcing">Event Sourcing</a>。在事件源中，永远不会直接对数据执行更新和删除操作; 相反，实体的状态更改将保存为一系列事件。</p><ul><li>CQRS</li></ul><p>上述事件采购引入了另一个问题：由于状态需要从一系列事件构建，因此查询可能既缓慢又复杂。命令查询责任分离（<a href="https://dzone.com/articles/microservices-with-cqrs-and-event-sourcing">CQRS</a>）是一种设计解决方案，它要求插入操作和读取操作的单独模型。</p><ul><li>发现活动信息</li></ul><p>事件驱动架构中最大的挑战之一是编目服务和事件。您在哪里可以找到活动描述和详细信息？活动的原因是什么？什么团队创建了这个活动？他们是否积极致力于此？</p><ul><li>处理变革</li></ul><p>事件架构会改变吗？如何在不破坏其他服务的情况下更改事件架构？随着您的服务和事件数量的增长，您如何回答这些问题变得至关重要。</p><p>作为一个好的事件消费者意味着编码改变的模式。作为一个好的事件生产者意味着要认识到你的模式变化如何影响其他服务，并创建明确记录的精心设计的事件。</p><ul><li>内部部署与托管部署</li></ul><p>无论您的事件框架如何，您还需要自己决定在内部部署框架（消息代理不是很容易操作，尤其是高可用性），或者<a href="https://www.heroku.com/kafka">在Heroku上</a>使用<a href="https://www.heroku.com/kafka">Apache Kafka等</a>托管服务。</p><h2 id="反模式"><a href="#反模式" class="headerlink" title="反模式"></a>反模式</h2><p>与大多数体系结构一样，事件驱动的体系结构具有自己的一组反模式。以下是一些需要注意的事项：</p><h3 id="好太多了"><a href="#好太多了" class="headerlink" title="好太多了"></a>好太多了</h3><p>小心你不要对创建事件感到太兴奋。创建太多事件将在服务之间产生不必要的复杂性，增加开发人员的认知负担，使部署和测试更加困难，并导致事件消费者拥塞。并非每种方法都需要成为一种事件。</p><h3 id="通用事件"><a href="#通用事件" class="headerlink" title="通用事件"></a>通用事件</h3><p>不要在名称或故意使用通用事件。您希望其他团队了解您的事件存在的原因，应该使用的内容以及何时应该使用它。事件应具有特定目的并相应地命名。具有通用名称的事件或具有混淆标志的通用事件会导致问题。</p><h3 id="复杂的依赖关系图"><a href="#复杂的依赖关系图" class="headerlink" title="复杂的依赖关系图"></a>复杂的依赖关系图</h3><p>注意彼此依赖的服务并创建复杂的依赖关系图或反馈循环。每个网络跃点都会为原始请求增加额外的延迟，尤其是离开数据中心的北/南网络流量。</p><h3 id="取决于保证订单，交货或副作用"><a href="#取决于保证订单，交货或副作用" class="headerlink" title="取决于保证订单，交货或副作用"></a>取决于保证订单，交货或副作用</h3><p>事件是异步的; 因此，包括对顺序或重复的假设不仅会增加复杂性，还会抵消基于事件的体系结构的许多关键优势。如果您的消费者有副作用，例如在数据库中添加值，那么您可能无法通过重播事件来恢复。</p><h3 id="过早优化"><a href="#过早优化" class="headerlink" title="过早优化"></a>过早优化</h3><p>大多数产品从小开始，随着时间的推移而增长 虽然您可能梦想未来需要扩展到大型复杂组织，但如果您的团队规模较小，那么事件驱动架构的复杂性可能会让您失望。相反，考虑使用简单的架构设计您的系统，但包括必要的关注点分离，以便您可以随着需求的增长进行交换。</p><h3 id="期待事件驱动来解决所有问题"><a href="#期待事件驱动来解决所有问题" class="headerlink" title="期待事件驱动来解决所有问题"></a>期待事件驱动来解决所有问题</h3><p>在技​​术水平较低的情况下，不要指望事件驱动的架构能够解决您的所有问题。虽然这种架构肯定可以改善技术功能障碍的许多方面，但它无法解决核心问题，例如缺乏自动化测试，团队沟通不畅或者过时的开发实践。</p><h2 id="学到更多"><a href="#学到更多" class="headerlink" title="学到更多"></a>学到更多</h2><p>了解事件驱动架构的优缺点，以及一些最常见的设计决策和挑战是创建最佳设计的重要部分。</p><p>如果您想了解更多信息，请查看这个<a href="https://devcenter.heroku.com/articles/event-driven-microservices-with-apache-kafka">事件驱动的参考架构</a>，它允许您通过单击在Heroku上部署工作项目。该参考架构创建了一个销售虚构咖啡产品的网上商店。</p><p><img src="https://lh4.googleusercontent.com/OOp9l49cyvKMzp6ESmHAlu5oP4oDNQDiM-T0b5aKDJHiA9ecNb8HNLxAzwYJAWyhQewIiy3yPW6g3YkAkN6vaJt1kcES6xflzajp6lEpMaQwJRi5bszEsBrPZTVVat6aP9pR07e9" alt="null"></p><p>产品点击次数作为事件进行跟踪并存储在Kafka中。然后，它们被报告仪表板使用。</p><p><img src="https://lh4.googleusercontent.com/4ILhHjd5e6fAzp5VVm5eqhNtk71GdqSOY4HKd-8exLhMkqT-G2xboGZxDPAdH-KvJpFgXRbg1kfO_7u4i4mEhkLB4rndZ4O4XFzI3ehyd-qZC-FrkZ_9ZotjJQmaD9jMMMoFX7pG" alt="null"></p><p>代码是开源的，因此您可以根据需要对其进行修改并运行您自己的实验。</p>]]></content>
      
      
      <categories>
          
          <category> 架构, 微服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微服务架构, 微服务, 微服务最佳实践, 事件驱动架构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于阿里云镜像站安装Kubernetes 1.15</title>
      <link href="/2019/09/06/ji-yu-a-li-yun-jing-xiang-zhan-an-zhuang-kubernetes1.15/"/>
      <url>/2019/09/06/ji-yu-a-li-yun-jing-xiang-zhan-an-zhuang-kubernetes1.15/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><pre><code>kubernetes官网的文档比较详细，但是所有的安装步骤都有个前提(你有足够自由的互联络)，之前在香港和亚马逊的服务器都是直接照着手册执行脚本一路顺畅。无奈天朝的网络只能够借助于阿里云镜像站了，先前只是在使用该站点的各种linux发行版安装包，最近发现还支持了kubernetes。具体可以访问[阿里巴巴开源镜像站](https://opsx.alibaba.com/mirror)。# 安装docker-ce</code></pre><h1 id="❤️-以下适用于centos-7"><a href="#❤️-以下适用于centos-7" class="headerlink" title="❤️ 以下适用于centos 7"></a>❤️ 以下适用于centos 7</h1><h1 id="step-1-安装必要的一些系统工具"><a href="#step-1-安装必要的一些系统工具" class="headerlink" title="step 1: 安装必要的一些系统工具"></a>step 1: 安装必要的一些系统工具</h1><pre class="line-numbers language-none"><code class="language-none">sudo yum install -y yum-utils device-mapper-persistent-data lvm2  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="Step-2-添加软件源信息"><a href="#Step-2-添加软件源信息" class="headerlink" title="Step 2: 添加软件源信息"></a>Step 2: 添加软件源信息</h1><pre class="line-numbers language-none"><code class="language-none">sudo yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo  yum-config-manager --disable docker-ce-edge  yum-config-manager --disable docker-ce-test  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h1 id="Step-3-更新并安装-Docker-CE"><a href="#Step-3-更新并安装-Docker-CE" class="headerlink" title="Step 3: 更新并安装 Docker-CE"></a>Step 3: 更新并安装 Docker-CE</h1><pre class="line-numbers language-none"><code class="language-none">sudo yum makecache fast  sudo yum -y install docker-ce  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="Step-4-开启Docker服务"><a href="#Step-4-开启Docker服务" class="headerlink" title="Step 4: 开启Docker服务"></a>Step 4: 开启Docker服务</h1><pre class="line-numbers language-none"><code class="language-none">sudo service docker start  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="Step-5-更改cgroup-driver"><a href="#Step-5-更改cgroup-driver" class="headerlink" title="Step 5: 更改cgroup driver"></a>Step 5: 更改cgroup driver</h1><pre class="line-numbers language-none"><code class="language-none">cat &gt; /etc/docker/daemon.json &lt;&lt;EOF  {   "exec-opts": ["native.cgroupdriver=systemd"],   "log-driver": "json-file",   "log-opts": {   "max-size": "100m"   },   "storage-driver": "overlay2",   "storage-opts": [   "overlay2.override_kernel_check=true"   ]  }  EOF <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="❤️-以下命令适用于ubuntu"><a href="#❤️-以下命令适用于ubuntu" class="headerlink" title="❤️ 以下命令适用于ubuntu"></a>❤️ 以下命令适用于ubuntu</h1><h1 id="step-1-安装必要的一些系统工具-1"><a href="#step-1-安装必要的一些系统工具-1" class="headerlink" title="step 1: 安装必要的一些系统工具"></a>step 1: 安装必要的一些系统工具</h1><pre class="line-numbers language-none"><code class="language-none">sudo apt-get update  sudo apt-get -y install apt-transport-https ca-certificates curl software-properties-common  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="step-2-安装GPG证书"><a href="#step-2-安装GPG证书" class="headerlink" title="step 2: 安装GPG证书"></a>step 2: 安装GPG证书</h1><pre class="line-numbers language-none"><code class="language-none">curl -fsSL http://mirrors.aliyun.com/docker-ce/linux/ubuntu/gpg | sudo apt-key add -  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="Step-3-写入软件源信息"><a href="#Step-3-写入软件源信息" class="headerlink" title="Step 3: 写入软件源信息"></a>Step 3: 写入软件源信息</h1><pre class="line-numbers language-none"><code class="language-none">sudo add-apt-repository "deb [arch=amd64] http://mirrors.aliyun.com/docker-ce/linux/ubuntu $(lsb_release -cs) stable"  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="Step-4-更新并安装-Docker-CE"><a href="#Step-4-更新并安装-Docker-CE" class="headerlink" title="Step 4: 更新并安装 Docker-CE"></a>Step 4: 更新并安装 Docker-CE</h1><pre class="line-numbers language-none"><code class="language-none">sudo apt-get -y update  sudo apt-get -y install docker-ce  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="Step-5-更改cgroup-driver-1"><a href="#Step-5-更改cgroup-driver-1" class="headerlink" title="Step 5: 更改cgroup driver"></a>Step 5: 更改cgroup driver</h1><pre class="line-numbers language-none"><code class="language-none">cat &gt; /etc/docker/daemon.json &lt;&lt;EOF  {   "exec-opts": ["native.cgroupdriver=systemd"],   "log-driver": "json-file",   "log-opts": {   "max-size": "100m"   },   "storage-driver": "overlay2",   "storage-opts": [   "overlay2.override_kernel_check=true"   ]  }  EOF  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="安装二进制文件"><a href="#安装二进制文件" class="headerlink" title="安装二进制文件"></a>安装二进制文件</h1><p>主要是安装<code>kubelet</code>、<code>kubeadm</code>以及<code>kubectl</code>这三个可执行文件。其中kubeadm是官方的安装工具，kubectl是客户端，kubelet这个就不用介绍了。</p><h1 id="安装阿里云的k8s-yum源"><a href="#安装阿里云的k8s-yum源" class="headerlink" title="安装阿里云的k8s-yum源"></a>安装阿里云的k8s-yum源</h1><p>以下是针对于CentOS的yum源，官方也有针对Ubuntu的源</p><pre class="line-numbers language-none"><code class="language-none">cat &lt;&lt;EOF &gt; /etc/yum.repos.d/kubernetes.repo  [kubernetes]  name=Kubernetes  baseurl=http://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64  enabled=1  gpgcheck=0  repo_gpgcheck=0  gpgkey=http://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg   http://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg  EOF  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="安装kubelet"><a href="#安装kubelet" class="headerlink" title="安装kubelet"></a>安装kubelet</h1><p>如果你希望直接安装最新发布版本的k8s，请直接执行（最终安装的版本关键看你安装的kubeadm版本）。</p><pre class="line-numbers language-none"><code class="language-none">setenforce 0  yum install -y kubelet kubeadm kubectl --disableexcludes=kubernetes  systemctl enable docker &amp;&amp; systemctl start docker  systemctl enable kubelet &amp;&amp; systemctl start kubelet  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h1 id="调参运行"><a href="#调参运行" class="headerlink" title="调参运行"></a>调参运行</h1><p>照着执行就行了。</p><pre class="line-numbers language-none"><code class="language-none">cat &lt;&lt;EOF &gt;  /etc/sysctl.d/k8s.conf  net.bridge.bridge-nf-call-ip6tables = 1  net.bridge.bridge-nf-call-iptables = 1  EOF  sysctl --system  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">systemctl daemon-reload  systemctl restart kubelet  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="容器组件"><a href="#容器组件" class="headerlink" title="容器组件"></a>容器组件</h1><h2 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h2><p>google和docker似乎是有意要对着干的，虽然阿里云也有docker registry的加速器，但是google并没有将kubernetes的镜像放到docker hub上。所以，我们需要先使用脚本，从阿里云的google_containers命名空间下载对应的克隆镜像，然后再通过docker tag将其labels修改为kubeadm生成的static-pod yaml文件对应的镜像标签。从而欺骗kubeadm，所有镜像都已经ready了，不用再去公网上拉取了。</p><p>具体操作如下：</p><h2 id="镜像列表"><a href="#镜像列表" class="headerlink" title="镜像列表"></a>镜像列表</h2><p>你肯定会疑问，我怎么知道我要使用哪些镜像？</p><p>好在v1.12.2以上的版本，kubeadm提示可以使用以下命令来获取到镜像信息：（本例是v1.15.0）  </p><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master manifests]# kubeadm config images listk8s.gcr.io/kube-apiserver:v1.15.0k8s.gcr.io/kube-controller-manager:v1.15.0k8s.gcr.io/kube-scheduler:v1.15.0k8s.gcr.io/kube-proxy:v1.15.0k8s.gcr.io/pause:3.1k8s.gcr.io/etcd:3.3.10k8s.gcr.io/coredns:1.3.1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从阿里云拉取镜像  </p><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master manifests]# cat ./pull.sh  for i in `kubeadm config images list`; do    imageName=${i#k8s.gcr.io/}   docker pull registry.aliyuncs.com/google_containers/$imageName   docker tag registry.aliyuncs.com/google_containers/$imageName k8s.gcr.io/$imageName   docker rmi registry.aliyuncs.com/google_containers/$imageName  done;  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="安装k8s"><a href="#安装k8s" class="headerlink" title="安装k8s"></a>安装k8s</h2><p>这就是kubeadm的安装流程了；下面是部署单节点k8s的命令，如果需要部署k8s集群，可以通过指定config文件的方式来指定其etcd集群，并使用相同的方式部署多个api-server、controller-manager以及scheduler。</p><h3 id="k8s"><a href="#k8s" class="headerlink" title="k8s"></a>k8s</h3><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master manifests]# kubeadm init --kubernetes-version=$(kubeadm version -o short)  --pod-network-cidr=10.244.0.0/16  [init] using Kubernetes version: v1.15.0 [preflight] running pre-flight checks  [preflight/images] Pulling images required for setting up a Kubernetes cluster  [preflight/images] This might take a minute or two, depending on the speed of your internet connection  [preflight/images] You can also perform this action in beforehand using 'kubeadm config images pull'  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="安装网络组件"><a href="#安装网络组件" class="headerlink" title="安装网络组件"></a>安装网络组件</h2><p>我比较喜欢使用flannel，可以配置不同的backend来支持多种类型的网络。当然，如果对网络安全有特殊的限制，可以考虑其他的组件.</p><pre class="line-numbers language-none"><code class="language-none">kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/bc79dd1505b0c8681ece4de4c0d86c5cd2643275/Documentation/kube-flannel.yml  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="取消污点"><a href="#取消污点" class="headerlink" title="取消污点"></a>取消污点</h2><p>这是因为我就只有一台机器，如果不干掉这个taint就无法调度pod。</p><pre class="line-numbers language-none"><code class="language-none">kubectl taint nodes --all node-role.kubernetes.io/master- <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="安装dashboard"><a href="#安装dashboard" class="headerlink" title="安装dashboard"></a>安装dashboard</h2><p>从官网拷贝dashboard的yaml文件到本地，保存为dashboard.yaml，需要注意版本。<br>#Create a new ServiceAccount  </p><pre class="line-numbers language-none"><code class="language-none">kubectl create serviceaccount k8sadmin -n kube-system  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>#Create a ClusterRoleBinding with Cluster Admin Privileges  </p><pre class="line-numbers language-none"><code class="language-none">kubectl create clusterrolebinding k8sadmin --clusterrole=cluster-admin --serviceaccount=kube-system:k8sadmin  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>#Get the token  </p><pre class="line-numbers language-none"><code class="language-none">kubectl get secret -n kube-system | grep k8sadmin | cut -d " " -f1 | xargs -n 1 | xargs kubectl get secret  -o 'jsonpath={.data.token}' -n kube-system | base64 --decode  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>执行以上命令，最后一条命令或获取到一串token，直接使用得到的token登录dashboard。</p><h1 id="安装dashboard-1"><a href="#安装dashboard-1" class="headerlink" title="安装dashboard"></a>安装dashboard</h1><pre class="line-numbers language-none"><code class="language-none">kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v1.10.1/src/deploy/recommended/kubernetes-dashboard.yaml  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果无法下载墙外镜像，修改image信息：</p><p><code>k8s.gcr.io/kubernetes-dashboard-amd64:v1.10.1   =&gt; ljchen/k8s_gcr_io_kubernetes-dashboard-amd64:v1.10.1</code></p><h2 id="安装WeaveScope"><a href="#安装WeaveScope" class="headerlink" title="安装WeaveScope"></a>安装WeaveScope</h2><pre class="line-numbers language-none"><code class="language-none">kubectl apply -f "https://cloud.weave.works/k8s/scope.yaml?k8s-version=$(kubectl version | base64 | tr -d '\n')"  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="设置端口映射"><a href="#设置端口映射" class="headerlink" title="设置端口映射"></a>设置端口映射</h1><pre class="line-numbers language-none"><code class="language-none">kubectl port-forward --address=0.0.0.0 -n weave "$(kubectl get -n weave pod --selector=weave-scope-component=app -o jsonpath='{.items..metadata.name}')" 4040  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>执行完以上命令后，在浏览器里面访问执行命令所在的节点的http://{IP}:4040，将看到以下界面。是不是很炫酷！</p><h1 id="阿里巴巴开源镜像站"><a href="#阿里巴巴开源镜像站" class="headerlink" title="阿里巴巴开源镜像站"></a><a href="http://ljchen.net/2018/10/23/%E5%9F%BA%E4%BA%8E%E9%98%BF%E9%87%8C%E4%BA%91%E9%95%9C%E5%83%8F%E7%AB%99%E5%AE%89%E8%A3%85kubernetes/#%E9%98%BF%E9%87%8C%E5%B7%B4%E5%B7%B4%E5%BC%80%E6%BA%90%E9%95%9C%E5%83%8F%E7%AB%99" title="阿里巴巴开源镜像站"></a>阿里巴巴开源镜像站</h1><blockquote><p>请自行点击kubernetes的帮助。</p></blockquote><p>记录以下命令，便于添加其他节点主机：</p><pre class="line-numbers language-none"><code class="language-none">kubeadm join 192.168.56.201:6443 --token 59mifb.diod87cm1ivbqw6n --discovery-token-ca-cert-hash sha256:685b3c121d11f92c5b2af15b163c3860d0188f7795e48e272dde35e4d8435700<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kubernetes, docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>11 个 Nginx 参数性能优化工作</title>
      <link href="/2019/09/01/11-ge-nginx-can-shu-xing-neng-you-hua-gong-zuo/"/>
      <url>/2019/09/01/11-ge-nginx-can-shu-xing-neng-you-hua-gong-zuo/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>工作上，需要配置 Nginx，要投入生产使用，做了一点优化工作，加上以前也经常折腾 Nginx，故记下一些优化工作。</p><h4 id="优化-Nginx-进程数量"><a href="#优化-Nginx-进程数量" class="headerlink" title="优化 Nginx 进程数量"></a>优化 Nginx 进程数量</h4><p>配置参数如下：</p><pre class="line-numbers language-none"><code class="language-none">worker_processes  1; # 指定 Nginx 要开启的进程数，结尾的数字就是进程的个数，可以为 auto<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这个参数调整的是 Nginx 服务的 worker 进程数，Nginx 有 Master 进程和 worker 进程之分，Master 为管理进程、真正接待“顾客”的是 worker 进程。</p><p>进程个数的策略：worker 进程数可以设置为等于 CPU 的核数。高流量高并发场合也可以考虑将进程数提高至 CPU 核数 x 2。这个参数除了要和 CPU 核数匹配之外，也与硬盘存储的数据及系统的负载有关，设置为 CPU 核数是个好的起始配置，也是官方建议的。</p><p>当然，如果想省麻烦也可以配置为<code>worker_processes auto;</code>，将由 Nginx 自行决定 worker 数量。当访问量快速增加时，Nginx 就会临时 fork 新进程来缩短系统的瞬时开销和降低服务的时间。</p><h4 id="将不同的进程绑定到不同的CPU"><a href="#将不同的进程绑定到不同的CPU" class="headerlink" title="将不同的进程绑定到不同的CPU"></a>将不同的进程绑定到不同的CPU</h4><p>默认情况下，Nginx 的多个进程有可能运行在同一个 CPU 核上，导致 Nginx 进程使用硬件的资源不均，这就需要制定进程分配到指定的 CPU 核上处理，达到充分有效利用硬件的目的。配置参数如下：</p><pre class="line-numbers language-none"><code class="language-none">worker_processes  4; worker_cpu_affinity  0001  0010  0100  1000;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其中 <code>worker_cpu_affinity</code> 就是配置 Nginx 进程与 CPU 亲和力的参数，即把不同的进程分给不同的 CPU 核处理。这里的<code>0001 0010 0100 1000</code>是掩码，分别代表第1、2、3、4核CPU。上述配置会为每个进程分配一核CPU处理。</p><p>当然，如果想省麻烦也可以配置<code>worker_cpu_affinity auto;</code>，将由 Nginx 按需自动分配。</p><h4 id="Nginx-事件处理模型优化"><a href="#Nginx-事件处理模型优化" class="headerlink" title="Nginx 事件处理模型优化"></a>Nginx 事件处理模型优化</h4><p>Nginx 的连接处理机制在不同的操作系统中会采用不同的 I/O 模型，在 linux 下，Nginx 使用 epoll 的 I/O 多路复用模型，在 Freebsd 中使用 kqueue 的 I/O 多路复用模型，在 Solaris 中使用 /dev/poll 方式的 I/O 多路复用模型，在 Windows 中使用 icop，等等。</p><p>配置如下：</p><pre class="line-numbers language-none"><code class="language-none">events { use  epoll; }<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>events</code> 指令是设定 Nginx 的工作模式及连接数上限。<code>use</code>指令用来指定 Nginx 的工作模式。Nginx 支持的工作模式有 select、 poll、 kqueue、 epoll 、 rtsig 和/ dev/poll。当然，也可以不指定事件处理模型，Nginx 会自动选择最佳的事件处理模型。</p><h4 id="单个进程允许的客户端最大连接数"><a href="#单个进程允许的客户端最大连接数" class="headerlink" title="单个进程允许的客户端最大连接数"></a>单个进程允许的客户端最大连接数</h4><p>通过调整控制连接数的参数来调整 Nginx 单个进程允许的客户端最大连接数。</p><pre class="line-numbers language-none"><code class="language-none">events { worker_connections  20480; }<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>worker_connections</code> 也是个事件模块指令，用于定义 Nginx 每个进程的最大连接数，默认是 1024。</p><p>最大连接数的计算公式如下：</p><p><code>max_clients = worker_processes * worker_connections;</code></p><p>如果作为反向代理，因为浏览器默认会开启 2 个连接到 server，而且 Nginx 还会使用fds（file descriptor）从同一个连接池建立连接到 upstream 后端。则最大连接数的计算公式如下：</p><p><code>max_clients = worker_processes * worker_connections / 4;</code></p><p>另外，<strong>进程的最大连接数受 Linux 系统进程的最大打开文件数限制</strong>，在执行操作系统命令 <code>ulimit -HSn 65535</code>或配置相应文件后， <code>worker_connections</code> 的设置才能生效。</p><h4 id="配置获取更多连接数"><a href="#配置获取更多连接数" class="headerlink" title="配置获取更多连接数"></a>配置获取更多连接数</h4><p>默认情况下，Nginx 进程只会在一个时刻接收一个新的连接，我们可以配置<code>multi_accept</code> 为 <code>on</code>，实现在一个时刻内可以接收多个新的连接，提高处理效率。该参数默认是 <code>off</code>，建议开启。</p><pre class="line-numbers language-none"><code class="language-none">events {  multi_accept on;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="配置-worker-进程的最大打开文件数"><a href="#配置-worker-进程的最大打开文件数" class="headerlink" title="配置 worker 进程的最大打开文件数"></a>配置 worker 进程的最大打开文件数</h4><p>调整配置 Nginx worker 进程的最大打开文件数，这个控制连接数的参数为<code> worker_rlimit_nofile</code>。该参数的实际配置如下:</p><pre class="line-numbers language-none"><code class="language-none">worker_rlimit_nofile 65535;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可设置为系统优化后的 <code>ulimit -HSn</code> 的结果</p><h4 id="优化域名的散列表大小"><a href="#优化域名的散列表大小" class="headerlink" title="优化域名的散列表大小"></a>优化域名的散列表大小</h4><pre class="line-numbers language-none"><code class="language-none">http {  server_names_hash_bucket_size 128;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>参数作用:设置存放域名( server names)的最大散列表的存储桶( bucket)的大小。 默认值依赖 CPU 的缓存行。</p><p><code>server_names_hash_bucket_size</code> 的值是不能带单位 的。配置主机时必须设置该值，否则无法运行 Nginx，或者无法通过测试 。 该设置与 <code>server_ names_hash_max_size</code> 共同控制保存服务器名的 hash 表， hash bucket size 总是等于 hash 表的大小， 并且是一路处理器缓存大小的倍数。若 hash bucket size 等于一路处理器缓存的大小，那么在查找键时， 最坏的情况下在内存中查找的次数为 2。第一次是确定存储单元的地址，第二次是在存储单元中查找键值 。 若报 出 hash max size 或 hash bucket size 的提示，则需要增加 <code>server_names_hash_max size</code> 的值。</p><h4 id="TCP-优化"><a href="#TCP-优化" class="headerlink" title="TCP 优化"></a>TCP 优化</h4><pre class="line-numbers language-none"><code class="language-none">http {  sendfile on;  tcp_nopush on;  keepalive_timeout 120;  tcp_nodelay on;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第一行的 <code>sendfile</code> 配置可以提高 Nginx 静态资源托管效率。sendfile 是一个系统调用，直接在内核空间完成文件发送，不需要先 read 再 write，没有上下文切换开销。</p><p>TCP_NOPUSH 是 FreeBSD 的一个 socket 选项，对应 Linux 的 TCP_CORK，Nginx 里统一用 <code>tcp_nopush</code> 来控制它，并且只有在启用了 <code>sendfile</code> 之后才生效。启用它之后，数据包会累计到一定大小之后才会发送，减小了额外开销，提高网络效率。</p><p>TCP_NODELAY 也是一个 socket 选项，启用后会禁用 Nagle 算法，尽快发送数据，某些情况下可以节约 200ms（Nagle 算法原理是：在发出去的数据还未被确认之前，新生成的小数据先存起来，凑满一个 MSS 或者等到收到确认后再发送）。Nginx 只会针对处于 keep-alive 状态的 TCP 连接才会启用 <code>tcp_nodelay</code>。</p><h4 id="优化连接参数"><a href="#优化连接参数" class="headerlink" title="优化连接参数"></a>优化连接参数</h4><pre class="line-numbers language-none"><code class="language-none">http {  client_header_buffer_size 32k;  large_client_header_buffers 4 32k;  client_max_body_size 1024m;  client_body_buffer_size 10m;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这部分更多是更具业务场景来决定的。例如<code>client_max_body_size</code>用来决定请求体的大小，用来限制上传文件的大小。上面列出的参数可以作为起始参数。</p><h4 id="配置压缩优化"><a href="#配置压缩优化" class="headerlink" title="配置压缩优化"></a>配置压缩优化</h4><p><strong>1、Gzip 压缩</strong></p><p>我们在上线前，代码（JS、CSS 和 HTML）会做压缩，图片也会做压缩（PNGOUT、Pngcrush、JpegOptim、Gifsicle 等）。对于文本文件，在服务端发送响应之前进行 GZip 压缩也很重要，通常压缩后的文本大小会减小到原来的 1/4 - 1/3。</p><pre class="line-numbers language-none"><code class="language-none">http {  gzip on;  gzip_buffers 16 8k;  gzip_comp_level 6;  gzip_http_version 1.0;  gzip_min_length 1000;  gzip_proxied any;  gzip_vary on;  gzip_types    text/xml application/xml application/atom+xml application/rss+xml application/xhtml+xml image/svg+xml    text/javascript application/javascript application/x-javascript    text/x-json application/json application/x-web-app-manifest+json    text/css text/plain text/x-component    font/opentype application/x-font-ttf application/vnd.ms-fontobject    image/x-icon;  gzip_disable "MSIE [1-6]\.(?!.*SV1)";}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这部分内容比较简单，只有两个地方需要解释下：</p><p><code>gzip_vary</code> 用来输出 Vary 响应头，用来解决某些缓存服务的一个问题，详情请看我之前的博客：HTTP 协议中 Vary 的一些研究。</p><p><code>gzip_disable</code> 指令接受一个正则表达式，当请求头中的 UserAgent 字段满足这个正则时，响应不会启用 GZip，这是为了解决在某些浏览器启用 GZip 带来的问题。</p><p>默认 Nginx 只会针对 HTTP/1.1 及以上的请求才会启用 GZip，因为部分早期的 HTTP/1.0 客户端在处理 GZip 时有 Bug。现在基本上可以忽略这种情况，于是可以指定 gzip_http_version 1.0 来针对 HTTP/1.0 及以上的请求开启 GZip。</p><p><strong>2、Brotli 压缩</strong></p><p>Brotli 是基于LZ77算法的一个现代变体、霍夫曼编码和二阶上下文建模。Google软件工程师在2015年9月发布了包含通用无损数据压缩的Brotli增强版本，特别侧重于HTTP压缩。其中的编码器被部分改写以提高压缩比，编码器和解码器都提高了速度，流式API已被改进，增加更多压缩质量级别。</p><p>需要安装<code>libbrotli </code>、<code>ngx_brotli </code>，重新编译 Nginx 时，带上<code>--add-module=/path/to/ngx_brotli</code>即可，然后配置如下</p><pre class="line-numbers language-none"><code class="language-none">http {  brotli on;  brotli_comp_level 6;  brotli_types text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript application/javascript image/svg+xml;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Brotli 可与 Gzip 共存在一个配置文件中</p><h4 id="静态资源优化"><a href="#静态资源优化" class="headerlink" title="静态资源优化"></a>静态资源优化</h4><p>静态资源优化，可以减少连接请求数，同时也不需要对这些资源请求打印日志。但副作用是资源更新可能无法及时。</p><pre class="line-numbers language-none"><code class="language-none">server {    # 图片、视频    location ~ .*\.(gif|jpg|jpeg|png|bmp|swf|flv|mp4|ico)$ {      expires 30d;      access_log off;    }    # 字体    location ~ .*\.(eot|ttf|otf|woff|svg)$ {      expires 30d;      access_log off;    }    # js、css    location ~ .*\.(js|css)?$ {      expires 7d;      access_log off;    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr>]]></content>
      
      
      <categories>
          
          <category> nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>音乐欣赏</title>
      <link href="/2019/08/27/yin-le/"/>
      <url>/2019/08/27/yin-le/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>最近最喜欢听的一首歌，分享给大家。</p>        <div id="aplayer-lSOyreHM" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;">            <pre class="aplayer-lrc-content"></pre>        </div>        <script>          var ap = new APlayer({            element: document.getElementById("aplayer-lSOyreHM"),            narrow: false,            autoplay: false,            showlrc: false,            music: {              title: "来自天堂的魔鬼",              author: "邓紫棋",              url: "http://fs.open.kugou.com/118792e7757ad99fe25a5ce4503712b7/5d82eef6/G108/M00/0D/0D/DIcBAFvgHyOAUoSLADv7TtiRGW8736.mp3",              pic: "http://p1.music.126.net/kVwk6b8Qdya8oDyGDcyAVA==/1364493930777368.jpg?param=300x300",              lrc: ""            }          });          window.aplayers || (window.aplayers = []);          window.aplayers.push(ap);        </script>]]></content>
      
      
      <categories>
          
          <category> music </category>
          
      </categories>
      
      
        <tags>
            
            <tag> music </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>新世界的大门</title>
      <link href="/2019/08/26/xin-shi-jie/"/>
      <url>/2019/08/26/xin-shi-jie/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new "My New Post"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> new world </category>
          
      </categories>
      
      
        <tags>
            
            <tag> new world </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
